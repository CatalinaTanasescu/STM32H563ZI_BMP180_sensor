
bmp180_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc74  08000250  08000250  00010250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800cec8  0800cec8  0001cec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf40  0800cf40  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf40  0800cf40  0001cf40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf48  0800cf48  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf48  0800cf48  0001cf48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf4c  0800cf4c  0001cf4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800cf50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b4  20000070  0800cfc0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  0800cfc0  00020824  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dd5a  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003231  00000000  00000000  0003de43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  00041078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001061  00000000  00000000  00042598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00037115  00000000  00000000  000435f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf1d  00000000  00000000  0007a70e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0015dc41  00000000  00000000  0009762b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061d0  00000000  00000000  001f526c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001fb43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000070 	.word	0x20000070
 800026c:	00000000 	.word	0x00000000
 8000270:	0800ceac 	.word	0x0800ceac

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000074 	.word	0x20000074
 800028c:	0800ceac 	.word	0x0800ceac

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b982 	b.w	8000fb4 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ccc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d146      	bne.n	8000d66 <__udivmoddi4+0x9e>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d95e      	bls.n	8000d9c <__udivmoddi4+0xd4>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	409c      	lsls	r4, r3
 8000cf0:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf4:	4317      	orrs	r7, r2
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	0c22      	lsrs	r2, r4, #16
 8000d00:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	fb01 f005 	mul.w	r0, r1, r5
 8000d0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x5e>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x5c>
 8000d1e:	4290      	cmp	r0, r2
 8000d20:	f200 8134 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d24:	4639      	mov	r1, r7
 8000d26:	1a12      	subs	r2, r2, r0
 8000d28:	b2a4      	uxth	r4, r4
 8000d2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d32:	fb00 f505 	mul.w	r5, r0, r5
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	42a5      	cmp	r5, r4
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x88>
 8000d3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d42:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x86>
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	f200 8119 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000d4e:	4610      	mov	r0, r2
 8000d50:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d54:	1b64      	subs	r4, r4, r5
 8000d56:	2100      	movs	r1, #0
 8000d58:	b11e      	cbz	r6, 8000d62 <__udivmoddi4+0x9a>
 8000d5a:	40dc      	lsrs	r4, r3
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e9c6 4300 	strd	r4, r3, [r6]
 8000d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0xb4>
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	f000 80fc 	beq.w	8000f68 <__udivmoddi4+0x2a0>
 8000d70:	2100      	movs	r1, #0
 8000d72:	e9c6 0500 	strd	r0, r5, [r6]
 8000d76:	4608      	mov	r0, r1
 8000d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d7c:	fab3 f183 	clz	r1, r3
 8000d80:	2900      	cmp	r1, #0
 8000d82:	d14c      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d84:	42ab      	cmp	r3, r5
 8000d86:	f0c0 80f2 	bcc.w	8000f6e <__udivmoddi4+0x2a6>
 8000d8a:	4282      	cmp	r2, r0
 8000d8c:	f240 80ef 	bls.w	8000f6e <__udivmoddi4+0x2a6>
 8000d90:	4608      	mov	r0, r1
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e5      	beq.n	8000d62 <__udivmoddi4+0x9a>
 8000d96:	e9c6 4700 	strd	r4, r7, [r6]
 8000d9a:	e7e2      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xd8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f382 	clz	r3, r2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f040 809f 	bne.w	8000ee8 <__udivmoddi4+0x220>
 8000daa:	1a8a      	subs	r2, r1, r2
 8000dac:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000db0:	fa1f f78c 	uxth.w	r7, ip
 8000db4:	2101      	movs	r1, #1
 8000db6:	fbb2 f5fe 	udiv	r5, r2, lr
 8000dba:	fb0e 2015 	mls	r0, lr, r5, r2
 8000dbe:	0c22      	lsrs	r2, r4, #16
 8000dc0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc4:	fb07 f005 	mul.w	r0, r7, r5
 8000dc8:	4290      	cmp	r0, r2
 8000dca:	d90f      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd4:	bf2c      	ite	cs
 8000dd6:	f04f 0901 	movcs.w	r9, #1
 8000dda:	f04f 0900 	movcc.w	r9, #0
 8000dde:	4290      	cmp	r0, r2
 8000de0:	d903      	bls.n	8000dea <__udivmoddi4+0x122>
 8000de2:	f1b9 0f00 	cmp.w	r9, #0
 8000de6:	f000 80ce 	beq.w	8000f86 <__udivmoddi4+0x2be>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0fe 	udiv	r0, r2, lr
 8000df4:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df8:	fb00 f707 	mul.w	r7, r0, r7
 8000dfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e00:	42a7      	cmp	r7, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	42a7      	cmp	r7, r4
 8000e10:	f200 80b3 	bhi.w	8000f7a <__udivmoddi4+0x2b2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	1be4      	subs	r4, r4, r7
 8000e18:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1c:	e79c      	b.n	8000d58 <__udivmoddi4+0x90>
 8000e1e:	f1c1 0420 	rsb	r4, r1, #32
 8000e22:	408b      	lsls	r3, r1
 8000e24:	fa05 fc01 	lsl.w	ip, r5, r1
 8000e28:	fa22 f704 	lsr.w	r7, r2, r4
 8000e2c:	40e5      	lsrs	r5, r4
 8000e2e:	408a      	lsls	r2, r1
 8000e30:	431f      	orrs	r7, r3
 8000e32:	fa20 f304 	lsr.w	r3, r0, r4
 8000e36:	4088      	lsls	r0, r1
 8000e38:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e3c:	ea43 030c 	orr.w	r3, r3, ip
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb5 fef8 	udiv	lr, r5, r8
 8000e4c:	fb08 551e 	mls	r5, r8, lr, r5
 8000e50:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000e54:	fb0e f90c 	mul.w	r9, lr, ip
 8000e58:	45a9      	cmp	r9, r5
 8000e5a:	d90e      	bls.n	8000e7a <__udivmoddi4+0x1b2>
 8000e5c:	197d      	adds	r5, r7, r5
 8000e5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e62:	bf2c      	ite	cs
 8000e64:	f04f 0b01 	movcs.w	fp, #1
 8000e68:	f04f 0b00 	movcc.w	fp, #0
 8000e6c:	45a9      	cmp	r9, r5
 8000e6e:	d903      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e70:	f1bb 0f00 	cmp.w	fp, #0
 8000e74:	f000 808d 	beq.w	8000f92 <__udivmoddi4+0x2ca>
 8000e78:	46d6      	mov	lr, sl
 8000e7a:	eba5 0509 	sub.w	r5, r5, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb5 f3f8 	udiv	r3, r5, r8
 8000e86:	fb08 5513 	mls	r5, r8, r3, r5
 8000e8a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e8e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000e92:	45ac      	cmp	ip, r5
 8000e94:	d906      	bls.n	8000ea4 <__udivmoddi4+0x1dc>
 8000e96:	197d      	adds	r5, r7, r5
 8000e98:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e9c:	d201      	bcs.n	8000ea2 <__udivmoddi4+0x1da>
 8000e9e:	45ac      	cmp	ip, r5
 8000ea0:	d87e      	bhi.n	8000fa0 <__udivmoddi4+0x2d8>
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000ea8:	eba5 050c 	sub.w	r5, r5, ip
 8000eac:	fba3 9802 	umull	r9, r8, r3, r2
 8000eb0:	4545      	cmp	r5, r8
 8000eb2:	46ce      	mov	lr, r9
 8000eb4:	46c4      	mov	ip, r8
 8000eb6:	d302      	bcc.n	8000ebe <__udivmoddi4+0x1f6>
 8000eb8:	d106      	bne.n	8000ec8 <__udivmoddi4+0x200>
 8000eba:	4548      	cmp	r0, r9
 8000ebc:	d204      	bcs.n	8000ec8 <__udivmoddi4+0x200>
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec4:	eb68 0c07 	sbc.w	ip, r8, r7
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d06f      	beq.n	8000fac <__udivmoddi4+0x2e4>
 8000ecc:	ebb0 020e 	subs.w	r2, r0, lr
 8000ed0:	eb65 050c 	sbc.w	r5, r5, ip
 8000ed4:	40ca      	lsrs	r2, r1
 8000ed6:	fa05 f404 	lsl.w	r4, r5, r4
 8000eda:	40cd      	lsrs	r5, r1
 8000edc:	4618      	mov	r0, r3
 8000ede:	4314      	orrs	r4, r2
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	e9c6 4500 	strd	r4, r5, [r6]
 8000ee6:	e73c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000ee8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eec:	f1c3 0220 	rsb	r2, r3, #32
 8000ef0:	4099      	lsls	r1, r3
 8000ef2:	409c      	lsls	r4, r3
 8000ef4:	40d5      	lsrs	r5, r2
 8000ef6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000efa:	fa20 f202 	lsr.w	r2, r0, r2
 8000efe:	fa1f f78c 	uxth.w	r7, ip
 8000f02:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f06:	430a      	orrs	r2, r1
 8000f08:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f507 	mul.w	r5, r0, r7
 8000f16:	428d      	cmp	r5, r1
 8000f18:	d90e      	bls.n	8000f38 <__udivmoddi4+0x270>
 8000f1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f22:	bf2c      	ite	cs
 8000f24:	f04f 0901 	movcs.w	r9, #1
 8000f28:	f04f 0900 	movcc.w	r9, #0
 8000f2c:	428d      	cmp	r5, r1
 8000f2e:	d902      	bls.n	8000f36 <__udivmoddi4+0x26e>
 8000f30:	f1b9 0f00 	cmp.w	r9, #0
 8000f34:	d031      	beq.n	8000f9a <__udivmoddi4+0x2d2>
 8000f36:	4640      	mov	r0, r8
 8000f38:	1b49      	subs	r1, r1, r5
 8000f3a:	b292      	uxth	r2, r2
 8000f3c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000f40:	fb0e 1115 	mls	r1, lr, r5, r1
 8000f44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f48:	fb05 f107 	mul.w	r1, r5, r7
 8000f4c:	4291      	cmp	r1, r2
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x298>
 8000f50:	eb1c 0202 	adds.w	r2, ip, r2
 8000f54:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f58:	d201      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f5a:	4291      	cmp	r1, r2
 8000f5c:	d823      	bhi.n	8000fa6 <__udivmoddi4+0x2de>
 8000f5e:	4645      	mov	r5, r8
 8000f60:	1a52      	subs	r2, r2, r1
 8000f62:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f66:	e726      	b.n	8000db6 <__udivmoddi4+0xee>
 8000f68:	4631      	mov	r1, r6
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	e6f9      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000f6e:	1a84      	subs	r4, r0, r2
 8000f70:	eb65 0203 	sbc.w	r2, r5, r3
 8000f74:	2001      	movs	r0, #1
 8000f76:	4617      	mov	r7, r2
 8000f78:	e70b      	b.n	8000d92 <__udivmoddi4+0xca>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74a      	b.n	8000e16 <__udivmoddi4+0x14e>
 8000f80:	4464      	add	r4, ip
 8000f82:	3802      	subs	r0, #2
 8000f84:	e6e4      	b.n	8000d50 <__udivmoddi4+0x88>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	3902      	subs	r1, #2
 8000f8e:	4462      	add	r2, ip
 8000f90:	e6c9      	b.n	8000d26 <__udivmoddi4+0x5e>
 8000f92:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f96:	443d      	add	r5, r7
 8000f98:	e76f      	b.n	8000e7a <__udivmoddi4+0x1b2>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4461      	add	r1, ip
 8000f9e:	e7cb      	b.n	8000f38 <__udivmoddi4+0x270>
 8000fa0:	3b02      	subs	r3, #2
 8000fa2:	443d      	add	r5, r7
 8000fa4:	e77e      	b.n	8000ea4 <__udivmoddi4+0x1dc>
 8000fa6:	3d02      	subs	r5, #2
 8000fa8:	4462      	add	r2, ip
 8000faa:	e7d9      	b.n	8000f60 <__udivmoddi4+0x298>
 8000fac:	4618      	mov	r0, r3
 8000fae:	4631      	mov	r1, r6
 8000fb0:	e6d7      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <read_callibration_data>:

#define atmPress 101325 //Pa


void read_callibration_data (void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000fd0:	23aa      	movs	r3, #170	; 0xaa
 8000fd2:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fd4:	8afa      	ldrh	r2, [r7, #22]
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	2316      	movs	r3, #22
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	21ee      	movs	r1, #238	; 0xee
 8000fe8:	4836      	ldr	r0, [pc, #216]	; (80010c4 <read_callibration_data+0x10c>)
 8000fea:	f003 fb29 	bl	8004640 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000fee:	783b      	ldrb	r3, [r7, #0]
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	787b      	ldrb	r3, [r7, #1]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <read_callibration_data+0x110>)
 8000ffe:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8001000:	78bb      	ldrb	r3, [r7, #2]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <read_callibration_data+0x114>)
 8001010:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8001012:	793b      	ldrb	r3, [r7, #4]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	b21a      	sxth	r2, r3
 8001018:	797b      	ldrb	r3, [r7, #5]
 800101a:	b21b      	sxth	r3, r3
 800101c:	4313      	orrs	r3, r2
 800101e:	b21a      	sxth	r2, r3
 8001020:	4b2b      	ldr	r3, [pc, #172]	; (80010d0 <read_callibration_data+0x118>)
 8001022:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8001024:	79bb      	ldrb	r3, [r7, #6]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b21a      	sxth	r2, r3
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	b21b      	sxth	r3, r3
 800102e:	4313      	orrs	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	b29a      	uxth	r2, r3
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <read_callibration_data+0x11c>)
 8001036:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001038:	7a3b      	ldrb	r3, [r7, #8]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	7a7b      	ldrb	r3, [r7, #9]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21b      	sxth	r3, r3
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <read_callibration_data+0x120>)
 800104a:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 800104c:	7abb      	ldrb	r3, [r7, #10]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	7afb      	ldrb	r3, [r7, #11]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <read_callibration_data+0x124>)
 800105e:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8001060:	7b3b      	ldrb	r3, [r7, #12]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	7b7b      	ldrb	r3, [r7, #13]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <read_callibration_data+0x128>)
 8001070:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <read_callibration_data+0x12c>)
 8001082:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001084:	7c3b      	ldrb	r3, [r7, #16]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7c7b      	ldrb	r3, [r7, #17]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <read_callibration_data+0x130>)
 8001094:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 8001096:	7cbb      	ldrb	r3, [r7, #18]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7cfb      	ldrb	r3, [r7, #19]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <read_callibration_data+0x134>)
 80010a6:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 80010a8:	7d3b      	ldrb	r3, [r7, #20]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7d7b      	ldrb	r3, [r7, #21]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <read_callibration_data+0x138>)
 80010b8:	801a      	strh	r2, [r3, #0]
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200002e4 	.word	0x200002e4
 80010c8:	2000008c 	.word	0x2000008c
 80010cc:	2000008e 	.word	0x2000008e
 80010d0:	20000090 	.word	0x20000090
 80010d4:	20000092 	.word	0x20000092
 80010d8:	20000094 	.word	0x20000094
 80010dc:	20000096 	.word	0x20000096
 80010e0:	20000098 	.word	0x20000098
 80010e4:	2000009a 	.word	0x2000009a
 80010e8:	2000009c 	.word	0x2000009c
 80010ec:	2000009e 	.word	0x2000009e
 80010f0:	200000a0 	.word	0x200000a0

080010f4 <Get_UTemp>:


uint16_t Get_UTemp (void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 80010fa:	232e      	movs	r3, #46	; 0x2e
 80010fc:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 80010fe:	2300      	movs	r3, #0
 8001100:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2301      	movs	r3, #1
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2301      	movs	r3, #1
 8001112:	22f4      	movs	r2, #244	; 0xf4
 8001114:	21ee      	movs	r1, #238	; 0xee
 8001116:	480f      	ldr	r0, [pc, #60]	; (8001154 <Get_UTemp+0x60>)
 8001118:	f003 f97e 	bl	8004418 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 800111c:	2005      	movs	r0, #5
 800111e:	f001 fae9 	bl	80026f4 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	2302      	movs	r3, #2
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2301      	movs	r3, #1
 8001132:	22f6      	movs	r2, #246	; 0xf6
 8001134:	21ee      	movs	r1, #238	; 0xee
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <Get_UTemp+0x60>)
 8001138:	f003 fa82 	bl	8004640 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 800113c:	793b      	ldrb	r3, [r7, #4]
 800113e:	b29b      	uxth	r3, r3
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b29a      	uxth	r2, r3
 8001144:	797b      	ldrb	r3, [r7, #5]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4413      	add	r3, r2
 800114a:	b29b      	uxth	r3, r3
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200002e4 	.word	0x200002e4

08001158 <BMP180_GetTemp>:

float BMP180_GetTemp (void)
{
 8001158:	b5b0      	push	{r4, r5, r7, lr}
 800115a:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 800115c:	f7ff ffca 	bl	80010f4 <Get_UTemp>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <BMP180_GetTemp+0x108>)
 8001166:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001168:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <BMP180_GetTemp+0x108>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a3d      	ldr	r2, [pc, #244]	; (8001264 <BMP180_GetTemp+0x10c>)
 800116e:	8812      	ldrh	r2, [r2, #0]
 8001170:	1a9b      	subs	r3, r3, r2
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9de 	bl	8000534 <__aeabi_i2d>
 8001178:	4604      	mov	r4, r0
 800117a:	460d      	mov	r5, r1
 800117c:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <BMP180_GetTemp+0x110>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9d7 	bl	8000534 <__aeabi_i2d>
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	4b38      	ldr	r3, [pc, #224]	; (800126c <BMP180_GetTemp+0x114>)
 800118c:	f7ff fb66 	bl	800085c <__aeabi_ddiv>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4620      	mov	r0, r4
 8001196:	4629      	mov	r1, r5
 8001198:	f7ff fa36 	bl	8000608 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fce0 	bl	8000b68 <__aeabi_d2iz>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a31      	ldr	r2, [pc, #196]	; (8001270 <BMP180_GetTemp+0x118>)
 80011ac:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80011ae:	4b31      	ldr	r3, [pc, #196]	; (8001274 <BMP180_GetTemp+0x11c>)
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9bd 	bl	8000534 <__aeabi_i2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <BMP180_GetTemp+0x120>)
 80011c0:	f7ff fa22 	bl	8000608 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4614      	mov	r4, r2
 80011ca:	461d      	mov	r5, r3
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <BMP180_GetTemp+0x124>)
 80011ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b26      	ldr	r3, [pc, #152]	; (8001270 <BMP180_GetTemp+0x118>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f9aa 	bl	8000534 <__aeabi_i2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4620      	mov	r0, r4
 80011e6:	4629      	mov	r1, r5
 80011e8:	f7ff fb38 	bl	800085c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fcb8 	bl	8000b68 <__aeabi_d2iz>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a21      	ldr	r2, [pc, #132]	; (8001280 <BMP180_GetTemp+0x128>)
 80011fc:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <BMP180_GetTemp+0x118>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <BMP180_GetTemp+0x128>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <BMP180_GetTemp+0x12c>)
 800120a:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <BMP180_GetTemp+0x12c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3308      	adds	r3, #8
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f98e 	bl	8000534 <__aeabi_i2d>
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <BMP180_GetTemp+0x130>)
 800121e:	f7ff fb1d 	bl	800085c <__aeabi_ddiv>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fc9d 	bl	8000b68 <__aeabi_d2iz>
 800122e:	4603      	mov	r3, r0
 8001230:	4a16      	ldr	r2, [pc, #88]	; (800128c <BMP180_GetTemp+0x134>)
 8001232:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <BMP180_GetTemp+0x134>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f97b 	bl	8000534 <__aeabi_i2d>
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <BMP180_GetTemp+0x138>)
 8001244:	f7ff fb0a 	bl	800085c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fcd2 	bl	8000bf8 <__aeabi_d2f>
 8001254:	4603      	mov	r3, r0
 8001256:	ee07 3a90 	vmov	s15, r3
}
 800125a:	eeb0 0a67 	vmov.f32	s0, s15
 800125e:	bdb0      	pop	{r4, r5, r7, pc}
 8001260:	200000a4 	.word	0x200000a4
 8001264:	20000096 	.word	0x20000096
 8001268:	20000094 	.word	0x20000094
 800126c:	40e00000 	.word	0x40e00000
 8001270:	200000ac 	.word	0x200000ac
 8001274:	2000009e 	.word	0x2000009e
 8001278:	40a00000 	.word	0x40a00000
 800127c:	200000a0 	.word	0x200000a0
 8001280:	200000b0 	.word	0x200000b0
 8001284:	200000bc 	.word	0x200000bc
 8001288:	40300000 	.word	0x40300000
 800128c:	200000d0 	.word	0x200000d0
 8001290:	40240000 	.word	0x40240000

08001294 <Get_UPress>:


// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af04      	add	r7, sp, #16
 800129a:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	019b      	lsls	r3, r3, #6
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	3334      	adds	r3, #52	; 0x34
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <Get_UPress+0xb4>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	81bb      	strh	r3, [r7, #12]
 80012b0:	2300      	movs	r3, #0
 80012b2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80012b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	2301      	movs	r3, #1
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	f107 030f 	add.w	r3, r7, #15
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2301      	movs	r3, #1
 80012c6:	22f4      	movs	r2, #244	; 0xf4
 80012c8:	21ee      	movs	r1, #238	; 0xee
 80012ca:	4820      	ldr	r0, [pc, #128]	; (800134c <Get_UPress+0xb8>)
 80012cc:	f003 f8a4 	bl	8004418 <HAL_I2C_Mem_Write>
	switch (oss)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d81a      	bhi.n	800130c <Get_UPress+0x78>
 80012d6:	a201      	add	r2, pc, #4	; (adr r2, 80012dc <Get_UPress+0x48>)
 80012d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012dc:	080012ed 	.word	0x080012ed
 80012e0:	080012f5 	.word	0x080012f5
 80012e4:	080012fd 	.word	0x080012fd
 80012e8:	08001305 	.word	0x08001305
	{
		case (0):
			HAL_Delay (5);
 80012ec:	2005      	movs	r0, #5
 80012ee:	f001 fa01 	bl	80026f4 <HAL_Delay>
			break;
 80012f2:	e00b      	b.n	800130c <Get_UPress+0x78>
		case (1):
			HAL_Delay (8);
 80012f4:	2008      	movs	r0, #8
 80012f6:	f001 f9fd 	bl	80026f4 <HAL_Delay>
			break;
 80012fa:	e007      	b.n	800130c <Get_UPress+0x78>
		case (2):
			HAL_Delay (14);
 80012fc:	200e      	movs	r0, #14
 80012fe:	f001 f9f9 	bl	80026f4 <HAL_Delay>
			break;
 8001302:	e003      	b.n	800130c <Get_UPress+0x78>
		case (3):
			HAL_Delay (26);
 8001304:	201a      	movs	r0, #26
 8001306:	f001 f9f5 	bl	80026f4 <HAL_Delay>
			break;
 800130a:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 800130c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	2303      	movs	r3, #3
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	22f6      	movs	r2, #246	; 0xf6
 8001320:	21ee      	movs	r1, #238	; 0xee
 8001322:	480a      	ldr	r0, [pc, #40]	; (800134c <Get_UPress+0xb8>)
 8001324:	f003 f98c 	bl	8004640 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001328:	7b3b      	ldrb	r3, [r7, #12]
 800132a:	041a      	lsls	r2, r3, #16
 800132c:	7b7b      	ldrb	r3, [r7, #13]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	4413      	add	r3, r2
 8001332:	7bba      	ldrb	r2, [r7, #14]
 8001334:	441a      	add	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f1c3 0308 	rsb	r3, r3, #8
 800133c:	fa42 f303 	asr.w	r3, r2, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0800cec8 	.word	0x0800cec8
 800134c:	200002e4 	.word	0x200002e4

08001350 <BMP180_GetPress>:


float BMP180_GetPress (int oss)
{
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff9b 	bl	8001294 <Get_UPress>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4ba8      	ldr	r3, [pc, #672]	; (8001604 <BMP180_GetPress+0x2b4>)
 8001364:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001366:	4ba8      	ldr	r3, [pc, #672]	; (8001608 <BMP180_GetPress+0x2b8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4aa8      	ldr	r2, [pc, #672]	; (800160c <BMP180_GetPress+0x2bc>)
 800136c:	8812      	ldrh	r2, [r2, #0]
 800136e:	1a9b      	subs	r3, r3, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f8df 	bl	8000534 <__aeabi_i2d>
 8001376:	4604      	mov	r4, r0
 8001378:	460d      	mov	r5, r1
 800137a:	4ba5      	ldr	r3, [pc, #660]	; (8001610 <BMP180_GetPress+0x2c0>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f8d8 	bl	8000534 <__aeabi_i2d>
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4ba2      	ldr	r3, [pc, #648]	; (8001614 <BMP180_GetPress+0x2c4>)
 800138a:	f7ff fa67 	bl	800085c <__aeabi_ddiv>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4620      	mov	r0, r4
 8001394:	4629      	mov	r1, r5
 8001396:	f7ff f937 	bl	8000608 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4610      	mov	r0, r2
 80013a0:	4619      	mov	r1, r3
 80013a2:	f7ff fbe1 	bl	8000b68 <__aeabi_d2iz>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4a9b      	ldr	r2, [pc, #620]	; (8001618 <BMP180_GetPress+0x2c8>)
 80013aa:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80013ac:	4b9b      	ldr	r3, [pc, #620]	; (800161c <BMP180_GetPress+0x2cc>)
 80013ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8be 	bl	8000534 <__aeabi_i2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b98      	ldr	r3, [pc, #608]	; (8001620 <BMP180_GetPress+0x2d0>)
 80013be:	f7ff f923 	bl	8000608 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4614      	mov	r4, r2
 80013c8:	461d      	mov	r5, r3
 80013ca:	4b96      	ldr	r3, [pc, #600]	; (8001624 <BMP180_GetPress+0x2d4>)
 80013cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b91      	ldr	r3, [pc, #580]	; (8001618 <BMP180_GetPress+0x2c8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8ab 	bl	8000534 <__aeabi_i2d>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4620      	mov	r0, r4
 80013e4:	4629      	mov	r1, r5
 80013e6:	f7ff fa39 	bl	800085c <__aeabi_ddiv>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	f7ff fbb9 	bl	8000b68 <__aeabi_d2iz>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a8b      	ldr	r2, [pc, #556]	; (8001628 <BMP180_GetPress+0x2d8>)
 80013fa:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80013fc:	4b86      	ldr	r3, [pc, #536]	; (8001618 <BMP180_GetPress+0x2c8>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b89      	ldr	r3, [pc, #548]	; (8001628 <BMP180_GetPress+0x2d8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4413      	add	r3, r2
 8001406:	4a89      	ldr	r2, [pc, #548]	; (800162c <BMP180_GetPress+0x2dc>)
 8001408:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 800140a:	4b88      	ldr	r3, [pc, #544]	; (800162c <BMP180_GetPress+0x2dc>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001412:	4a87      	ldr	r2, [pc, #540]	; (8001630 <BMP180_GetPress+0x2e0>)
 8001414:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001416:	4b87      	ldr	r3, [pc, #540]	; (8001634 <BMP180_GetPress+0x2e4>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f889 	bl	8000534 <__aeabi_i2d>
 8001422:	4604      	mov	r4, r0
 8001424:	460d      	mov	r5, r1
 8001426:	4b82      	ldr	r3, [pc, #520]	; (8001630 <BMP180_GetPress+0x2e0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a81      	ldr	r2, [pc, #516]	; (8001630 <BMP180_GetPress+0x2e0>)
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f87e 	bl	8000534 <__aeabi_i2d>
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b7e      	ldr	r3, [pc, #504]	; (8001638 <BMP180_GetPress+0x2e8>)
 800143e:	f7ff fa0d 	bl	800085c <__aeabi_ddiv>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4620      	mov	r0, r4
 8001448:	4629      	mov	r1, r5
 800144a:	f7ff f8dd 	bl	8000608 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b71      	ldr	r3, [pc, #452]	; (8001620 <BMP180_GetPress+0x2d0>)
 800145c:	f7ff f9fe 	bl	800085c <__aeabi_ddiv>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fb7e 	bl	8000b68 <__aeabi_d2iz>
 800146c:	4603      	mov	r3, r0
 800146e:	4a6a      	ldr	r2, [pc, #424]	; (8001618 <BMP180_GetPress+0x2c8>)
 8001470:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 8001472:	4b72      	ldr	r3, [pc, #456]	; (800163c <BMP180_GetPress+0x2ec>)
 8001474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001478:	461a      	mov	r2, r3
 800147a:	4b6d      	ldr	r3, [pc, #436]	; (8001630 <BMP180_GetPress+0x2e0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f856 	bl	8000534 <__aeabi_i2d>
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	4b64      	ldr	r3, [pc, #400]	; (8001620 <BMP180_GetPress+0x2d0>)
 800148e:	f7ff f9e5 	bl	800085c <__aeabi_ddiv>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f7ff fb65 	bl	8000b68 <__aeabi_d2iz>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a61      	ldr	r2, [pc, #388]	; (8001628 <BMP180_GetPress+0x2d8>)
 80014a2:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80014a4:	4b5c      	ldr	r3, [pc, #368]	; (8001618 <BMP180_GetPress+0x2c8>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b5f      	ldr	r3, [pc, #380]	; (8001628 <BMP180_GetPress+0x2d8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4413      	add	r3, r2
 80014ae:	4a64      	ldr	r2, [pc, #400]	; (8001640 <BMP180_GetPress+0x2f0>)
 80014b0:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80014b2:	4b64      	ldr	r3, [pc, #400]	; (8001644 <BMP180_GetPress+0x2f4>)
 80014b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b8:	009a      	lsls	r2, r3, #2
 80014ba:	4b61      	ldr	r3, [pc, #388]	; (8001640 <BMP180_GetPress+0x2f0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	441a      	add	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	3302      	adds	r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	da00      	bge.n	80014ce <BMP180_GetPress+0x17e>
 80014cc:	3303      	adds	r3, #3
 80014ce:	109b      	asrs	r3, r3, #2
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b5d      	ldr	r3, [pc, #372]	; (8001648 <BMP180_GetPress+0x2f8>)
 80014d4:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80014d6:	4b5d      	ldr	r3, [pc, #372]	; (800164c <BMP180_GetPress+0x2fc>)
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b54      	ldr	r3, [pc, #336]	; (8001630 <BMP180_GetPress+0x2e0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	fb02 f303 	mul.w	r3, r2, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f824 	bl	8000534 <__aeabi_i2d>
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	4b57      	ldr	r3, [pc, #348]	; (8001650 <BMP180_GetPress+0x300>)
 80014f2:	f7ff f9b3 	bl	800085c <__aeabi_ddiv>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fb33 	bl	8000b68 <__aeabi_d2iz>
 8001502:	4603      	mov	r3, r0
 8001504:	4a44      	ldr	r2, [pc, #272]	; (8001618 <BMP180_GetPress+0x2c8>)
 8001506:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001508:	4b52      	ldr	r3, [pc, #328]	; (8001654 <BMP180_GetPress+0x304>)
 800150a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f810 	bl	8000534 <__aeabi_i2d>
 8001514:	4604      	mov	r4, r0
 8001516:	460d      	mov	r5, r1
 8001518:	4b45      	ldr	r3, [pc, #276]	; (8001630 <BMP180_GetPress+0x2e0>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a44      	ldr	r2, [pc, #272]	; (8001630 <BMP180_GetPress+0x2e0>)
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	fb02 f303 	mul.w	r3, r2, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f805 	bl	8000534 <__aeabi_i2d>
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b42      	ldr	r3, [pc, #264]	; (8001638 <BMP180_GetPress+0x2e8>)
 8001530:	f7ff f994 	bl	800085c <__aeabi_ddiv>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7ff f864 	bl	8000608 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4b42      	ldr	r3, [pc, #264]	; (8001658 <BMP180_GetPress+0x308>)
 800154e:	f7ff f985 	bl	800085c <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fb05 	bl	8000b68 <__aeabi_d2iz>
 800155e:	4603      	mov	r3, r0
 8001560:	4a31      	ldr	r2, [pc, #196]	; (8001628 <BMP180_GetPress+0x2d8>)
 8001562:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001564:	4b2c      	ldr	r3, [pc, #176]	; (8001618 <BMP180_GetPress+0x2c8>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b2f      	ldr	r3, [pc, #188]	; (8001628 <BMP180_GetPress+0x2d8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4413      	add	r3, r2
 800156e:	3302      	adds	r3, #2
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ffdf 	bl	8000534 <__aeabi_i2d>
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b38      	ldr	r3, [pc, #224]	; (800165c <BMP180_GetPress+0x30c>)
 800157c:	f7ff f96e 	bl	800085c <__aeabi_ddiv>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff faee 	bl	8000b68 <__aeabi_d2iz>
 800158c:	4603      	mov	r3, r0
 800158e:	4a2c      	ldr	r2, [pc, #176]	; (8001640 <BMP180_GetPress+0x2f0>)
 8001590:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001592:	4b33      	ldr	r3, [pc, #204]	; (8001660 <BMP180_GetPress+0x310>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	461a      	mov	r2, r3
 8001598:	4b29      	ldr	r3, [pc, #164]	; (8001640 <BMP180_GetPress+0x2f0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80015a0:	fb02 f303 	mul.w	r3, r2, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffb5 	bl	8000514 <__aeabi_ui2d>
 80015aa:	f04f 0200 	mov.w	r2, #0
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <BMP180_GetPress+0x2c4>)
 80015b0:	f7ff f954 	bl	800085c <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff fafc 	bl	8000bb8 <__aeabi_d2uiz>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a28      	ldr	r2, [pc, #160]	; (8001664 <BMP180_GetPress+0x314>)
 80015c4:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 80015c6:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <BMP180_GetPress+0x2b4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <BMP180_GetPress+0x2f8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	fa41 f202 	asr.w	r2, r1, r2
 80015dc:	fb02 f303 	mul.w	r3, r2, r3
 80015e0:	4a21      	ldr	r2, [pc, #132]	; (8001668 <BMP180_GetPress+0x318>)
 80015e2:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 80015e4:	4b20      	ldr	r3, [pc, #128]	; (8001668 <BMP180_GetPress+0x318>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db41      	blt.n	8001670 <BMP180_GetPress+0x320>
 80015ec:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <BMP180_GetPress+0x318>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	005a      	lsls	r2, r3, #1
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <BMP180_GetPress+0x314>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <BMP180_GetPress+0x31c>)
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e040      	b.n	8001684 <BMP180_GetPress+0x334>
 8001602:	bf00      	nop
 8001604:	200000a8 	.word	0x200000a8
 8001608:	200000a4 	.word	0x200000a4
 800160c:	20000096 	.word	0x20000096
 8001610:	20000094 	.word	0x20000094
 8001614:	40e00000 	.word	0x40e00000
 8001618:	200000ac 	.word	0x200000ac
 800161c:	2000009e 	.word	0x2000009e
 8001620:	40a00000 	.word	0x40a00000
 8001624:	200000a0 	.word	0x200000a0
 8001628:	200000b0 	.word	0x200000b0
 800162c:	200000bc 	.word	0x200000bc
 8001630:	200000c4 	.word	0x200000c4
 8001634:	2000009a 	.word	0x2000009a
 8001638:	40b00000 	.word	0x40b00000
 800163c:	2000008e 	.word	0x2000008e
 8001640:	200000b4 	.word	0x200000b4
 8001644:	2000008c 	.word	0x2000008c
 8001648:	200000b8 	.word	0x200000b8
 800164c:	20000090 	.word	0x20000090
 8001650:	40c00000 	.word	0x40c00000
 8001654:	20000098 	.word	0x20000098
 8001658:	40f00000 	.word	0x40f00000
 800165c:	40100000 	.word	0x40100000
 8001660:	20000092 	.word	0x20000092
 8001664:	200000c0 	.word	0x200000c0
 8001668:	200000c8 	.word	0x200000c8
 800166c:	200000cc 	.word	0x200000cc
	else Press = (B7/B4)*2;
 8001670:	4b46      	ldr	r3, [pc, #280]	; (800178c <BMP180_GetPress+0x43c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b46      	ldr	r3, [pc, #280]	; (8001790 <BMP180_GetPress+0x440>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	fbb2 f3f3 	udiv	r3, r2, r3
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	461a      	mov	r2, r3
 8001680:	4b44      	ldr	r3, [pc, #272]	; (8001794 <BMP180_GetPress+0x444>)
 8001682:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001684:	4b43      	ldr	r3, [pc, #268]	; (8001794 <BMP180_GetPress+0x444>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff53 	bl	8000534 <__aeabi_i2d>
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <BMP180_GetPress+0x448>)
 8001694:	f7ff f8e2 	bl	800085c <__aeabi_ddiv>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4614      	mov	r4, r2
 800169e:	461d      	mov	r5, r3
 80016a0:	4b3c      	ldr	r3, [pc, #240]	; (8001794 <BMP180_GetPress+0x444>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff45 	bl	8000534 <__aeabi_i2d>
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	4b3a      	ldr	r3, [pc, #232]	; (8001798 <BMP180_GetPress+0x448>)
 80016b0:	f7ff f8d4 	bl	800085c <__aeabi_ddiv>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4620      	mov	r0, r4
 80016ba:	4629      	mov	r1, r5
 80016bc:	f7fe ffa4 	bl	8000608 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f7ff fa4e 	bl	8000b68 <__aeabi_d2iz>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4a33      	ldr	r2, [pc, #204]	; (800179c <BMP180_GetPress+0x44c>)
 80016d0:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 80016d2:	4b32      	ldr	r3, [pc, #200]	; (800179c <BMP180_GetPress+0x44c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f640 32de 	movw	r2, #3038	; 0xbde
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff28 	bl	8000534 <__aeabi_i2d>
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <BMP180_GetPress+0x450>)
 80016ea:	f7ff f8b7 	bl	800085c <__aeabi_ddiv>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fa37 	bl	8000b68 <__aeabi_d2iz>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a27      	ldr	r2, [pc, #156]	; (800179c <BMP180_GetPress+0x44c>)
 80016fe:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <BMP180_GetPress+0x444>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a27      	ldr	r2, [pc, #156]	; (80017a4 <BMP180_GetPress+0x454>)
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff12 	bl	8000534 <__aeabi_i2d>
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <BMP180_GetPress+0x450>)
 8001716:	f7ff f8a1 	bl	800085c <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff fa21 	bl	8000b68 <__aeabi_d2iz>
 8001726:	4603      	mov	r3, r0
 8001728:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <BMP180_GetPress+0x458>)
 800172a:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <BMP180_GetPress+0x444>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe feff 	bl	8000534 <__aeabi_i2d>
 8001736:	4604      	mov	r4, r0
 8001738:	460d      	mov	r5, r1
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <BMP180_GetPress+0x44c>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <BMP180_GetPress+0x458>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fef3 	bl	8000534 <__aeabi_i2d>
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <BMP180_GetPress+0x45c>)
 8001754:	f7ff f882 	bl	800085c <__aeabi_ddiv>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe fd9c 	bl	800029c <__adddf3>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f9fc 	bl	8000b68 <__aeabi_d2iz>
 8001770:	4603      	mov	r3, r0
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <BMP180_GetPress+0x444>)
 8001774:	6013      	str	r3, [r2, #0]

	return Press;
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <BMP180_GetPress+0x444>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001782:	eeb0 0a67 	vmov.f32	s0, s15
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bdb0      	pop	{r4, r5, r7, pc}
 800178c:	200000c8 	.word	0x200000c8
 8001790:	200000c0 	.word	0x200000c0
 8001794:	200000cc 	.word	0x200000cc
 8001798:	40700000 	.word	0x40700000
 800179c:	200000ac 	.word	0x200000ac
 80017a0:	40f00000 	.word	0x40f00000
 80017a4:	ffffe343 	.word	0xffffe343
 80017a8:	200000b0 	.word	0x200000b0
 80017ac:	40300000 	.word	0x40300000

080017b0 <BMP180_GetAlt>:



float BMP180_GetAlt (int oss)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fdc9 	bl	8001350 <BMP180_GetPress>
	return 44330*(1-(pow(((float)Press/(float)atmPress), 0.19029495718)));
 80017be:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <BMP180_GetAlt+0x88>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ca:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800183c <BMP180_GetAlt+0x8c>
 80017ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017d2:	ee16 0a90 	vmov	r0, s13
 80017d6:	f7fe febf 	bl	8000558 <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8001828 <BMP180_GetAlt+0x78>
 80017e2:	ec43 2b10 	vmov	d0, r2, r3
 80017e6:	f00a fc1f 	bl	800c028 <pow>
 80017ea:	ec53 2b10 	vmov	r2, r3, d0
 80017ee:	f04f 0000 	mov.w	r0, #0
 80017f2:	4913      	ldr	r1, [pc, #76]	; (8001840 <BMP180_GetAlt+0x90>)
 80017f4:	f7fe fd50 	bl	8000298 <__aeabi_dsub>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	a30b      	add	r3, pc, #44	; (adr r3, 8001830 <BMP180_GetAlt+0x80>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe feff 	bl	8000608 <__aeabi_dmul>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff f9f1 	bl	8000bf8 <__aeabi_d2f>
 8001816:	4603      	mov	r3, r0
 8001818:	ee07 3a90 	vmov	s15, r3
}
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	ccd745e4 	.word	0xccd745e4
 800182c:	3fc85b95 	.word	0x3fc85b95
 8001830:	00000000 	.word	0x00000000
 8001834:	40e5a540 	.word	0x40e5a540
 8001838:	200000cc 	.word	0x200000cc
 800183c:	47c5e680 	.word	0x47c5e680
 8001840:	3ff00000 	.word	0x3ff00000

08001844 <BMP180_Start>:

void BMP180_Start (void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	read_callibration_data();
 8001848:	f7ff fbb6 	bl	8000fb8 <read_callibration_data>
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <LL_AHB2_GRP1_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <LL_AHB2_GRP1_EnableClock+0x34>)
 800185a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800185e:	4909      	ldr	r1, [pc, #36]	; (8001884 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4313      	orrs	r3, r2
 8001864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <LL_AHB2_GRP1_EnableClock+0x34>)
 800186a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4013      	ands	r3, r2
 8001872:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001874:	68fb      	ldr	r3, [r7, #12]
}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	44020c00 	.word	0x44020c00

08001888 <LL_APB1_GRP2_EnableClock>:
  *
  *  (*)  : Not available for all stm32h5xxxx family lines.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1HENR, Periphs);
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <LL_APB1_GRP2_EnableClock+0x34>)
 8001892:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001896:	4909      	ldr	r1, [pc, #36]	; (80018bc <LL_APB1_GRP2_EnableClock+0x34>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4313      	orrs	r3, r2
 800189c:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1HENR, Periphs);
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <LL_APB1_GRP2_EnableClock+0x34>)
 80018a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ac:	68fb      	ldr	r3, [r7, #12]
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	44020c00 	.word	0x44020c00

080018c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c4:	f000 fe9a 	bl	80025fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c8:	f000 f834 	bl	8001934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018cc:	f000 fa3e 	bl	8001d4c <MX_GPIO_Init>
  MX_ADC1_Init();
 80018d0:	f000 f8a0 	bl	8001a14 <MX_ADC1_Init>
  MX_ETH_Init();
 80018d4:	f000 f902 	bl	8001adc <MX_ETH_Init>
  MX_ICACHE_Init();
 80018d8:	f000 f98c 	bl	8001bf4 <MX_ICACHE_Init>
  MX_LPUART1_UART_Init();
 80018dc:	f000 f996 	bl	8001c0c <MX_LPUART1_UART_Init>
  MX_UCPD1_Init();
 80018e0:	f000 f9de 	bl	8001ca0 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80018e4:	f000 fa00 	bl	8001ce8 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 80018e8:	f000 f944 	bl	8001b74 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BMP180_Start();
 80018ec:	f7ff ffaa 	bl	8001844 <BMP180_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Temperature = BMP180_GetTemp();
 80018f0:	f7ff fc32 	bl	8001158 <BMP180_GetTemp>
 80018f4:	eef0 7a40 	vmov.f32	s15, s0
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <main+0x68>)
 80018fa:	edc3 7a00 	vstr	s15, [r3]
	  Pressure = BMP180_GetPress(0);
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff fd26 	bl	8001350 <BMP180_GetPress>
 8001904:	eef0 7a40 	vmov.f32	s15, s0
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <main+0x6c>)
 800190a:	edc3 7a00 	vstr	s15, [r3]
	  Altitude = BMP180_GetAlt(0);
 800190e:	2000      	movs	r0, #0
 8001910:	f7ff ff4e 	bl	80017b0 <BMP180_GetAlt>
 8001914:	eef0 7a40 	vmov.f32	s15, s0
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <main+0x70>)
 800191a:	edc3 7a00 	vstr	s15, [r3]

	  HAL_Delay(2000);
 800191e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001922:	f000 fee7 	bl	80026f4 <HAL_Delay>
	  Temperature = BMP180_GetTemp();
 8001926:	e7e3      	b.n	80018f0 <main+0x30>
 8001928:	200006d4 	.word	0x200006d4
 800192c:	200006d8 	.word	0x200006d8
 8001930:	200006dc 	.word	0x200006dc

08001934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b09c      	sub	sp, #112	; 0x70
 8001938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193a:	f107 0320 	add.w	r3, r7, #32
 800193e:	2250      	movs	r2, #80	; 0x50
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f00a fb3e 	bl	800bfc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001948:	f107 0308 	add.w	r3, r7, #8
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
 8001958:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800195a:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <SystemClock_Config+0xdc>)
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	4a2c      	ldr	r2, [pc, #176]	; (8001a10 <SystemClock_Config+0xdc>)
 8001960:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001964:	6113      	str	r3, [r2, #16]
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <SystemClock_Config+0xdc>)
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001972:	bf00      	nop
 8001974:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <SystemClock_Config+0xdc>)
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b08      	cmp	r3, #8
 800197e:	d1f9      	bne.n	8001974 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001980:	2323      	movs	r3, #35	; 0x23
 8001982:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_DIGITAL;
 8001984:	f44f 13a8 	mov.w	r3, #1376256	; 0x150000
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800198a:	2301      	movs	r3, #1
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001992:	2340      	movs	r3, #64	; 0x40
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800199c:	2302      	movs	r3, #2
 800199e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80019a0:	2303      	movs	r3, #3
 80019a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 16;
 80019a8:	2310      	movs	r3, #16
 80019aa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019ac:	2302      	movs	r3, #2
 80019ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019b0:	2302      	movs	r3, #2
 80019b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80019b8:	230c      	movs	r3, #12
 80019ba:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80019bc:	2300      	movs	r3, #0
 80019be:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c4:	f107 0320 	add.w	r3, r7, #32
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 fbb1 	bl	8005130 <HAL_RCC_OscConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80019d4:	f000 fa36 	bl	8001e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d8:	231f      	movs	r3, #31
 80019da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019dc:	2303      	movs	r3, #3
 80019de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019f0:	f107 0308 	add.w	r3, r7, #8
 80019f4:	2103      	movs	r1, #3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 ffd2 	bl	80059a0 <HAL_RCC_ClockConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001a02:	f000 fa1f 	bl	8001e44 <Error_Handler>
  }
}
 8001a06:	bf00      	nop
 8001a08:	3770      	adds	r7, #112	; 0x70
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	44020800 	.word	0x44020800

08001a14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b088      	sub	sp, #32
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f00a facf 	bl	800bfc4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001a26:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a28:	4a2a      	ldr	r2, [pc, #168]	; (8001ad4 <MX_ADC1_Init+0xc0>)
 8001a2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a2c:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a32:	4b27      	ldr	r3, [pc, #156]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a3e:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a44:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a46:	2204      	movs	r2, #4
 8001a48:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a4a:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a50:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001a56:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a7e:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a8c:	4810      	ldr	r0, [pc, #64]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001a8e:	f001 f867 	bl	8002b60 <HAL_ADC_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001a98:	f000 f9d4 	bl	8001e44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8001a9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <MX_ADC1_Init+0xc4>)
 8001a9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aa0:	2306      	movs	r3, #6
 8001aa2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001aa8:	237f      	movs	r3, #127	; 0x7f
 8001aaa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001aac:	2304      	movs	r3, #4
 8001aae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_ADC1_Init+0xbc>)
 8001aba:	f001 f9a5 	bl	8002e08 <HAL_ADC_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001ac4:	f000 f9be 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200001cc 	.word	0x200001cc
 8001ad4:	42028000 	.word	0x42028000
 8001ad8:	4b840000 	.word	0x4b840000

08001adc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <MX_ETH_Init+0x80>)
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <MX_ETH_Init+0x84>)
 8001ae4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <MX_ETH_Init+0x88>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001aec:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <MX_ETH_Init+0x88>)
 8001aee:	2280      	movs	r2, #128	; 0x80
 8001af0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <MX_ETH_Init+0x88>)
 8001af4:	22e1      	movs	r2, #225	; 0xe1
 8001af6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001af8:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <MX_ETH_Init+0x88>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <MX_ETH_Init+0x88>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <MX_ETH_Init+0x88>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <MX_ETH_Init+0x80>)
 8001b0c:	4a15      	ldr	r2, [pc, #84]	; (8001b64 <MX_ETH_Init+0x88>)
 8001b0e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_ETH_Init+0x80>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_ETH_Init+0x80>)
 8001b18:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <MX_ETH_Init+0x8c>)
 8001b1a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_ETH_Init+0x80>)
 8001b1e:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <MX_ETH_Init+0x90>)
 8001b20:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_ETH_Init+0x80>)
 8001b24:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b28:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001b2a:	480c      	ldr	r0, [pc, #48]	; (8001b5c <MX_ETH_Init+0x80>)
 8001b2c:	f001 fe52 	bl	80037d4 <HAL_ETH_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001b36:	f000 f985 	bl	8001e44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001b3a:	2238      	movs	r2, #56	; 0x38
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	480c      	ldr	r0, [pc, #48]	; (8001b70 <MX_ETH_Init+0x94>)
 8001b40:	f00a fa40 	bl	800bfc4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MX_ETH_Init+0x94>)
 8001b46:	2221      	movs	r2, #33	; 0x21
 8001b48:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_ETH_Init+0x94>)
 8001b4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b50:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <MX_ETH_Init+0x94>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000234 	.word	0x20000234
 8001b60:	40028000 	.word	0x40028000
 8001b64:	200006e0 	.word	0x200006e0
 8001b68:	2000016c 	.word	0x2000016c
 8001b6c:	2000010c 	.word	0x2000010c
 8001b70:	200000d4 	.word	0x200000d4

08001b74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <MX_I2C1_Init+0x74>)
 8001b7a:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <MX_I2C1_Init+0x78>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <MX_I2C1_Init+0x74>)
 8001b80:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <MX_I2C1_Init+0x7c>)
 8001b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <MX_I2C1_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <MX_I2C1_Init+0x74>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <MX_I2C1_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <MX_I2C1_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <MX_I2C1_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_I2C1_Init+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <MX_I2C1_Init+0x74>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bae:	480e      	ldr	r0, [pc, #56]	; (8001be8 <MX_I2C1_Init+0x74>)
 8001bb0:	f002 fb96 	bl	80042e0 <HAL_I2C_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bba:	f000 f943 	bl	8001e44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <MX_I2C1_Init+0x74>)
 8001bc2:	f003 f90f 	bl	8004de4 <HAL_I2CEx_ConfigAnalogFilter>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001bcc:	f000 f93a 	bl	8001e44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_I2C1_Init+0x74>)
 8001bd4:	f003 f951 	bl	8004e7a <HAL_I2CEx_ConfigDigitalFilter>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bde:	f000 f931 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200002e4 	.word	0x200002e4
 8001bec:	40005400 	.word	0x40005400
 8001bf0:	00602173 	.word	0x00602173

08001bf4 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001bf8:	f003 f98c 	bl	8004f14 <HAL_ICACHE_Enable>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8001c02:	f000 f91f 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001c10:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <MX_LPUART1_UART_Init+0x88>)
 8001c12:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <MX_LPUART1_UART_Init+0x8c>)
 8001c14:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <MX_LPUART1_UART_Init+0x88>)
 8001c18:	4a20      	ldr	r2, [pc, #128]	; (8001c9c <MX_LPUART1_UART_Init+0x90>)
 8001c1a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1c:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <MX_LPUART1_UART_Init+0x88>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <MX_LPUART1_UART_Init+0x88>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_LPUART1_UART_Init+0x88>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <MX_LPUART1_UART_Init+0x88>)
 8001c30:	220c      	movs	r2, #12
 8001c32:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <MX_LPUART1_UART_Init+0x88>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <MX_LPUART1_UART_Init+0x88>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_LPUART1_UART_Init+0x88>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <MX_LPUART1_UART_Init+0x88>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001c4c:	4811      	ldr	r0, [pc, #68]	; (8001c94 <MX_LPUART1_UART_Init+0x88>)
 8001c4e:	f009 fa3b 	bl	800b0c8 <HAL_UART_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001c58:	f000 f8f4 	bl	8001e44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	480d      	ldr	r0, [pc, #52]	; (8001c94 <MX_LPUART1_UART_Init+0x88>)
 8001c60:	f009 fec2 	bl	800b9e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8001c6a:	f000 f8eb 	bl	8001e44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4808      	ldr	r0, [pc, #32]	; (8001c94 <MX_LPUART1_UART_Init+0x88>)
 8001c72:	f009 fef7 	bl	800ba64 <HAL_UARTEx_SetRxFifoThreshold>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001c7c:	f000 f8e2 	bl	8001e44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001c80:	4804      	ldr	r0, [pc, #16]	; (8001c94 <MX_LPUART1_UART_Init+0x88>)
 8001c82:	f009 fe78 	bl	800b976 <HAL_UARTEx_DisableFifoMode>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001c8c:	f000 f8da 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000338 	.word	0x20000338
 8001c98:	44002400 	.word	0x44002400
 8001c9c:	00033324 	.word	0x00033324

08001ca0 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
 8001cb4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001cb6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001cba:	f7ff fde5 	bl	8001888 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001cbe:	2002      	movs	r0, #2
 8001cc0:	f7ff fdc6 	bl	8001850 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB13   ------> UCPD1_CC1
  PB14   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14;
 8001cc4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001cc8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <MX_UCPD1_Init+0x44>)
 8001cd8:	f00a f89b 	bl	800be12 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	42020400 	.word	0x42020400

08001ce8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001cec:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <MX_USB_PCD_Init+0x5c>)
 8001cee:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <MX_USB_PCD_Init+0x60>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8001cf2:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <MX_USB_PCD_Init+0x5c>)
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	605a      	str	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8001cf8:	4b12      	ldr	r3, [pc, #72]	; (8001d44 <MX_USB_PCD_Init+0x5c>)
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	611a      	str	r2, [r3, #16]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_USB_PCD_Init+0x5c>)
 8001d00:	2202      	movs	r2, #2
 8001d02:	619a      	str	r2, [r3, #24]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <MX_USB_PCD_Init+0x5c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_USB_PCD_Init+0x5c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_USB_PCD_Init+0x5c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <MX_USB_PCD_Init+0x5c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_USB_PCD_Init+0x5c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <MX_USB_PCD_Init+0x5c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_USB_PCD_Init+0x5c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_USB_PCD_Init+0x5c>)
 8001d30:	f003 f900 	bl	8004f34 <HAL_PCD_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8001d3a:	f000 f883 	bl	8001e44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200003cc 	.word	0x200003cc
 8001d48:	40016000 	.word	0x40016000

08001d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	; 0x30
 8001d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d62:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d68:	4a33      	ldr	r2, [pc, #204]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001d6a:	f043 0310 	orr.w	r3, r3, #16
 8001d6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d72:	4b31      	ldr	r3, [pc, #196]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d80:	4b2d      	ldr	r3, [pc, #180]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001d82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d86:	4a2c      	ldr	r2, [pc, #176]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d90:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da4:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001daa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dae:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbc:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dc2:	4a1d      	ldr	r2, [pc, #116]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de0:	4a15      	ldr	r2, [pc, #84]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dea:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dfe:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e04:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <MX_GPIO_Init+0xec>)
 8001e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <MX_GPIO_Init+0xf0>)
 8001e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f107 031c 	add.w	r3, r7, #28
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_GPIO_Init+0xf4>)
 8001e2a:	f002 f907 	bl	800403c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e2e:	bf00      	nop
 8001e30:	3730      	adds	r7, #48	; 0x30
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	44020c00 	.word	0x44020c00
 8001e3c:	10110000 	.word	0x10110000
 8001e40:	42021800 	.word	0x42021800

08001e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e48:	b672      	cpsid	i
}
 8001e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <Error_Handler+0x8>

08001e4e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b0cc      	sub	sp, #304	; 0x130
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e6a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e84:	4618      	mov	r0, r3
 8001e86:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	f00a f899 	bl	800bfc4 <memset>
  if(hadc->Instance==ADC1)
 8001e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a30      	ldr	r2, [pc, #192]	; (8001f60 <HAL_ADC_MspInit+0x104>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d157      	bne.n	8001f54 <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8001ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ea8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001eac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8001eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ebc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ec6:	f107 0310 	add.w	r3, r7, #16
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f004 f8aa 	bl	8006024 <HAL_RCCEx_PeriphCLKConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 8001ed6:	f7ff ffb5 	bl	8001e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001eda:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <HAL_ADC_MspInit+0x108>)
 8001edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ee0:	4a20      	ldr	r2, [pc, #128]	; (8001f64 <HAL_ADC_MspInit+0x108>)
 8001ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ee6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <HAL_ADC_MspInit+0x108>)
 8001eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ef0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ef8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f02:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f06:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_ADC_MspInit+0x108>)
 8001f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_ADC_MspInit+0x108>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_ADC_MspInit+0x108>)
 8001f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f1e:	f003 0201 	and.w	r2, r3, #1
 8001f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f30:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f34:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001f36:	2310      	movs	r3, #16
 8001f38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001f48:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4806      	ldr	r0, [pc, #24]	; (8001f68 <HAL_ADC_MspInit+0x10c>)
 8001f50:	f002 f874 	bl	800403c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f54:	bf00      	nop
 8001f56:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	42028000 	.word	0x42028000
 8001f64:	44020c00 	.word	0x44020c00
 8001f68:	42020000 	.word	0x42020000

08001f6c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	; 0x38
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a59      	ldr	r2, [pc, #356]	; (80020f0 <HAL_ETH_MspInit+0x184>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	f040 80ab 	bne.w	80020e6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001f90:	4b58      	ldr	r3, [pc, #352]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	4a57      	ldr	r2, [pc, #348]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8001f98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001fa0:	4b54      	ldr	r3, [pc, #336]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETHTX_CLK_ENABLE();
 8001fae:	4b51      	ldr	r3, [pc, #324]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8001fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb4:	4a4f      	ldr	r2, [pc, #316]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8001fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001fbe:	4b4d      	ldr	r3, [pc, #308]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETHRX_CLK_ENABLE();
 8001fcc:	4b49      	ldr	r3, [pc, #292]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd2:	4a48      	ldr	r2, [pc, #288]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8001fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001fdc:	4b45      	ldr	r3, [pc, #276]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8001fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fea:	4b42      	ldr	r3, [pc, #264]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8001fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ff0:	4a40      	ldr	r2, [pc, #256]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8001ffc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002008:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 800200a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800200e:	4a39      	ldr	r2, [pc, #228]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 800201a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8002028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800202c:	4a31      	ldr	r2, [pc, #196]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002036:	4b2f      	ldr	r3, [pc, #188]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8002038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002044:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8002046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800204a:	4a2a      	ldr	r2, [pc, #168]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 800204c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002050:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <HAL_ETH_MspInit+0x188>)
 8002056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB15     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002062:	2332      	movs	r3, #50	; 0x32
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800206e:	2302      	movs	r3, #2
 8002070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002072:	230b      	movs	r3, #11
 8002074:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207a:	4619      	mov	r1, r3
 800207c:	481e      	ldr	r0, [pc, #120]	; (80020f8 <HAL_ETH_MspInit+0x18c>)
 800207e:	f001 ffdd 	bl	800403c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002082:	2386      	movs	r3, #134	; 0x86
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800208e:	2302      	movs	r3, #2
 8002090:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002092:	230b      	movs	r3, #11
 8002094:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209a:	4619      	mov	r1, r3
 800209c:	4817      	ldr	r0, [pc, #92]	; (80020fc <HAL_ETH_MspInit+0x190>)
 800209e:	f001 ffcd 	bl	800403c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80020a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b0:	2302      	movs	r3, #2
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020b4:	230b      	movs	r3, #11
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020bc:	4619      	mov	r1, r3
 80020be:	4810      	ldr	r0, [pc, #64]	; (8002100 <HAL_ETH_MspInit+0x194>)
 80020c0:	f001 ffbc 	bl	800403c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 80020c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020d2:	2302      	movs	r3, #2
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020d6:	230b      	movs	r3, #11
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020de:	4619      	mov	r1, r3
 80020e0:	4808      	ldr	r0, [pc, #32]	; (8002104 <HAL_ETH_MspInit+0x198>)
 80020e2:	f001 ffab 	bl	800403c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80020e6:	bf00      	nop
 80020e8:	3738      	adds	r7, #56	; 0x38
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40028000 	.word	0x40028000
 80020f4:	44020c00 	.word	0x44020c00
 80020f8:	42020800 	.word	0x42020800
 80020fc:	42020000 	.word	0x42020000
 8002100:	42020400 	.word	0x42020400
 8002104:	42021800 	.word	0x42021800

08002108 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b0cc      	sub	sp, #304	; 0x130
 800210c:	af00      	add	r7, sp, #0
 800210e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002116:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800212c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002130:	4618      	mov	r0, r3
 8002132:	f44f 7384 	mov.w	r3, #264	; 0x108
 8002136:	461a      	mov	r2, r3
 8002138:	2100      	movs	r1, #0
 800213a:	f009 ff43 	bl	800bfc4 <memset>
  if(hi2c->Instance==I2C1)
 800213e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002142:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a33      	ldr	r2, [pc, #204]	; (8002218 <HAL_I2C_MspInit+0x110>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d15e      	bne.n	800220e <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002154:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8002158:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002168:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800216c:	2200      	movs	r2, #0
 800216e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	4618      	mov	r0, r3
 8002178:	f003 ff54 	bl	8006024 <HAL_RCCEx_PeriphCLKConfig>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8002182:	f7ff fe5f 	bl	8001e44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	4b25      	ldr	r3, [pc, #148]	; (800221c <HAL_I2C_MspInit+0x114>)
 8002188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800218c:	4a23      	ldr	r2, [pc, #140]	; (800221c <HAL_I2C_MspInit+0x114>)
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002196:	4b21      	ldr	r3, [pc, #132]	; (800221c <HAL_I2C_MspInit+0x114>)
 8002198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800219c:	f003 0202 	and.w	r2, r3, #2
 80021a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021ae:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80021b2:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021bc:	2312      	movs	r3, #18
 80021be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021ce:	2304      	movs	r3, #4
 80021d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80021d8:	4619      	mov	r1, r3
 80021da:	4811      	ldr	r0, [pc, #68]	; (8002220 <HAL_I2C_MspInit+0x118>)
 80021dc:	f001 ff2e 	bl	800403c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021e0:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_I2C_MspInit+0x114>)
 80021e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021e6:	4a0d      	ldr	r2, [pc, #52]	; (800221c <HAL_I2C_MspInit+0x114>)
 80021e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <HAL_I2C_MspInit+0x114>)
 80021f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021f6:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80021fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80021fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002208:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800220c:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40005400 	.word	0x40005400
 800221c:	44020c00 	.word	0x44020c00
 8002220:	42020400 	.word	0x42020400

08002224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0cc      	sub	sp, #304	; 0x130
 8002228:	af00      	add	r7, sp, #0
 800222a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800222e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002232:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002248:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800224c:	4618      	mov	r0, r3
 800224e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8002252:	461a      	mov	r2, r3
 8002254:	2100      	movs	r1, #0
 8002256:	f009 feb5 	bl	800bfc4 <memset>
  if(huart->Instance==LPUART1)
 800225a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800225e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a33      	ldr	r2, [pc, #204]	; (8002334 <HAL_UART_MspInit+0x110>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d15d      	bne.n	8002328 <HAL_UART_MspInit+0x104>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800226c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002270:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8002274:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8002280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002284:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002288:	2200      	movs	r2, #0
 800228a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228e:	f107 0310 	add.w	r3, r7, #16
 8002292:	4618      	mov	r0, r3
 8002294:	f003 fec6 	bl	8006024 <HAL_RCCEx_PeriphCLKConfig>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 800229e:	f7ff fdd1 	bl	8001e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80022a2:	4b25      	ldr	r3, [pc, #148]	; (8002338 <HAL_UART_MspInit+0x114>)
 80022a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80022a8:	4a23      	ldr	r2, [pc, #140]	; (8002338 <HAL_UART_MspInit+0x114>)
 80022aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ae:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80022b2:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_UART_MspInit+0x114>)
 80022b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80022b8:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80022bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022ca:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80022ce:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_UART_MspInit+0x114>)
 80022d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022d6:	4a18      	ldr	r2, [pc, #96]	; (8002338 <HAL_UART_MspInit+0x114>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022e0:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_UART_MspInit+0x114>)
 80022e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e6:	f003 0202 	and.w	r2, r3, #2
 80022ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80022f8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80022fc:	681b      	ldr	r3, [r3, #0]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 80022fe:	23c0      	movs	r3, #192	; 0xc0
 8002300:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002304:	2302      	movs	r3, #2
 8002306:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002316:	2308      	movs	r3, #8
 8002318:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002320:	4619      	mov	r1, r3
 8002322:	4806      	ldr	r0, [pc, #24]	; (800233c <HAL_UART_MspInit+0x118>)
 8002324:	f001 fe8a 	bl	800403c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002328:	bf00      	nop
 800232a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	44002400 	.word	0x44002400
 8002338:	44020c00 	.word	0x44020c00
 800233c:	42020400 	.word	0x42020400

08002340 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0cc      	sub	sp, #304	; 0x130
 8002344:	af00      	add	r7, sp, #0
 8002346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800234a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800234e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002364:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002368:	4618      	mov	r0, r3
 800236a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800236e:	461a      	mov	r2, r3
 8002370:	2100      	movs	r1, #0
 8002372:	f009 fe27 	bl	800bfc4 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8002376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800237a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a33      	ldr	r2, [pc, #204]	; (8002450 <HAL_PCD_MspInit+0x110>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d15e      	bne.n	8002446 <HAL_PCD_MspInit+0x106>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800238c:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0310 	mov.w	r3, #16
 8002398:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800239c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80023a4:	2230      	movs	r2, #48	; 0x30
 80023a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023aa:	f107 0310 	add.w	r3, r7, #16
 80023ae:	4618      	mov	r0, r3
 80023b0:	f003 fe38 	bl	8006024 <HAL_RCCEx_PeriphCLKConfig>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_PCD_MspInit+0x7e>
    {
      Error_Handler();
 80023ba:	f7ff fd43 	bl	8001e44 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023be:	4b25      	ldr	r3, [pc, #148]	; (8002454 <HAL_PCD_MspInit+0x114>)
 80023c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023c4:	4a23      	ldr	r2, [pc, #140]	; (8002454 <HAL_PCD_MspInit+0x114>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023ce:	4b21      	ldr	r3, [pc, #132]	; (8002454 <HAL_PCD_MspInit+0x114>)
 80023d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d4:	f003 0201 	and.w	r2, r3, #1
 80023d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023e6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80023ea:	681b      	ldr	r3, [r3, #0]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80023ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80023f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002406:	230a      	movs	r3, #10
 8002408:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002410:	4619      	mov	r1, r3
 8002412:	4811      	ldr	r0, [pc, #68]	; (8002458 <HAL_PCD_MspInit+0x118>)
 8002414:	f001 fe12 	bl	800403c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_PCD_MspInit+0x114>)
 800241a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800241e:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <HAL_PCD_MspInit+0x114>)
 8002420:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002424:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002428:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_PCD_MspInit+0x114>)
 800242a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800242e:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
 8002432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002436:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002440:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002444:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8002446:	bf00      	nop
 8002448:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40016000 	.word	0x40016000
 8002454:	44020c00 	.word	0x44020c00
 8002458:	42020000 	.word	0x42020000

0800245c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002460:	e7fe      	b.n	8002460 <NMI_Handler+0x4>

08002462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <HardFault_Handler+0x4>

08002468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <MemManage_Handler+0x4>

0800246e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <BusFault_Handler+0x4>

08002474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <UsageFault_Handler+0x4>

0800247a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a8:	f000 f904 	bl	80026b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024b6:	4b35      	ldr	r3, [pc, #212]	; (800258c <SystemInit+0xdc>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024bc:	4a33      	ldr	r2, [pc, #204]	; (800258c <SystemInit+0xdc>)
 80024be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80024c6:	4b32      	ldr	r3, [pc, #200]	; (8002590 <SystemInit+0xe0>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80024cc:	4b30      	ldr	r3, [pc, #192]	; (8002590 <SystemInit+0xe0>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80024d2:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <SystemInit+0xe0>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80024d8:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <SystemInit+0xe0>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	492c      	ldr	r1, [pc, #176]	; (8002590 <SystemInit+0xe0>)
 80024de:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <SystemInit+0xe4>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80024e4:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <SystemInit+0xe0>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 80024ea:	4b29      	ldr	r3, [pc, #164]	; (8002590 <SystemInit+0xe0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80024f0:	4b27      	ldr	r3, [pc, #156]	; (8002590 <SystemInit+0xe0>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <SystemInit+0xe0>)
 80024f8:	4a27      	ldr	r2, [pc, #156]	; (8002598 <SystemInit+0xe8>)
 80024fa:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80024fc:	4b24      	ldr	r3, [pc, #144]	; (8002590 <SystemInit+0xe0>)
 80024fe:	2200      	movs	r2, #0
 8002500:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8002502:	4b23      	ldr	r3, [pc, #140]	; (8002590 <SystemInit+0xe0>)
 8002504:	4a24      	ldr	r2, [pc, #144]	; (8002598 <SystemInit+0xe8>)
 8002506:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002508:	4b21      	ldr	r3, [pc, #132]	; (8002590 <SystemInit+0xe0>)
 800250a:	2200      	movs	r2, #0
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800250e:	4b20      	ldr	r3, [pc, #128]	; (8002590 <SystemInit+0xe0>)
 8002510:	4a21      	ldr	r2, [pc, #132]	; (8002598 <SystemInit+0xe8>)
 8002512:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8002514:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <SystemInit+0xe0>)
 8002516:	2200      	movs	r2, #0
 8002518:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <SystemInit+0xe0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <SystemInit+0xe0>)
 8002520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002526:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <SystemInit+0xe0>)
 8002528:	2200      	movs	r2, #0
 800252a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800252c:	4b17      	ldr	r3, [pc, #92]	; (800258c <SystemInit+0xdc>)
 800252e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002532:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <SystemInit+0xec>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800253c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8002544:	d003      	beq.n	800254e <SystemInit+0x9e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800254c:	d117      	bne.n	800257e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800254e:	4b13      	ldr	r3, [pc, #76]	; (800259c <SystemInit+0xec>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800255a:	4b10      	ldr	r3, [pc, #64]	; (800259c <SystemInit+0xec>)
 800255c:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <SystemInit+0xf0>)
 800255e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002560:	4b0e      	ldr	r3, [pc, #56]	; (800259c <SystemInit+0xec>)
 8002562:	4a10      	ldr	r2, [pc, #64]	; (80025a4 <SystemInit+0xf4>)
 8002564:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002566:	4b0d      	ldr	r3, [pc, #52]	; (800259c <SystemInit+0xec>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4a0c      	ldr	r2, [pc, #48]	; (800259c <SystemInit+0xec>)
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002572:	4b0a      	ldr	r3, [pc, #40]	; (800259c <SystemInit+0xec>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4a09      	ldr	r2, [pc, #36]	; (800259c <SystemInit+0xec>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	61d3      	str	r3, [r2, #28]
  }
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00
 8002590:	44020c00 	.word	0x44020c00
 8002594:	eae2eae3 	.word	0xeae2eae3
 8002598:	01010280 	.word	0x01010280
 800259c:	40022000 	.word	0x40022000
 80025a0:	08192a3b 	.word	0x08192a3b
 80025a4:	4c5d6e7f 	.word	0x4c5d6e7f

080025a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025a8:	480d      	ldr	r0, [pc, #52]	; (80025e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025ac:	f7ff ff80 	bl	80024b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025b0:	480c      	ldr	r0, [pc, #48]	; (80025e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80025b2:	490d      	ldr	r1, [pc, #52]	; (80025e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025b4:	4a0d      	ldr	r2, [pc, #52]	; (80025ec <LoopForever+0xe>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b8:	e002      	b.n	80025c0 <LoopCopyDataInit>

080025ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025be:	3304      	adds	r3, #4

080025c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c4:	d3f9      	bcc.n	80025ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c6:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025c8:	4c0a      	ldr	r4, [pc, #40]	; (80025f4 <LoopForever+0x16>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025cc:	e001      	b.n	80025d2 <LoopFillZerobss>

080025ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d0:	3204      	adds	r2, #4

080025d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d4:	d3fb      	bcc.n	80025ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025d6:	f009 fd03 	bl	800bfe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025da:	f7ff f971 	bl	80018c0 <main>

080025de <LoopForever>:

LoopForever:
    b LoopForever
 80025de:	e7fe      	b.n	80025de <LoopForever>
  ldr   r0, =_estack
 80025e0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80025e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80025ec:	0800cf50 	.word	0x0800cf50
  ldr r2, =_sbss
 80025f0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80025f4:	20000824 	.word	0x20000824

080025f8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025f8:	e7fe      	b.n	80025f8 <ADC1_IRQHandler>
	...

080025fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002600:	2003      	movs	r0, #3
 8002602:	f001 f8b5 	bl	8003770 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002606:	f003 fb83 	bl	8005d10 <HAL_RCC_GetSysClockFreq>
 800260a:	4602      	mov	r2, r0
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_Init+0x40>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	490a      	ldr	r1, [pc, #40]	; (8002640 <HAL_Init+0x44>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
 800261c:	4a09      	ldr	r2, [pc, #36]	; (8002644 <HAL_Init+0x48>)
 800261e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002620:	200f      	movs	r0, #15
 8002622:	f000 f811 	bl	8002648 <HAL_InitTick>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e002      	b.n	8002636 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002630:	f7ff fc0d 	bl	8001e4e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	44020c00 	.word	0x44020c00
 8002640:	0800cecc 	.word	0x0800cecc
 8002644:	20000000 	.word	0x20000000

08002648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_InitTick+0x60>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e021      	b.n	80026a0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <HAL_InitTick+0x64>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_InitTick+0x60>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266a:	fbb3 f3f1 	udiv	r3, r3, r1
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f001 f8a1 	bl	80037ba <HAL_SYSTICK_Config>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00e      	b.n	80026a0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b0f      	cmp	r3, #15
 8002686:	d80a      	bhi.n	800269e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002688:	2200      	movs	r2, #0
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	f04f 30ff 	mov.w	r0, #4294967295
 8002690:	f001 f879 	bl	8003786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <HAL_InitTick+0x68>)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	e000      	b.n	80026a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20000008 	.word	0x20000008
 80026ac:	20000000 	.word	0x20000000
 80026b0:	20000004 	.word	0x20000004

080026b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_IncTick+0x20>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	461a      	mov	r2, r3
 80026be:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_IncTick+0x24>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_IncTick+0x24>)
 80026c6:	6013      	str	r3, [r2, #0]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000008 	.word	0x20000008
 80026d8:	200006e8 	.word	0x200006e8

080026dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return uwTick;
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_GetTick+0x14>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	200006e8 	.word	0x200006e8

080026f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff ffee 	bl	80026dc <HAL_GetTick>
 8002700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d005      	beq.n	800271a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_Delay+0x44>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800271a:	bf00      	nop
 800271c:	f7ff ffde 	bl	80026dc <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	429a      	cmp	r2, r3
 800272a:	d8f7      	bhi.n	800271c <HAL_Delay+0x28>
  {
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000008 	.word	0x20000008

0800273c <HAL_SBS_ETHInterfaceSelect>:
  *   @arg SBS_ETH_MII : Select the Media Independent Interface
  *   @arg SBS_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SBS_ETHInterfaceSelect(uint32_t SBS_ETHInterface)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SBS_ETHERNET_CONFIG(SBS_ETHInterface));

  MODIFY_REG(SBS->PMCR, SBS_PMCR_ETH_SEL_PHY, (uint32_t)(SBS_ETHInterface));
 8002744:	4b07      	ldr	r3, [pc, #28]	; (8002764 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8002746:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800274a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800274e:	4905      	ldr	r1, [pc, #20]	; (8002764 <HAL_SBS_ETHInterfaceSelect+0x28>)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	44000400 	.word	0x44000400

08002768 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	609a      	str	r2, [r3, #8]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	609a      	str	r2, [r3, #8]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80027de:	f043 0201 	orr.w	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80027fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	42028000 	.word	0x42028000

0800281c <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800281c:	b480      	push	{r7}
 800281e:	b087      	sub	sp, #28
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
 8002828:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3360      	adds	r3, #96	; 0x60
 800282e:	461a      	mov	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <LL_ADC_SetOffset+0x44>)
 800283e:	4013      	ands	r3, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	4313      	orrs	r3, r2
 800284c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002854:	bf00      	nop
 8002856:	371c      	adds	r7, #28
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	03fff000 	.word	0x03fff000

08002864 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3360      	adds	r3, #96	; 0x60
 8002872:	461a      	mov	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002884:	4618      	mov	r0, r3
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3360      	adds	r3, #96	; 0x60
 80028a0:	461a      	mov	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b087      	sub	sp, #28
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	3360      	adds	r3, #96	; 0x60
 80028d6:	461a      	mov	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80028f0:	bf00      	nop
 80028f2:	371c      	adds	r7, #28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3360      	adds	r3, #96	; 0x60
 800290c:	461a      	mov	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	431a      	orrs	r2, r3
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	615a      	str	r2, [r3, #20]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3330      	adds	r3, #48	; 0x30
 8002968:	461a      	mov	r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	4413      	add	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f003 031f 	and.w	r3, r3, #31
 8002982:	211f      	movs	r1, #31
 8002984:	fa01 f303 	lsl.w	r3, r1, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	401a      	ands	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	0e9b      	lsrs	r3, r3, #26
 8002990:	f003 011f 	and.w	r1, r3, #31
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	431a      	orrs	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3314      	adds	r3, #20
 80029c0:	461a      	mov	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	0e5b      	lsrs	r3, r3, #25
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	4413      	add	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	0d1b      	lsrs	r3, r3, #20
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	2107      	movs	r1, #7
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	401a      	ands	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	0d1b      	lsrs	r3, r3, #20
 80029ea:	f003 031f 	and.w	r3, r3, #31
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	431a      	orrs	r2, r3
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a20:	43db      	mvns	r3, r3
 8002a22:	401a      	ands	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f003 0318 	and.w	r3, r3, #24
 8002a2a:	4908      	ldr	r1, [pc, #32]	; (8002a4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a2c:	40d9      	lsrs	r1, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	400b      	ands	r3, r1
 8002a32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a36:	431a      	orrs	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	000fffff 	.word	0x000fffff

08002a50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6093      	str	r3, [r2, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a88:	d101      	bne.n	8002a8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002aac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ab0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad8:	d101      	bne.n	8002ade <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <LL_ADC_IsEnabled+0x18>
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <LL_ADC_IsEnabled+0x1a>
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d101      	bne.n	8002b2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d101      	bne.n	8002b50 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b089      	sub	sp, #36	; 0x24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e136      	b.n	8002de8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff f967 	bl	8001e5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff67 	bl	8002a74 <LL_ADC_IsDeepPowerDownEnabled>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d004      	beq.n	8002bb6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff4d 	bl	8002a50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff ff82 	bl	8002ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d115      	bne.n	8002bf2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff ff66 	bl	8002a9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bd0:	4b87      	ldr	r3, [pc, #540]	; (8002df0 <HAL_ADC_Init+0x290>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	4a87      	ldr	r2, [pc, #540]	; (8002df4 <HAL_ADC_Init+0x294>)
 8002bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	3301      	adds	r3, #1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002be4:	e002      	b.n	8002bec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f9      	bne.n	8002be6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff ff64 	bl	8002ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10d      	bne.n	8002c1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c06:	f043 0210 	orr.w	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff75 	bl	8002b12 <LL_ADC_REG_IsConversionOngoing>
 8002c28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 80cf 	bne.w	8002dd6 <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 80cb 	bne.w	8002dd6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c48:	f043 0202 	orr.w	r2, r3, #2
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff49 	bl	8002aec <LL_ADC_IsEnabled>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d110      	bne.n	8002c82 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c60:	4865      	ldr	r0, [pc, #404]	; (8002df8 <HAL_ADC_Init+0x298>)
 8002c62:	f7ff ff43 	bl	8002aec <LL_ADC_IsEnabled>
 8002c66:	4604      	mov	r4, r0
 8002c68:	4864      	ldr	r0, [pc, #400]	; (8002dfc <HAL_ADC_Init+0x29c>)
 8002c6a:	f7ff ff3f 	bl	8002aec <LL_ADC_IsEnabled>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4323      	orrs	r3, r4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d105      	bne.n	8002c82 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4860      	ldr	r0, [pc, #384]	; (8002e00 <HAL_ADC_Init+0x2a0>)
 8002c7e:	f7ff fd73 	bl	8002768 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7e5b      	ldrb	r3, [r3, #25]
 8002c86:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c8c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002c92:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002c98:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ca0:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d106      	bne.n	8002cbe <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	045b      	lsls	r3, r3, #17
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	4b48      	ldr	r3, [pc, #288]	; (8002e04 <HAL_ADC_Init+0x2a4>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	69b9      	ldr	r1, [r7, #24]
 8002cea:	430b      	orrs	r3, r1
 8002cec:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff15 	bl	8002b38 <LL_ADC_INJ_IsConversionOngoing>
 8002d0e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d13d      	bne.n	8002d92 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d13a      	bne.n	8002d92 <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7e1b      	ldrb	r3, [r3, #24]
 8002d20:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d28:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d38:	f023 0302 	bic.w	r3, r3, #2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	69b9      	ldr	r1, [r7, #24]
 8002d42:	430b      	orrs	r3, r1
 8002d44:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d118      	bne.n	8002d82 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d5a:	f023 0304 	bic.w	r3, r3, #4
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d66:	4311      	orrs	r1, r2
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d6c:	4311      	orrs	r1, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d72:	430a      	orrs	r2, r1
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	611a      	str	r2, [r3, #16]
 8002d80:	e007      	b.n	8002d92 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0201 	bic.w	r2, r2, #1
 8002d90:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d10c      	bne.n	8002db4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f023 010f 	bic.w	r1, r3, #15
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	1e5a      	subs	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
 8002db2:	e007      	b.n	8002dc4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 020f 	bic.w	r2, r2, #15
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc8:	f023 0303 	bic.w	r3, r3, #3
 8002dcc:	f043 0201 	orr.w	r2, r3, #1
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	659a      	str	r2, [r3, #88]	; 0x58
 8002dd4:	e007      	b.n	8002de6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dda:	f043 0210 	orr.w	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002de6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3724      	adds	r7, #36	; 0x24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd90      	pop	{r4, r7, pc}
 8002df0:	20000000 	.word	0x20000000
 8002df4:	053e2d63 	.word	0x053e2d63
 8002df8:	42028000 	.word	0x42028000
 8002dfc:	42028100 	.word	0x42028100
 8002e00:	42028300 	.word	0x42028300
 8002e04:	fff04007 	.word	0xfff04007

08002e08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b0b6      	sub	sp, #216	; 0xd8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x22>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e3d8      	b.n	80035dc <HAL_ADC_ConfigChannel+0x7d4>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fe6b 	bl	8002b12 <LL_ADC_REG_IsConversionOngoing>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f040 83bd 	bne.w	80035be <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d104      	bne.n	8002e56 <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fccf 	bl	80027f4 <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6859      	ldr	r1, [r3, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	f7ff fd78 	bl	8002958 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fe50 	bl	8002b12 <LL_ADC_REG_IsConversionOngoing>
 8002e72:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff fe5c 	bl	8002b38 <LL_ADC_INJ_IsConversionOngoing>
 8002e80:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f040 81d9 	bne.w	8003240 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 81d4 	bne.w	8003240 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ea0:	d10f      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	4619      	mov	r1, r3
 8002eae:	f7ff fd7f 	bl	80029b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fd39 	bl	8002932 <LL_ADC_SetSamplingTimeCommonConfig>
 8002ec0:	e00e      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6819      	ldr	r1, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f7ff fd6e 	bl	80029b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fd29 	bl	8002932 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	08db      	lsrs	r3, r3, #3
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d022      	beq.n	8002f48 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6919      	ldr	r1, [r3, #16]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f12:	f7ff fc83 	bl	800281c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6919      	ldr	r1, [r3, #16]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	461a      	mov	r2, r3
 8002f24:	f7ff fccf 	bl	80028c6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d102      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x136>
 8002f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3c:	e000      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x138>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	461a      	mov	r2, r3
 8002f42:	f7ff fcdb 	bl	80028fc <LL_ADC_SetOffsetSaturation>
 8002f46:	e17b      	b.n	8003240 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fc88 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x16c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff fc7d 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	0e9b      	lsrs	r3, r3, #26
 8002f6e:	f003 021f 	and.w	r2, r3, #31
 8002f72:	e01e      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x1aa>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fc72 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8002f80:	4603      	mov	r3, r0
 8002f82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8002f92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8002f9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 8002fa2:	2320      	movs	r3, #32
 8002fa4:	e004      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 8002fa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d105      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x1c2>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	0e9b      	lsrs	r3, r3, #26
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	e018      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x1f4>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002fe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 8002fee:	2320      	movs	r3, #32
 8002ff0:	e004      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 8002ff2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d106      	bne.n	800300e <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	2100      	movs	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fc41 	bl	8002890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2101      	movs	r1, #1
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fc25 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10a      	bne.n	800303a <HAL_ADC_ConfigChannel+0x232>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2101      	movs	r1, #1
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fc1a 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003030:	4603      	mov	r3, r0
 8003032:	0e9b      	lsrs	r3, r3, #26
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	e01e      	b.n	8003078 <HAL_ADC_ConfigChannel+0x270>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2101      	movs	r1, #1
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fc0f 	bl	8002864 <LL_ADC_GetOffsetChannel>
 8003046:	4603      	mov	r3, r0
 8003048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003058:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800305c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003060:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8003068:	2320      	movs	r3, #32
 800306a:	e004      	b.n	8003076 <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 800306c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003080:	2b00      	cmp	r3, #0
 8003082:	d105      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x288>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0e9b      	lsrs	r3, r3, #26
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	e018      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x2ba>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80030a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80030ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 80030b4:	2320      	movs	r3, #32
 80030b6:	e004      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 80030b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030bc:	fab3 f383 	clz	r3, r3
 80030c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d106      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	2101      	movs	r1, #1
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fbde 	bl	8002890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2102      	movs	r1, #2
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fbc2 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80030e0:	4603      	mov	r3, r0
 80030e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x2f8>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fbb7 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80030f6:	4603      	mov	r3, r0
 80030f8:	0e9b      	lsrs	r3, r3, #26
 80030fa:	f003 021f 	and.w	r2, r3, #31
 80030fe:	e01e      	b.n	800313e <HAL_ADC_ConfigChannel+0x336>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2102      	movs	r1, #2
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fbac 	bl	8002864 <LL_ADC_GetOffsetChannel>
 800310c:	4603      	mov	r3, r0
 800310e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800311e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003126:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 800312e:	2320      	movs	r3, #32
 8003130:	e004      	b.n	800313c <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 8003132:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003136:	fab3 f383 	clz	r3, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x34e>
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	0e9b      	lsrs	r3, r3, #26
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	e016      	b.n	8003184 <HAL_ADC_ConfigChannel+0x37c>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003168:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800316a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800316e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 8003176:	2320      	movs	r3, #32
 8003178:	e004      	b.n	8003184 <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 800317a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003184:	429a      	cmp	r2, r3
 8003186:	d106      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2200      	movs	r2, #0
 800318e:	2102      	movs	r1, #2
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fb7d 	bl	8002890 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2103      	movs	r1, #3
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fb61 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x3ba>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2103      	movs	r1, #3
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fb56 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80031b8:	4603      	mov	r3, r0
 80031ba:	0e9b      	lsrs	r3, r3, #26
 80031bc:	f003 021f 	and.w	r2, r3, #31
 80031c0:	e017      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x3ea>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2103      	movs	r1, #3
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fb4b 	bl	8002864 <LL_ADC_GetOffsetChannel>
 80031ce:	4603      	mov	r3, r0
 80031d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80031da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031dc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80031de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 80031e4:	2320      	movs	r3, #32
 80031e6:	e003      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 80031e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d105      	bne.n	800320a <HAL_ADC_ConfigChannel+0x402>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0e9b      	lsrs	r3, r3, #26
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	e011      	b.n	800322e <HAL_ADC_ConfigChannel+0x426>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800321a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800321c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 8003222:	2320      	movs	r3, #32
 8003224:	e003      	b.n	800322e <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 8003226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003228:	fab3 f383 	clz	r3, r3
 800322c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800322e:	429a      	cmp	r2, r3
 8003230:	d106      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	2103      	movs	r1, #3
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fb28 	bl	8002890 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fc51 	bl	8002aec <LL_ADC_IsEnabled>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 813f 	bne.w	80034d0 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6819      	ldr	r1, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	461a      	mov	r2, r3
 8003260:	f7ff fbd2 	bl	8002a08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	4a8e      	ldr	r2, [pc, #568]	; (80034a4 <HAL_ADC_ConfigChannel+0x69c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	f040 8130 	bne.w	80034d0 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10b      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x490>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	0e9b      	lsrs	r3, r3, #26
 8003286:	3301      	adds	r3, #1
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	2b09      	cmp	r3, #9
 800328e:	bf94      	ite	ls
 8003290:	2301      	movls	r3, #1
 8003292:	2300      	movhi	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	e019      	b.n	80032cc <HAL_ADC_ConfigChannel+0x4c4>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80032a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80032aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80032b0:	2320      	movs	r3, #32
 80032b2:	e003      	b.n	80032bc <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80032b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	3301      	adds	r3, #1
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	2b09      	cmp	r3, #9
 80032c4:	bf94      	ite	ls
 80032c6:	2301      	movls	r3, #1
 80032c8:	2300      	movhi	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d079      	beq.n	80033c4 <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d107      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x4e4>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	0e9b      	lsrs	r3, r3, #26
 80032e2:	3301      	adds	r3, #1
 80032e4:	069b      	lsls	r3, r3, #26
 80032e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032ea:	e015      	b.n	8003318 <HAL_ADC_ConfigChannel+0x510>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80032fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 8003304:	2320      	movs	r3, #32
 8003306:	e003      	b.n	8003310 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 8003308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	3301      	adds	r3, #1
 8003312:	069b      	lsls	r3, r3, #26
 8003314:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003320:	2b00      	cmp	r3, #0
 8003322:	d109      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x530>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	0e9b      	lsrs	r3, r3, #26
 800332a:	3301      	adds	r3, #1
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2101      	movs	r1, #1
 8003332:	fa01 f303 	lsl.w	r3, r1, r3
 8003336:	e017      	b.n	8003368 <HAL_ADC_ConfigChannel+0x560>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003348:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800334a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8003350:	2320      	movs	r3, #32
 8003352:	e003      	b.n	800335c <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 8003354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003356:	fab3 f383 	clz	r3, r3
 800335a:	b2db      	uxtb	r3, r3
 800335c:	3301      	adds	r3, #1
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	2101      	movs	r1, #1
 8003364:	fa01 f303 	lsl.w	r3, r1, r3
 8003368:	ea42 0103 	orr.w	r1, r2, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10a      	bne.n	800338e <HAL_ADC_ConfigChannel+0x586>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0e9b      	lsrs	r3, r3, #26
 800337e:	3301      	adds	r3, #1
 8003380:	f003 021f 	and.w	r2, r3, #31
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	051b      	lsls	r3, r3, #20
 800338c:	e018      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x5b8>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800339c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80033a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 80033a6:	2320      	movs	r3, #32
 80033a8:	e003      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 80033aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	3301      	adds	r3, #1
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	4613      	mov	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4413      	add	r3, r2
 80033be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033c0:	430b      	orrs	r3, r1
 80033c2:	e080      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d107      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x5d8>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	3301      	adds	r3, #1
 80033d8:	069b      	lsls	r3, r3, #26
 80033da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033de:	e015      	b.n	800340c <HAL_ADC_ConfigChannel+0x604>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80033ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 80033f8:	2320      	movs	r3, #32
 80033fa:	e003      	b.n	8003404 <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	fab3 f383 	clz	r3, r3
 8003402:	b2db      	uxtb	r3, r3
 8003404:	3301      	adds	r3, #1
 8003406:	069b      	lsls	r3, r3, #26
 8003408:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003414:	2b00      	cmp	r3, #0
 8003416:	d109      	bne.n	800342c <HAL_ADC_ConfigChannel+0x624>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	0e9b      	lsrs	r3, r3, #26
 800341e:	3301      	adds	r3, #1
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	2101      	movs	r1, #1
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	e017      	b.n	800345c <HAL_ADC_ConfigChannel+0x654>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	61fb      	str	r3, [r7, #28]
  return result;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 8003444:	2320      	movs	r3, #32
 8003446:	e003      	b.n	8003450 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2101      	movs	r1, #1
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	ea42 0103 	orr.w	r1, r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10d      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x680>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	3301      	adds	r3, #1
 8003474:	f003 021f 	and.w	r2, r3, #31
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	3b1e      	subs	r3, #30
 8003480:	051b      	lsls	r3, r3, #20
 8003482:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003486:	e01d      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x6bc>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	fa93 f3a3 	rbit	r3, r3
 8003494:	613b      	str	r3, [r7, #16]
  return result;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d103      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80034a0:	2320      	movs	r3, #32
 80034a2:	e005      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x6a8>
 80034a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	f003 021f 	and.w	r2, r3, #31
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	3b1e      	subs	r3, #30
 80034be:	051b      	lsls	r3, r3, #20
 80034c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ca:	4619      	mov	r1, r3
 80034cc:	f7ff fa70 	bl	80029b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <HAL_ADC_ConfigChannel+0x7dc>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d079      	beq.n	80035d0 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034dc:	4842      	ldr	r0, [pc, #264]	; (80035e8 <HAL_ADC_ConfigChannel+0x7e0>)
 80034de:	f7ff f969 	bl	80027b4 <LL_ADC_GetCommonPathInternalCh>
 80034e2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a40      	ldr	r2, [pc, #256]	; (80035ec <HAL_ADC_ConfigChannel+0x7e4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d124      	bne.n	800353a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d11e      	bne.n	800353a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <HAL_ADC_ConfigChannel+0x7e8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d164      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003506:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800350a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800350e:	4619      	mov	r1, r3
 8003510:	4835      	ldr	r0, [pc, #212]	; (80035e8 <HAL_ADC_ConfigChannel+0x7e0>)
 8003512:	f7ff f93c 	bl	800278e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003516:	4b37      	ldr	r3, [pc, #220]	; (80035f4 <HAL_ADC_ConfigChannel+0x7ec>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	099b      	lsrs	r3, r3, #6
 800351c:	4a36      	ldr	r2, [pc, #216]	; (80035f8 <HAL_ADC_ConfigChannel+0x7f0>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	099b      	lsrs	r3, r3, #6
 8003524:	3301      	adds	r3, #1
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800352a:	e002      	b.n	8003532 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3b01      	subs	r3, #1
 8003530:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f9      	bne.n	800352c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003538:	e04a      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a2f      	ldr	r2, [pc, #188]	; (80035fc <HAL_ADC_ConfigChannel+0x7f4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d113      	bne.n	800356c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003544:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d10d      	bne.n	800356c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a2a      	ldr	r2, [pc, #168]	; (8003600 <HAL_ADC_ConfigChannel+0x7f8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d13a      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800355a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800355e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003562:	4619      	mov	r1, r3
 8003564:	4820      	ldr	r0, [pc, #128]	; (80035e8 <HAL_ADC_ConfigChannel+0x7e0>)
 8003566:	f7ff f912 	bl	800278e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800356a:	e031      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a24      	ldr	r2, [pc, #144]	; (8003604 <HAL_ADC_ConfigChannel+0x7fc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d113      	bne.n	800359e <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10d      	bne.n	800359e <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <HAL_ADC_ConfigChannel+0x7e8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d121      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800358c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003590:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003594:	4619      	mov	r1, r3
 8003596:	4814      	ldr	r0, [pc, #80]	; (80035e8 <HAL_ADC_ConfigChannel+0x7e0>)
 8003598:	f7ff f8f9 	bl	800278e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 800359c:	e018      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a19      	ldr	r2, [pc, #100]	; (8003608 <HAL_ADC_ConfigChannel+0x800>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d113      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a10      	ldr	r2, [pc, #64]	; (80035f0 <HAL_ADC_ConfigChannel+0x7e8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d00e      	beq.n	80035d0 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff f90a 	bl	80027d0 <LL_ADC_EnableChannelVDDcore>
 80035bc:	e008      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c2:	f043 0220 	orr.w	r2, r3, #32
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80035d8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80035dc:	4618      	mov	r0, r3
 80035de:	37d8      	adds	r7, #216	; 0xd8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	80080000 	.word	0x80080000
 80035e8:	42028300 	.word	0x42028300
 80035ec:	c3210000 	.word	0xc3210000
 80035f0:	42028000 	.word	0x42028000
 80035f4:	20000000 	.word	0x20000000
 80035f8:	053e2d63 	.word	0x053e2d63
 80035fc:	43290000 	.word	0x43290000
 8003600:	42028100 	.word	0x42028100
 8003604:	c7520000 	.word	0xc7520000
 8003608:	475a0000 	.word	0x475a0000

0800360c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <__NVIC_SetPriorityGrouping+0x44>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003628:	4013      	ands	r3, r2
 800362a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800363e:	4a04      	ldr	r2, [pc, #16]	; (8003650 <__NVIC_SetPriorityGrouping+0x44>)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	60d3      	str	r3, [r2, #12]
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <__NVIC_GetPriorityGrouping+0x18>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	0a1b      	lsrs	r3, r3, #8
 800365e:	f003 0307 	and.w	r3, r3, #7
}
 8003662:	4618      	mov	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800367c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db0a      	blt.n	800369a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	490c      	ldr	r1, [pc, #48]	; (80036bc <__NVIC_SetPriority+0x4c>)
 800368a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800368e:	0112      	lsls	r2, r2, #4
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	440b      	add	r3, r1
 8003694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003698:	e00a      	b.n	80036b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4908      	ldr	r1, [pc, #32]	; (80036c0 <__NVIC_SetPriority+0x50>)
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	3b04      	subs	r3, #4
 80036a8:	0112      	lsls	r2, r2, #4
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	440b      	add	r3, r1
 80036ae:	761a      	strb	r2, [r3, #24]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000e100 	.word	0xe000e100
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f1c3 0307 	rsb	r3, r3, #7
 80036de:	2b04      	cmp	r3, #4
 80036e0:	bf28      	it	cs
 80036e2:	2304      	movcs	r3, #4
 80036e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d902      	bls.n	80036f4 <NVIC_EncodePriority+0x30>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3b03      	subs	r3, #3
 80036f2:	e000      	b.n	80036f6 <NVIC_EncodePriority+0x32>
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	401a      	ands	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800370c:	f04f 31ff 	mov.w	r1, #4294967295
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	43d9      	mvns	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800371c:	4313      	orrs	r3, r2
         );
}
 800371e:	4618      	mov	r0, r3
 8003720:	3724      	adds	r7, #36	; 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
	...

0800372c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	3b01      	subs	r3, #1
 8003738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800373c:	d301      	bcc.n	8003742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800373e:	2301      	movs	r3, #1
 8003740:	e00f      	b.n	8003762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003742:	4a0a      	ldr	r2, [pc, #40]	; (800376c <SysTick_Config+0x40>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3b01      	subs	r3, #1
 8003748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800374a:	210f      	movs	r1, #15
 800374c:	f04f 30ff 	mov.w	r0, #4294967295
 8003750:	f7ff ff8e 	bl	8003670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <SysTick_Config+0x40>)
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800375a:	4b04      	ldr	r3, [pc, #16]	; (800376c <SysTick_Config+0x40>)
 800375c:	2207      	movs	r2, #7
 800375e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	e000e010 	.word	0xe000e010

08003770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ff47 	bl	800360c <__NVIC_SetPriorityGrouping>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	4603      	mov	r3, r0
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003794:	f7ff ff5e 	bl	8003654 <__NVIC_GetPriorityGrouping>
 8003798:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7ff ff90 	bl	80036c4 <NVIC_EncodePriority>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff5f 	bl	8003670 <__NVIC_SetPriority>
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ffb2 	bl	800372c <SysTick_Config>
 80037c8:	4603      	mov	r3, r0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0d2      	b.n	800398c <HAL_ETH_Init+0x1b8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d106      	bne.n	80037fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2223      	movs	r2, #35	; 0x23
 80037f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7fe fbb7 	bl	8001f6c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SBS_CLK_ENABLE();
 80037fe:	4b65      	ldr	r3, [pc, #404]	; (8003994 <HAL_ETH_Init+0x1c0>)
 8003800:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003804:	4a63      	ldr	r2, [pc, #396]	; (8003994 <HAL_ETH_Init+0x1c0>)
 8003806:	f043 0302 	orr.w	r3, r3, #2
 800380a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800380e:	4b61      	ldr	r3, [pc, #388]	; (8003994 <HAL_ETH_Init+0x1c0>)
 8003810:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]


  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	7a1b      	ldrb	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d103      	bne.n	800382c <HAL_ETH_Init+0x58>
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_MII);
 8003824:	2000      	movs	r0, #0
 8003826:	f7fe ff89 	bl	800273c <HAL_SBS_ETHInterfaceSelect>
 800382a:	e003      	b.n	8003834 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SBS_ETHInterfaceSelect(SBS_ETH_RMII);
 800382c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003830:	f7fe ff84 	bl	800273c <HAL_SBS_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SBS->PMCR;
 8003834:	4b58      	ldr	r3, [pc, #352]	; (8003998 <HAL_ETH_Init+0x1c4>)
 8003836:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003850:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003852:	f7fe ff43 	bl	80026dc <HAL_GetTick>
 8003856:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003858:	e011      	b.n	800387e <HAL_ETH_Init+0xaa>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800385a:	f7fe ff3f 	bl	80026dc <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003868:	d909      	bls.n	800387e <HAL_ETH_Init+0xaa>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2204      	movs	r2, #4
 800386e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	22e0      	movs	r2, #224	; 0xe0
 8003876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e086      	b.n	800398c <HAL_ETH_Init+0x1b8>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e4      	bne.n	800385a <HAL_ETH_Init+0x86>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f885 	bl	80039a0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003896:	f002 fb67 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 800389a:	4603      	mov	r3, r0
 800389c:	4a3f      	ldr	r2, [pc, #252]	; (800399c <HAL_ETH_Init+0x1c8>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	0c9a      	lsrs	r2, r3, #18
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3a01      	subs	r2, #1
 80038aa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fa80 	bl	8003db4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80038c0:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80038d0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <HAL_ETH_Init+0x120>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	22e0      	movs	r2, #224	; 0xe0
 80038ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e04b      	b.n	800398c <HAL_ETH_Init+0x1b8>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003900:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003904:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6952      	ldr	r2, [r2, #20]
 800390c:	0051      	lsls	r1, r2, #1
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	430b      	orrs	r3, r1
 8003914:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003918:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fae6 	bl	8003eee <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fb2c 	bl	8003f80 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	3305      	adds	r3, #5
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	021a      	lsls	r2, r3, #8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	4619      	mov	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	3303      	adds	r3, #3
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	061a      	lsls	r2, r3, #24
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	3302      	adds	r3, #2
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	3301      	adds	r3, #1
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003966:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003974:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003976:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2210      	movs	r2, #16
 8003986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	44020c00 	.word	0x44020c00
 8003998:	44000400 	.word	0x44000400
 800399c:	431bde83 	.word	0x431bde83

080039a0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80039ba:	f002 fad5 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 80039be:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <HAL_ETH_SetMDIOClockRange+0xb8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d908      	bls.n	80039da <HAL_ETH_SetMDIOClockRange+0x3a>
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	4a24      	ldr	r2, [pc, #144]	; (8003a5c <HAL_ETH_SetMDIOClockRange+0xbc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d804      	bhi.n	80039da <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	e034      	b.n	8003a44 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4a1f      	ldr	r2, [pc, #124]	; (8003a5c <HAL_ETH_SetMDIOClockRange+0xbc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d908      	bls.n	80039f4 <HAL_ETH_SetMDIOClockRange+0x54>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	4a1e      	ldr	r2, [pc, #120]	; (8003a60 <HAL_ETH_SetMDIOClockRange+0xc0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d204      	bcs.n	80039f4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	e027      	b.n	8003a44 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <HAL_ETH_SetMDIOClockRange+0xc0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d303      	bcc.n	8003a04 <HAL_ETH_SetMDIOClockRange+0x64>
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4a19      	ldr	r2, [pc, #100]	; (8003a64 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d91e      	bls.n	8003a42 <HAL_ETH_SetMDIOClockRange+0xa2>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <HAL_ETH_SetMDIOClockRange+0xc4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d908      	bls.n	8003a1e <HAL_ETH_SetMDIOClockRange+0x7e>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	4a16      	ldr	r2, [pc, #88]	; (8003a68 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d804      	bhi.n	8003a1e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	e012      	b.n	8003a44 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else if ((hclk >= 150000000U) && (hclk <= 250000000U))
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	4a11      	ldr	r2, [pc, #68]	; (8003a68 <HAL_ETH_SetMDIOClockRange+0xc8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d908      	bls.n	8003a38 <HAL_ETH_SetMDIOClockRange+0x98>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	4a10      	ldr	r2, [pc, #64]	; (8003a6c <HAL_ETH_SetMDIOClockRange+0xcc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d804      	bhi.n	8003a38 <HAL_ETH_SetMDIOClockRange+0x98>
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	e005      	b.n	8003a44 <HAL_ETH_SetMDIOClockRange+0xa4>
  }
  else /*(hclk >= 250000000U) && (hclk <= 300000000U)*/
  {
    /* CSR Clock Range between 250-300 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e000      	b.n	8003a44 <HAL_ETH_SetMDIOClockRange+0xa4>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003a42:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003a4e:	bf00      	nop
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	01312cff 	.word	0x01312cff
 8003a5c:	02160ebf 	.word	0x02160ebf
 8003a60:	03938700 	.word	0x03938700
 8003a64:	05f5e0ff 	.word	0x05f5e0ff
 8003a68:	08f0d17f 	.word	0x08f0d17f
 8003a6c:	0ee6b280 	.word	0x0ee6b280

08003a70 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003a82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	791b      	ldrb	r3, [r3, #4]
 8003a88:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003a8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	7b1b      	ldrb	r3, [r3, #12]
 8003a90:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003a92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	7b5b      	ldrb	r3, [r3, #13]
 8003a98:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003a9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	7b9b      	ldrb	r3, [r3, #14]
 8003aa0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003aa2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	7bdb      	ldrb	r3, [r3, #15]
 8003aa8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003aaa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	7c12      	ldrb	r2, [r2, #16]
 8003ab0:	2a00      	cmp	r2, #0
 8003ab2:	d102      	bne.n	8003aba <ETH_SetMACConfig+0x4a>
 8003ab4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003ab8:	e000      	b.n	8003abc <ETH_SetMACConfig+0x4c>
 8003aba:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003abc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	7c52      	ldrb	r2, [r2, #17]
 8003ac2:	2a00      	cmp	r2, #0
 8003ac4:	d102      	bne.n	8003acc <ETH_SetMACConfig+0x5c>
 8003ac6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003aca:	e000      	b.n	8003ace <ETH_SetMACConfig+0x5e>
 8003acc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003ace:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	7c9b      	ldrb	r3, [r3, #18]
 8003ad4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003ad6:	431a      	orrs	r2, r3
               macconf->Speed |
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003adc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003ae2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	7f1b      	ldrb	r3, [r3, #28]
 8003ae8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003aea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	7f5b      	ldrb	r3, [r3, #29]
 8003af0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003af2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	7f92      	ldrb	r2, [r2, #30]
 8003af8:	2a00      	cmp	r2, #0
 8003afa:	d102      	bne.n	8003b02 <ETH_SetMACConfig+0x92>
 8003afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b00:	e000      	b.n	8003b04 <ETH_SetMACConfig+0x94>
 8003b02:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003b04:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	7fdb      	ldrb	r3, [r3, #31]
 8003b0a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003b0c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003b14:	2a00      	cmp	r2, #0
 8003b16:	d102      	bne.n	8003b1e <ETH_SetMACConfig+0xae>
 8003b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b1c:	e000      	b.n	8003b20 <ETH_SetMACConfig+0xb0>
 8003b1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003b20:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003b26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b2e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003b30:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b57      	ldr	r3, [pc, #348]	; (8003ca0 <ETH_SetMACConfig+0x230>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	68f9      	ldr	r1, [r7, #12]
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b5a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003b5c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b64:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003b66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003b6e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003b70:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003b78:	2a00      	cmp	r2, #0
 8003b7a:	d102      	bne.n	8003b82 <ETH_SetMACConfig+0x112>
 8003b7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b80:	e000      	b.n	8003b84 <ETH_SetMACConfig+0x114>
 8003b82:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003b84:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	4b43      	ldr	r3, [pc, #268]	; (8003ca4 <ETH_SetMACConfig+0x234>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	68f9      	ldr	r1, [r7, #12]
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ba8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6812      	ldr	r2, [r2, #0]
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	430b      	orrs	r3, r1
 8003bc8:	60d3      	str	r3, [r2, #12]


  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003bd0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003bd6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003bde:	2a00      	cmp	r2, #0
 8003be0:	d101      	bne.n	8003be6 <ETH_SetMACConfig+0x176>
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	e000      	b.n	8003be8 <ETH_SetMACConfig+0x178>
 8003be6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003be8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bee:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bfa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003bfe:	4013      	ands	r3, r2
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	68f9      	ldr	r1, [r7, #12]
 8003c06:	430b      	orrs	r3, r1
 8003c08:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003c10:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003c18:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	f023 0103 	bic.w	r1, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003c3e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003c5a:	2a00      	cmp	r2, #0
 8003c5c:	d101      	bne.n	8003c62 <ETH_SetMACConfig+0x1f2>
 8003c5e:	2240      	movs	r2, #64	; 0x40
 8003c60:	e000      	b.n	8003c64 <ETH_SetMACConfig+0x1f4>
 8003c62:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003c64:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003c6c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003c6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003c76:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003c84:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003c94:	bf00      	nop
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	00048083 	.word	0x00048083
 8003ca4:	c0f88000 	.word	0xc0f88000

08003ca8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8003cc0:	f023 0302 	bic.w	r3, r3, #2
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	6811      	ldr	r1, [r2, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cd2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	791b      	ldrb	r3, [r3, #4]
 8003cd8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003cde:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	7b1b      	ldrb	r3, [r3, #12]
 8003ce4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	68f9      	ldr	r1, [r7, #12]
 8003d02:	430b      	orrs	r3, r1
 8003d04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d08:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	7b5b      	ldrb	r3, [r3, #13]
 8003d0e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d20:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003d24:	4b21      	ldr	r3, [pc, #132]	; (8003dac <ETH_SetDMAConfig+0x104>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	68f9      	ldr	r1, [r7, #12]
 8003d2e:	430b      	orrs	r3, r1
 8003d30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d34:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	7d1b      	ldrb	r3, [r3, #20]
 8003d40:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d42:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	7f5b      	ldrb	r3, [r3, #29]
 8003d48:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d56:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <ETH_SetDMAConfig+0x108>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	68f9      	ldr	r1, [r7, #12]
 8003d64:	430b      	orrs	r3, r1
 8003d66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d6a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	7f1b      	ldrb	r3, [r3, #28]
 8003d72:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d8c:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	68f9      	ldr	r1, [r7, #12]
 8003d96:	430b      	orrs	r3, r1
 8003d98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003d9c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	fffec000 	.word	0xfffec000
 8003db0:	ffc0efef 	.word	0xffc0efef

08003db4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b0a4      	sub	sp, #144	; 0x90
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003de4:	2300      	movs	r3, #0
 8003de6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003df4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003e0c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003e10:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003e36:	2300      	movs	r3, #0
 8003e38:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003e4c:	2320      	movs	r3, #32
 8003e4e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003e5e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003e64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e68:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003e70:	2302      	movs	r3, #2
 8003e72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003e98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff fde6 	bl	8003a70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003ebe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ec2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003ec8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ecc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003ed4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003eda:	f107 0308 	add.w	r3, r7, #8
 8003ede:	4619      	mov	r1, r3
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff fee1 	bl	8003ca8 <ETH_SetDMAConfig>
}
 8003ee6:	bf00      	nop
 8003ee8:	3790      	adds	r7, #144	; 0x90
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b085      	sub	sp, #20
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	e01d      	b.n	8003f38 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68d9      	ldr	r1, [r3, #12]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	4613      	mov	r3, r2
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4413      	add	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	440b      	add	r3, r1
 8003f0c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2200      	movs	r2, #0
 8003f18:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	3206      	adds	r2, #6
 8003f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3301      	adds	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d9de      	bls.n	8003efc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2303      	movs	r3, #3
 8003f50:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f60:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f70:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f88:	2300      	movs	r3, #0
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	e023      	b.n	8003fd6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6919      	ldr	r1, [r3, #16]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4613      	mov	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	440b      	add	r3, r1
 8003f9e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003fc4:	68b9      	ldr	r1, [r7, #8]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	3212      	adds	r2, #18
 8003fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d9d8      	bls.n	8003f8e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004002:	461a      	mov	r2, r3
 8004004:	2303      	movs	r3, #3
 8004006:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691a      	ldr	r2, [r3, #16]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004016:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800404a:	e136      	b.n	80042ba <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	2101      	movs	r1, #1
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	4013      	ands	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8128 	beq.w	80042b4 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b02      	cmp	r3, #2
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x38>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b12      	cmp	r3, #18
 8004072:	d125      	bne.n	80040c0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	08da      	lsrs	r2, r3, #3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3208      	adds	r2, #8
 800407c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004080:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	220f      	movs	r2, #15
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4013      	ands	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	f003 020f 	and.w	r2, r3, #15
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	08da      	lsrs	r2, r3, #3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3208      	adds	r2, #8
 80040ba:	6979      	ldr	r1, [r7, #20]
 80040bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	2203      	movs	r2, #3
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4013      	ands	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0203 	and.w	r2, r3, #3
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d00b      	beq.n	8004114 <HAL_GPIO_Init+0xd8>
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d007      	beq.n	8004114 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004108:	2b11      	cmp	r3, #17
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b12      	cmp	r3, #18
 8004112:	d130      	bne.n	8004176 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	2203      	movs	r2, #3
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4013      	ands	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800414a:	2201      	movs	r2, #1
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	fa02 f303 	lsl.w	r3, r2, r3
 8004152:	43db      	mvns	r3, r3
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4013      	ands	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	f003 0201 	and.w	r2, r3, #1
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b03      	cmp	r3, #3
 800417c:	d017      	beq.n	80041ae <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	2203      	movs	r2, #3
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4013      	ands	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d07c      	beq.n	80042b4 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80041ba:	4a47      	ldr	r2, [pc, #284]	; (80042d8 <HAL_GPIO_Init+0x29c>)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	089b      	lsrs	r3, r3, #2
 80041c0:	3318      	adds	r3, #24
 80041c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c6:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	220f      	movs	r2, #15
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43db      	mvns	r3, r3
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4013      	ands	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	0a9a      	lsrs	r2, r3, #10
 80041e2:	4b3e      	ldr	r3, [pc, #248]	; (80042dc <HAL_GPIO_Init+0x2a0>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	f002 0203 	and.w	r2, r2, #3
 80041ec:	00d2      	lsls	r2, r2, #3
 80041ee:	4093      	lsls	r3, r2
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80041f6:	4938      	ldr	r1, [pc, #224]	; (80042d8 <HAL_GPIO_Init+0x29c>)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	089b      	lsrs	r3, r3, #2
 80041fc:	3318      	adds	r3, #24
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004204:	4b34      	ldr	r3, [pc, #208]	; (80042d8 <HAL_GPIO_Init+0x29c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	43db      	mvns	r3, r3
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4013      	ands	r3, r2
 8004212:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004228:	4a2b      	ldr	r2, [pc, #172]	; (80042d8 <HAL_GPIO_Init+0x29c>)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800422e:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <HAL_GPIO_Init+0x29c>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	43db      	mvns	r3, r3
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4013      	ands	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8004252:	4a21      	ldr	r2, [pc, #132]	; (80042d8 <HAL_GPIO_Init+0x29c>)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004258:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <HAL_GPIO_Init+0x29c>)
 800425a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	43db      	mvns	r3, r3
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4013      	ands	r3, r2
 8004268:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800427e:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <HAL_GPIO_Init+0x29c>)
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <HAL_GPIO_Init+0x29c>)
 8004288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800428c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	43db      	mvns	r3, r3
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4013      	ands	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80042ac:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <HAL_GPIO_Init+0x29c>)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	3301      	adds	r3, #1
 80042b8:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f47f aec1 	bne.w	800404c <HAL_GPIO_Init+0x10>
  }
}
 80042ca:	bf00      	nop
 80042cc:	bf00      	nop
 80042ce:	371c      	adds	r7, #28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	44022000 	.word	0x44022000
 80042dc:	002f7f7f 	.word	0x002f7f7f

080042e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e08d      	b.n	800440e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fd fefe 	bl	8002108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2224      	movs	r2, #36	; 0x24
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004330:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004340:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d107      	bne.n	800435a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004356:	609a      	str	r2, [r3, #8]
 8004358:	e006      	b.n	8004368 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004366:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d108      	bne.n	8004382 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800437e:	605a      	str	r2, [r3, #4]
 8004380:	e007      	b.n	8004392 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004390:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6812      	ldr	r2, [r2, #0]
 800439c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69d9      	ldr	r1, [r3, #28]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	4608      	mov	r0, r1
 8004422:	4611      	mov	r1, r2
 8004424:	461a      	mov	r2, r3
 8004426:	4603      	mov	r3, r0
 8004428:	817b      	strh	r3, [r7, #10]
 800442a:	460b      	mov	r3, r1
 800442c:	813b      	strh	r3, [r7, #8]
 800442e:	4613      	mov	r3, r2
 8004430:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b20      	cmp	r3, #32
 800443c:	f040 80f9 	bne.w	8004632 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_I2C_Mem_Write+0x34>
 8004446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	d105      	bne.n	8004458 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004452:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0ed      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800445e:	2b01      	cmp	r3, #1
 8004460:	d101      	bne.n	8004466 <HAL_I2C_Mem_Write+0x4e>
 8004462:	2302      	movs	r3, #2
 8004464:	e0e6      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800446e:	f7fe f935 	bl	80026dc <HAL_GetTick>
 8004472:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	2319      	movs	r3, #25
 800447a:	2201      	movs	r2, #1
 800447c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fac3 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0d1      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2221      	movs	r2, #33	; 0x21
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2240      	movs	r2, #64	; 0x40
 800449c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a3a      	ldr	r2, [r7, #32]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044b8:	88f8      	ldrh	r0, [r7, #6]
 80044ba:	893a      	ldrh	r2, [r7, #8]
 80044bc:	8979      	ldrh	r1, [r7, #10]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	4603      	mov	r3, r0
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f9d3 	bl	8004874 <I2C_RequestMemoryWrite>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e0a9      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2bff      	cmp	r3, #255	; 0xff
 80044e8:	d90e      	bls.n	8004508 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	22ff      	movs	r2, #255	; 0xff
 80044ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	8979      	ldrh	r1, [r7, #10]
 80044f8:	2300      	movs	r3, #0
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fc3d 	bl	8004d80 <I2C_TransferConfig>
 8004506:	e00f      	b.n	8004528 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004516:	b2da      	uxtb	r2, r3
 8004518:	8979      	ldrh	r1, [r7, #10]
 800451a:	2300      	movs	r3, #0
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fc2c 	bl	8004d80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 fabc 	bl	8004aaa <I2C_WaitOnTXISFlagUntilTimeout>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e07b      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	1c5a      	adds	r2, r3, #1
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d034      	beq.n	80045e0 <HAL_I2C_Mem_Write+0x1c8>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457a:	2b00      	cmp	r3, #0
 800457c:	d130      	bne.n	80045e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	2200      	movs	r2, #0
 8004586:	2180      	movs	r1, #128	; 0x80
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fa3f 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e04d      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	2bff      	cmp	r3, #255	; 0xff
 80045a0:	d90e      	bls.n	80045c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	22ff      	movs	r2, #255	; 0xff
 80045a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	8979      	ldrh	r1, [r7, #10]
 80045b0:	2300      	movs	r3, #0
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fbe1 	bl	8004d80 <I2C_TransferConfig>
 80045be:	e00f      	b.n	80045e0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	8979      	ldrh	r1, [r7, #10]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fbd0 	bl	8004d80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d19e      	bne.n	8004528 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 faa2 	bl	8004b38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e01a      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2220      	movs	r2, #32
 8004604:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6859      	ldr	r1, [r3, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <HAL_I2C_Mem_Write+0x224>)
 8004612:	400b      	ands	r3, r1
 8004614:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	e000      	b.n	8004634 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004632:	2302      	movs	r3, #2
  }
}
 8004634:	4618      	mov	r0, r3
 8004636:	3718      	adds	r7, #24
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	fe00e800 	.word	0xfe00e800

08004640 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	4608      	mov	r0, r1
 800464a:	4611      	mov	r1, r2
 800464c:	461a      	mov	r2, r3
 800464e:	4603      	mov	r3, r0
 8004650:	817b      	strh	r3, [r7, #10]
 8004652:	460b      	mov	r3, r1
 8004654:	813b      	strh	r3, [r7, #8]
 8004656:	4613      	mov	r3, r2
 8004658:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b20      	cmp	r3, #32
 8004664:	f040 80fd 	bne.w	8004862 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <HAL_I2C_Mem_Read+0x34>
 800466e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004670:	2b00      	cmp	r3, #0
 8004672:	d105      	bne.n	8004680 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800467a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e0f1      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004686:	2b01      	cmp	r3, #1
 8004688:	d101      	bne.n	800468e <HAL_I2C_Mem_Read+0x4e>
 800468a:	2302      	movs	r3, #2
 800468c:	e0ea      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004696:	f7fe f821 	bl	80026dc <HAL_GetTick>
 800469a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	2319      	movs	r3, #25
 80046a2:	2201      	movs	r2, #1
 80046a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 f9af 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0d5      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2222      	movs	r2, #34	; 0x22
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2240      	movs	r2, #64	; 0x40
 80046c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a3a      	ldr	r2, [r7, #32]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046e0:	88f8      	ldrh	r0, [r7, #6]
 80046e2:	893a      	ldrh	r2, [r7, #8]
 80046e4:	8979      	ldrh	r1, [r7, #10]
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	4603      	mov	r3, r0
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f913 	bl	800491c <I2C_RequestMemoryRead>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0ad      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470c:	b29b      	uxth	r3, r3
 800470e:	2bff      	cmp	r3, #255	; 0xff
 8004710:	d90e      	bls.n	8004730 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	22ff      	movs	r2, #255	; 0xff
 8004716:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471c:	b2da      	uxtb	r2, r3
 800471e:	8979      	ldrh	r1, [r7, #10]
 8004720:	4b52      	ldr	r3, [pc, #328]	; (800486c <HAL_I2C_Mem_Read+0x22c>)
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fb29 	bl	8004d80 <I2C_TransferConfig>
 800472e:	e00f      	b.n	8004750 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004734:	b29a      	uxth	r2, r3
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800473e:	b2da      	uxtb	r2, r3
 8004740:	8979      	ldrh	r1, [r7, #10]
 8004742:	4b4a      	ldr	r3, [pc, #296]	; (800486c <HAL_I2C_Mem_Read+0x22c>)
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fb18 	bl	8004d80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	2200      	movs	r2, #0
 8004758:	2104      	movs	r1, #4
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f956 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e07c      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d034      	beq.n	8004810 <HAL_I2C_Mem_Read+0x1d0>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d130      	bne.n	8004810 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b4:	2200      	movs	r2, #0
 80047b6:	2180      	movs	r1, #128	; 0x80
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f927 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e04d      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	2bff      	cmp	r3, #255	; 0xff
 80047d0:	d90e      	bls.n	80047f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	22ff      	movs	r2, #255	; 0xff
 80047d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	8979      	ldrh	r1, [r7, #10]
 80047e0:	2300      	movs	r3, #0
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 fac9 	bl	8004d80 <I2C_TransferConfig>
 80047ee:	e00f      	b.n	8004810 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	8979      	ldrh	r1, [r7, #10]
 8004802:	2300      	movs	r3, #0
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 fab8 	bl	8004d80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d19a      	bne.n	8004750 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f98a 	bl	8004b38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e01a      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2220      	movs	r2, #32
 8004834:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6859      	ldr	r1, [r3, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <HAL_I2C_Mem_Read+0x230>)
 8004842:	400b      	ands	r3, r1
 8004844:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	e000      	b.n	8004864 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004862:	2302      	movs	r3, #2
  }
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	80002400 	.word	0x80002400
 8004870:	fe00e800 	.word	0xfe00e800

08004874 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	4608      	mov	r0, r1
 800487e:	4611      	mov	r1, r2
 8004880:	461a      	mov	r2, r3
 8004882:	4603      	mov	r3, r0
 8004884:	817b      	strh	r3, [r7, #10]
 8004886:	460b      	mov	r3, r1
 8004888:	813b      	strh	r3, [r7, #8]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	8979      	ldrh	r1, [r7, #10]
 8004894:	4b20      	ldr	r3, [pc, #128]	; (8004918 <I2C_RequestMemoryWrite+0xa4>)
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 fa6f 	bl	8004d80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	69b9      	ldr	r1, [r7, #24]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 f8ff 	bl	8004aaa <I2C_WaitOnTXISFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e02c      	b.n	8004910 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048b6:	88fb      	ldrh	r3, [r7, #6]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d105      	bne.n	80048c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048bc:	893b      	ldrh	r3, [r7, #8]
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	629a      	str	r2, [r3, #40]	; 0x28
 80048c6:	e015      	b.n	80048f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80048c8:	893b      	ldrh	r3, [r7, #8]
 80048ca:	0a1b      	lsrs	r3, r3, #8
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	69b9      	ldr	r1, [r7, #24]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f8e5 	bl	8004aaa <I2C_WaitOnTXISFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e012      	b.n	8004910 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048ea:	893b      	ldrh	r3, [r7, #8]
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2200      	movs	r2, #0
 80048fc:	2180      	movs	r1, #128	; 0x80
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f884 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e000      	b.n	8004910 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	80002000 	.word	0x80002000

0800491c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	4608      	mov	r0, r1
 8004926:	4611      	mov	r1, r2
 8004928:	461a      	mov	r2, r3
 800492a:	4603      	mov	r3, r0
 800492c:	817b      	strh	r3, [r7, #10]
 800492e:	460b      	mov	r3, r1
 8004930:	813b      	strh	r3, [r7, #8]
 8004932:	4613      	mov	r3, r2
 8004934:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	b2da      	uxtb	r2, r3
 800493a:	8979      	ldrh	r1, [r7, #10]
 800493c:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <I2C_RequestMemoryRead+0xa4>)
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	2300      	movs	r3, #0
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fa1c 	bl	8004d80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	69b9      	ldr	r1, [r7, #24]
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f8ac 	bl	8004aaa <I2C_WaitOnTXISFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e02c      	b.n	80049b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800495c:	88fb      	ldrh	r3, [r7, #6]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d105      	bne.n	800496e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004962:	893b      	ldrh	r3, [r7, #8]
 8004964:	b2da      	uxtb	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	629a      	str	r2, [r3, #40]	; 0x28
 800496c:	e015      	b.n	800499a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800496e:	893b      	ldrh	r3, [r7, #8]
 8004970:	0a1b      	lsrs	r3, r3, #8
 8004972:	b29b      	uxth	r3, r3
 8004974:	b2da      	uxtb	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	69b9      	ldr	r1, [r7, #24]
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f892 	bl	8004aaa <I2C_WaitOnTXISFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e012      	b.n	80049b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004990:	893b      	ldrh	r3, [r7, #8]
 8004992:	b2da      	uxtb	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2200      	movs	r2, #0
 80049a2:	2140      	movs	r1, #64	; 0x40
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f831 	bl	8004a0c <I2C_WaitOnFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	80002000 	.word	0x80002000

080049c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d103      	bne.n	80049e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2200      	movs	r2, #0
 80049e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d007      	beq.n	8004a00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	619a      	str	r2, [r3, #24]
  }
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a1c:	e031      	b.n	8004a82 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d02d      	beq.n	8004a82 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a26:	f7fd fe59 	bl	80026dc <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d302      	bcc.n	8004a3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d122      	bne.n	8004a82 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4013      	ands	r3, r2
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2301      	moveq	r3, #1
 8004a4e:	2300      	movne	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d113      	bne.n	8004a82 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5e:	f043 0220 	orr.w	r2, r3, #32
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e00f      	b.n	8004aa2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699a      	ldr	r2, [r3, #24]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	bf0c      	ite	eq
 8004a92:	2301      	moveq	r3, #1
 8004a94:	2300      	movne	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d0be      	beq.n	8004a1e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b084      	sub	sp, #16
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	60f8      	str	r0, [r7, #12]
 8004ab2:	60b9      	str	r1, [r7, #8]
 8004ab4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ab6:	e033      	b.n	8004b20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f87f 	bl	8004bc0 <I2C_IsErrorOccurred>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e031      	b.n	8004b30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad2:	d025      	beq.n	8004b20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad4:	f7fd fe02 	bl	80026dc <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d302      	bcc.n	8004aea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d11a      	bne.n	8004b20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d013      	beq.n	8004b20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2220      	movs	r2, #32
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e007      	b.n	8004b30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d1c4      	bne.n	8004ab8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b44:	e02f      	b.n	8004ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f838 	bl	8004bc0 <I2C_IsErrorOccurred>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e02d      	b.n	8004bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b5a:	f7fd fdbf 	bl	80026dc <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d302      	bcc.n	8004b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d11a      	bne.n	8004ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	d013      	beq.n	8004ba6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	f043 0220 	orr.w	r2, r3, #32
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e007      	b.n	8004bb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d1c8      	bne.n	8004b46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08a      	sub	sp, #40	; 0x28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d068      	beq.n	8004cbe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2210      	movs	r2, #16
 8004bf2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bf4:	e049      	b.n	8004c8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfc:	d045      	beq.n	8004c8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bfe:	f7fd fd6d 	bl	80026dc <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d302      	bcc.n	8004c14 <I2C_IsErrorOccurred+0x54>
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d13a      	bne.n	8004c8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c36:	d121      	bne.n	8004c7c <I2C_IsErrorOccurred+0xbc>
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c3e:	d01d      	beq.n	8004c7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d01a      	beq.n	8004c7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c56:	f7fd fd41 	bl	80026dc <HAL_GetTick>
 8004c5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c5c:	e00e      	b.n	8004c7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c5e:	f7fd fd3d 	bl	80026dc <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b19      	cmp	r3, #25
 8004c6a:	d907      	bls.n	8004c7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	f043 0320 	orr.w	r3, r3, #32
 8004c72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004c7a:	e006      	b.n	8004c8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d1e9      	bne.n	8004c5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d003      	beq.n	8004ca0 <I2C_IsErrorOccurred+0xe0>
 8004c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0aa      	beq.n	8004bf6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d103      	bne.n	8004cb0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2220      	movs	r2, #32
 8004cae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	f043 0304 	orr.w	r3, r3, #4
 8004cb6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00b      	beq.n	8004ce8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ce0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	f043 0308 	orr.w	r3, r3, #8
 8004cf8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00b      	beq.n	8004d2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	f043 0302 	orr.w	r3, r3, #2
 8004d1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01c      	beq.n	8004d6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff fe45 	bl	80049c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6859      	ldr	r1, [r3, #4]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <I2C_IsErrorOccurred+0x1bc>)
 8004d46:	400b      	ands	r3, r1
 8004d48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004d6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3728      	adds	r7, #40	; 0x28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	fe00e800 	.word	0xfe00e800

08004d80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	817b      	strh	r3, [r7, #10]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d92:	897b      	ldrh	r3, [r7, #10]
 8004d94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d98:	7a7b      	ldrb	r3, [r7, #9]
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004da0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004dae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	0d5b      	lsrs	r3, r3, #21
 8004dba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <I2C_TransferConfig+0x60>)
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	ea02 0103 	and.w	r1, r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	03ff63ff 	.word	0x03ff63ff

08004de4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	d138      	bne.n	8004e6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e032      	b.n	8004e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2224      	movs	r2, #36	; 0x24
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6819      	ldr	r1, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e000      	b.n	8004e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e6c:	2302      	movs	r3, #2
  }
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d139      	bne.n	8004f04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e033      	b.n	8004f06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2224      	movs	r2, #36	; 0x24
 8004eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0201 	bic.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ecc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e000      	b.n	8004f06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
  }
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
	...

08004f14 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004f18:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <HAL_ICACHE_Enable+0x1c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a04      	ldr	r2, [pc, #16]	; (8004f30 <HAL_ICACHE_Enable+0x1c>)
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	40030400 	.word	0x40030400

08004f34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f36:	b08f      	sub	sp, #60	; 0x3c
 8004f38:	af0a      	add	r7, sp, #40	; 0x28
 8004f3a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e0cd      	b.n	80050e2 <HAL_PCD_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 22bc 	strb.w	r2, [r3, #700]	; 0x2bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fd f9f0 	bl	8002340 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2203      	movs	r2, #3
 8004f64:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f006 ffce 	bl	800bf0e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f72:	2300      	movs	r3, #0
 8004f74:	73fb      	strb	r3, [r7, #15]
 8004f76:	e03e      	b.n	8004ff6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f78:	7bfa      	ldrb	r2, [r7, #15]
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	440b      	add	r3, r1
 8004f86:	333d      	adds	r3, #61	; 0x3d
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f8c:	7bfa      	ldrb	r2, [r7, #15]
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	440b      	add	r3, r1
 8004f9a:	333c      	adds	r3, #60	; 0x3c
 8004f9c:	7bfa      	ldrb	r2, [r7, #15]
 8004f9e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fa0:	7bfa      	ldrb	r2, [r7, #15]
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	440b      	add	r3, r1
 8004fae:	333f      	adds	r3, #63	; 0x3f
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fb4:	7bfa      	ldrb	r2, [r7, #15]
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	440b      	add	r3, r1
 8004fc2:	334c      	adds	r3, #76	; 0x4c
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fc8:	7bfa      	ldrb	r2, [r7, #15]
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	440b      	add	r3, r1
 8004fd6:	3350      	adds	r3, #80	; 0x50
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004fdc:	7bfa      	ldrb	r2, [r7, #15]
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	440b      	add	r3, r1
 8004fea:	3354      	adds	r3, #84	; 0x54
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	73fb      	strb	r3, [r7, #15]
 8004ff6:	7bfa      	ldrb	r2, [r7, #15]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d3bb      	bcc.n	8004f78 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005000:	2300      	movs	r3, #0
 8005002:	73fb      	strb	r3, [r7, #15]
 8005004:	e044      	b.n	8005090 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005006:	7bfa      	ldrb	r2, [r7, #15]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	440b      	add	r3, r1
 8005014:	f203 137d 	addw	r3, r3, #381	; 0x17d
 8005018:	2200      	movs	r2, #0
 800501a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800501c:	7bfa      	ldrb	r2, [r7, #15]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	440b      	add	r3, r1
 800502a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800502e:	7bfa      	ldrb	r2, [r7, #15]
 8005030:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005032:	7bfa      	ldrb	r2, [r7, #15]
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	440b      	add	r3, r1
 8005040:	f203 137f 	addw	r3, r3, #383	; 0x17f
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005048:	7bfa      	ldrb	r2, [r7, #15]
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	440b      	add	r3, r1
 8005056:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800505e:	7bfa      	ldrb	r2, [r7, #15]
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	440b      	add	r3, r1
 800506c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005074:	7bfa      	ldrb	r2, [r7, #15]
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	440b      	add	r3, r1
 8005082:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	3301      	adds	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
 8005090:	7bfa      	ldrb	r2, [r7, #15]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	429a      	cmp	r2, r3
 8005098:	d3b5      	bcc.n	8005006 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	687e      	ldr	r6, [r7, #4]
 80050a2:	466d      	mov	r5, sp
 80050a4:	f106 0410 	add.w	r4, r6, #16
 80050a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80050b8:	1d33      	adds	r3, r6, #4
 80050ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050bc:	6838      	ldr	r0, [r7, #0]
 80050be:	f006 ff5e 	bl	800bf7e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d102      	bne.n	80050e0 <HAL_PCD_Init+0x1ac>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f805 	bl	80050ea <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050ea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
  hpcd->LPM_State = LPM_L0;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 22f4 	strb.w	r2, [r3, #756]	; 0x2f4

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510c:	f043 0201 	orr.w	r2, r3, #1
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	655a      	str	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	f043 0202 	orr.w	r2, r3, #2
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f000 bc28 	b.w	8005994 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005144:	4b94      	ldr	r3, [pc, #592]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f003 0318 	and.w	r3, r3, #24
 800514c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800514e:	4b92      	ldr	r3, [pc, #584]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 8005150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b00      	cmp	r3, #0
 8005162:	d05b      	beq.n	800521c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2b08      	cmp	r3, #8
 8005168:	d005      	beq.n	8005176 <HAL_RCC_OscConfig+0x46>
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	2b18      	cmp	r3, #24
 800516e:	d114      	bne.n	800519a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d111      	bne.n	800519a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	f000 bc08 	b.w	8005994 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005184:	4b84      	ldr	r3, [pc, #528]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	041b      	lsls	r3, r3, #16
 8005192:	4981      	ldr	r1, [pc, #516]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 8005194:	4313      	orrs	r3, r2
 8005196:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005198:	e040      	b.n	800521c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d023      	beq.n	80051ea <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80051a2:	4b7d      	ldr	r3, [pc, #500]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a7c      	ldr	r2, [pc, #496]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80051a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ae:	f7fd fa95 	bl	80026dc <HAL_GetTick>
 80051b2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80051b6:	f7fd fa91 	bl	80026dc <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e3e5      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80051c8:	4b73      	ldr	r3, [pc, #460]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80051d4:	4b70      	ldr	r3, [pc, #448]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	041b      	lsls	r3, r3, #16
 80051e2:	496d      	ldr	r1, [pc, #436]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	618b      	str	r3, [r1, #24]
 80051e8:	e018      	b.n	800521c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80051ea:	4b6b      	ldr	r3, [pc, #428]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a6a      	ldr	r2, [pc, #424]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80051f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f6:	f7fd fa71 	bl	80026dc <HAL_GetTick>
 80051fa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80051fe:	f7fd fa6d 	bl	80026dc <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e3c1      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005210:	4b61      	ldr	r3, [pc, #388]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f0      	bne.n	80051fe <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80a0 	beq.w	800536a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	2b10      	cmp	r3, #16
 800522e:	d005      	beq.n	800523c <HAL_RCC_OscConfig+0x10c>
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	2b18      	cmp	r3, #24
 8005234:	d109      	bne.n	800524a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d106      	bne.n	800524a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f040 8092 	bne.w	800536a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e3a4      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005252:	d106      	bne.n	8005262 <HAL_RCC_OscConfig+0x132>
 8005254:	4b50      	ldr	r3, [pc, #320]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a4f      	ldr	r2, [pc, #316]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 800525a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	e058      	b.n	8005314 <HAL_RCC_OscConfig+0x1e4>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d112      	bne.n	8005290 <HAL_RCC_OscConfig+0x160>
 800526a:	4b4b      	ldr	r3, [pc, #300]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a4a      	ldr	r2, [pc, #296]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 8005270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	4b48      	ldr	r3, [pc, #288]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a47      	ldr	r2, [pc, #284]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 800527c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	4b45      	ldr	r3, [pc, #276]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a44      	ldr	r2, [pc, #272]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 8005288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	e041      	b.n	8005314 <HAL_RCC_OscConfig+0x1e4>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005298:	d112      	bne.n	80052c0 <HAL_RCC_OscConfig+0x190>
 800529a:	4b3f      	ldr	r3, [pc, #252]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a3e      	ldr	r2, [pc, #248]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80052a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	4b3c      	ldr	r3, [pc, #240]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a3b      	ldr	r2, [pc, #236]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80052ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	4b39      	ldr	r3, [pc, #228]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a38      	ldr	r2, [pc, #224]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80052b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052bc:	6013      	str	r3, [r2, #0]
 80052be:	e029      	b.n	8005314 <HAL_RCC_OscConfig+0x1e4>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80052c8:	d112      	bne.n	80052f0 <HAL_RCC_OscConfig+0x1c0>
 80052ca:	4b33      	ldr	r3, [pc, #204]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a32      	ldr	r2, [pc, #200]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80052d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	4b30      	ldr	r3, [pc, #192]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a2f      	ldr	r2, [pc, #188]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80052dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	4b2d      	ldr	r3, [pc, #180]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a2c      	ldr	r2, [pc, #176]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80052e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e011      	b.n	8005314 <HAL_RCC_OscConfig+0x1e4>
 80052f0:	4b29      	ldr	r3, [pc, #164]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a28      	ldr	r2, [pc, #160]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80052f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	4b26      	ldr	r3, [pc, #152]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a25      	ldr	r2, [pc, #148]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 8005302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	4b23      	ldr	r3, [pc, #140]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a22      	ldr	r2, [pc, #136]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 800530e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d013      	beq.n	8005344 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531c:	f7fd f9de 	bl	80026dc <HAL_GetTick>
 8005320:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005324:	f7fd f9da 	bl	80026dc <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b64      	cmp	r3, #100	; 0x64
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e32e      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005336:	4b18      	ldr	r3, [pc, #96]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0f0      	beq.n	8005324 <HAL_RCC_OscConfig+0x1f4>
 8005342:	e012      	b.n	800536a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005344:	f7fd f9ca 	bl	80026dc <HAL_GetTick>
 8005348:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800534c:	f7fd f9c6 	bl	80026dc <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	; 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e31a      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800535e:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <HAL_RCC_OscConfig+0x268>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f0      	bne.n	800534c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 809a 	beq.w	80054ac <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <HAL_RCC_OscConfig+0x25a>
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	2b18      	cmp	r3, #24
 8005382:	d149      	bne.n	8005418 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d146      	bne.n	8005418 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e2fe      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
 8005396:	bf00      	nop
 8005398:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d11c      	bne.n	80053dc <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80053a2:	4b9a      	ldr	r3, [pc, #616]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0218 	and.w	r2, r3, #24
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d014      	beq.n	80053dc <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80053b2:	4b96      	ldr	r3, [pc, #600]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f023 0218 	bic.w	r2, r3, #24
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	4993      	ldr	r1, [pc, #588]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80053c4:	f000 fdd0 	bl	8005f68 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053c8:	4b91      	ldr	r3, [pc, #580]	; (8005610 <HAL_RCC_OscConfig+0x4e0>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fd f93b 	bl	8002648 <HAL_InitTick>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e2db      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053dc:	f7fd f97e 	bl	80026dc <HAL_GetTick>
 80053e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80053e4:	f7fd f97a 	bl	80026dc <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e2ce      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053f6:	4b85      	ldr	r3, [pc, #532]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005402:	4b82      	ldr	r3, [pc, #520]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	041b      	lsls	r3, r3, #16
 8005410:	497e      	ldr	r1, [pc, #504]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 8005412:	4313      	orrs	r3, r2
 8005414:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005416:	e049      	b.n	80054ac <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d02c      	beq.n	800547a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005420:	4b7a      	ldr	r3, [pc, #488]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f023 0218 	bic.w	r2, r3, #24
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	4977      	ldr	r1, [pc, #476]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 800542e:	4313      	orrs	r3, r2
 8005430:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8005432:	4b76      	ldr	r3, [pc, #472]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a75      	ldr	r2, [pc, #468]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543e:	f7fd f94d 	bl	80026dc <HAL_GetTick>
 8005442:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005446:	f7fd f949 	bl	80026dc <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e29d      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005458:	4b6c      	ldr	r3, [pc, #432]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005464:	4b69      	ldr	r3, [pc, #420]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	041b      	lsls	r3, r3, #16
 8005472:	4966      	ldr	r1, [pc, #408]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 8005474:	4313      	orrs	r3, r2
 8005476:	610b      	str	r3, [r1, #16]
 8005478:	e018      	b.n	80054ac <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547a:	4b64      	ldr	r3, [pc, #400]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a63      	ldr	r2, [pc, #396]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 8005480:	f023 0301 	bic.w	r3, r3, #1
 8005484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005486:	f7fd f929 	bl	80026dc <HAL_GetTick>
 800548a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800548e:	f7fd f925 	bl	80026dc <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e279      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054a0:	4b5a      	ldr	r3, [pc, #360]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1f0      	bne.n	800548e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d03c      	beq.n	8005532 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01c      	beq.n	80054fa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054c0:	4b52      	ldr	r3, [pc, #328]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80054c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054c6:	4a51      	ldr	r2, [pc, #324]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80054c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d0:	f7fd f904 	bl	80026dc <HAL_GetTick>
 80054d4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80054d8:	f7fd f900 	bl	80026dc <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e254      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80054ea:	4b48      	ldr	r3, [pc, #288]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80054ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0ef      	beq.n	80054d8 <HAL_RCC_OscConfig+0x3a8>
 80054f8:	e01b      	b.n	8005532 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054fa:	4b44      	ldr	r3, [pc, #272]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80054fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005500:	4a42      	ldr	r2, [pc, #264]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 8005502:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005506:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550a:	f7fd f8e7 	bl	80026dc <HAL_GetTick>
 800550e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005512:	f7fd f8e3 	bl	80026dc <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e237      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005524:	4b39      	ldr	r3, [pc, #228]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 8005526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800552a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1ef      	bne.n	8005512 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 80d2 	beq.w	80056e4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005540:	4b34      	ldr	r3, [pc, #208]	; (8005614 <HAL_RCC_OscConfig+0x4e4>)
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d118      	bne.n	800557e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800554c:	4b31      	ldr	r3, [pc, #196]	; (8005614 <HAL_RCC_OscConfig+0x4e4>)
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	4a30      	ldr	r2, [pc, #192]	; (8005614 <HAL_RCC_OscConfig+0x4e4>)
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005558:	f7fd f8c0 	bl	80026dc <HAL_GetTick>
 800555c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005560:	f7fd f8bc 	bl	80026dc <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e210      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005572:	4b28      	ldr	r3, [pc, #160]	; (8005614 <HAL_RCC_OscConfig+0x4e4>)
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d108      	bne.n	8005598 <HAL_RCC_OscConfig+0x468>
 8005586:	4b21      	ldr	r3, [pc, #132]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 8005588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800558c:	4a1f      	ldr	r2, [pc, #124]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005596:	e074      	b.n	8005682 <HAL_RCC_OscConfig+0x552>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d118      	bne.n	80055d2 <HAL_RCC_OscConfig+0x4a2>
 80055a0:	4b1a      	ldr	r3, [pc, #104]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80055a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055a6:	4a19      	ldr	r2, [pc, #100]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80055b0:	4b16      	ldr	r3, [pc, #88]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80055b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055b6:	4a15      	ldr	r2, [pc, #84]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80055b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80055c0:	4b12      	ldr	r3, [pc, #72]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80055c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055c6:	4a11      	ldr	r2, [pc, #68]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80055c8:	f023 0304 	bic.w	r3, r3, #4
 80055cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80055d0:	e057      	b.n	8005682 <HAL_RCC_OscConfig+0x552>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d11e      	bne.n	8005618 <HAL_RCC_OscConfig+0x4e8>
 80055da:	4b0c      	ldr	r3, [pc, #48]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80055dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055e0:	4a0a      	ldr	r2, [pc, #40]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80055e2:	f043 0304 	orr.w	r3, r3, #4
 80055e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80055ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055f0:	4a06      	ldr	r2, [pc, #24]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80055f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80055fa:	4b04      	ldr	r3, [pc, #16]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 80055fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005600:	4a02      	ldr	r2, [pc, #8]	; (800560c <HAL_RCC_OscConfig+0x4dc>)
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800560a:	e03a      	b.n	8005682 <HAL_RCC_OscConfig+0x552>
 800560c:	44020c00 	.word	0x44020c00
 8005610:	20000004 	.word	0x20000004
 8005614:	44020800 	.word	0x44020800
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b85      	cmp	r3, #133	; 0x85
 800561e:	d118      	bne.n	8005652 <HAL_RCC_OscConfig+0x522>
 8005620:	4ba2      	ldr	r3, [pc, #648]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005626:	4aa1      	ldr	r2, [pc, #644]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005628:	f043 0304 	orr.w	r3, r3, #4
 800562c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005630:	4b9e      	ldr	r3, [pc, #632]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005636:	4a9d      	ldr	r2, [pc, #628]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005640:	4b9a      	ldr	r3, [pc, #616]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005642:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005646:	4a99      	ldr	r2, [pc, #612]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005648:	f043 0301 	orr.w	r3, r3, #1
 800564c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005650:	e017      	b.n	8005682 <HAL_RCC_OscConfig+0x552>
 8005652:	4b96      	ldr	r3, [pc, #600]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005654:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005658:	4a94      	ldr	r2, [pc, #592]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 800565a:	f023 0301 	bic.w	r3, r3, #1
 800565e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005662:	4b92      	ldr	r3, [pc, #584]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005668:	4a90      	ldr	r2, [pc, #576]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 800566a:	f023 0304 	bic.w	r3, r3, #4
 800566e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005672:	4b8e      	ldr	r3, [pc, #568]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005678:	4a8c      	ldr	r2, [pc, #560]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 800567a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800567e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d016      	beq.n	80056b8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568a:	f7fd f827 	bl	80026dc <HAL_GetTick>
 800568e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005690:	e00a      	b.n	80056a8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005692:	f7fd f823 	bl	80026dc <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e175      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056a8:	4b80      	ldr	r3, [pc, #512]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 80056aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0ed      	beq.n	8005692 <HAL_RCC_OscConfig+0x562>
 80056b6:	e015      	b.n	80056e4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056b8:	f7fd f810 	bl	80026dc <HAL_GetTick>
 80056bc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056be:	e00a      	b.n	80056d6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c0:	f7fd f80c 	bl	80026dc <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e15e      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056d6:	4b75      	ldr	r3, [pc, #468]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 80056d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ed      	bne.n	80056c0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d036      	beq.n	800575e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d019      	beq.n	800572c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056f8:	4b6c      	ldr	r3, [pc, #432]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a6b      	ldr	r2, [pc, #428]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 80056fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005704:	f7fc ffea 	bl	80026dc <HAL_GetTick>
 8005708:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800570c:	f7fc ffe6 	bl	80026dc <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e13a      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800571e:	4b63      	ldr	r3, [pc, #396]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0x5dc>
 800572a:	e018      	b.n	800575e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800572c:	4b5f      	ldr	r3, [pc, #380]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a5e      	ldr	r2, [pc, #376]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005736:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005738:	f7fc ffd0 	bl	80026dc <HAL_GetTick>
 800573c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005740:	f7fc ffcc 	bl	80026dc <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e120      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005752:	4b56      	ldr	r3, [pc, #344]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 8115 	beq.w	8005992 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	2b18      	cmp	r3, #24
 800576c:	f000 80af 	beq.w	80058ce <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	2b02      	cmp	r3, #2
 8005776:	f040 8086 	bne.w	8005886 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800577a:	4b4c      	ldr	r3, [pc, #304]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a4b      	ldr	r2, [pc, #300]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005786:	f7fc ffa9 	bl	80026dc <HAL_GetTick>
 800578a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800578e:	f7fc ffa5 	bl	80026dc <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e0f9      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80057a0:	4b42      	ldr	r3, [pc, #264]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1f0      	bne.n	800578e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80057ac:	4b3f      	ldr	r3, [pc, #252]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80057b4:	f023 0303 	bic.w	r3, r3, #3
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80057c0:	0212      	lsls	r2, r2, #8
 80057c2:	430a      	orrs	r2, r1
 80057c4:	4939      	ldr	r1, [pc, #228]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	628b      	str	r3, [r1, #40]	; 0x28
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ce:	3b01      	subs	r3, #1
 80057d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	3b01      	subs	r3, #1
 80057da:	025b      	lsls	r3, r3, #9
 80057dc:	b29b      	uxth	r3, r3
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e4:	3b01      	subs	r3, #1
 80057e6:	041b      	lsls	r3, r3, #16
 80057e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	3b01      	subs	r3, #1
 80057f4:	061b      	lsls	r3, r3, #24
 80057f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057fa:	492c      	ldr	r1, [pc, #176]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005800:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	4a29      	ldr	r2, [pc, #164]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005806:	f023 0310 	bic.w	r3, r3, #16
 800580a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005810:	4a26      	ldr	r2, [pc, #152]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005816:	4b25      	ldr	r3, [pc, #148]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	4a24      	ldr	r2, [pc, #144]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 800581c:	f043 0310 	orr.w	r3, r3, #16
 8005820:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8005822:	4b22      	ldr	r3, [pc, #136]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	f023 020c 	bic.w	r2, r3, #12
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582e:	491f      	ldr	r1, [pc, #124]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005830:	4313      	orrs	r3, r2
 8005832:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005834:	4b1d      	ldr	r3, [pc, #116]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	f023 0220 	bic.w	r2, r3, #32
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005840:	491a      	ldr	r1, [pc, #104]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005842:	4313      	orrs	r3, r2
 8005844:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005846:	4b19      	ldr	r3, [pc, #100]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	4a18      	ldr	r2, [pc, #96]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 800584c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005850:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8005852:	4b16      	ldr	r3, [pc, #88]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a15      	ldr	r2, [pc, #84]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005858:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800585c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585e:	f7fc ff3d 	bl	80026dc <HAL_GetTick>
 8005862:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005864:	e008      	b.n	8005878 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005866:	f7fc ff39 	bl	80026dc <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e08d      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005878:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0f0      	beq.n	8005866 <HAL_RCC_OscConfig+0x736>
 8005884:	e085      	b.n	8005992 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8005886:	4b09      	ldr	r3, [pc, #36]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a08      	ldr	r2, [pc, #32]	; (80058ac <HAL_RCC_OscConfig+0x77c>)
 800588c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005892:	f7fc ff23 	bl	80026dc <HAL_GetTick>
 8005896:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005898:	e00a      	b.n	80058b0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800589a:	f7fc ff1f 	bl	80026dc <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d903      	bls.n	80058b0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e073      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
 80058ac:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80058b0:	4b3a      	ldr	r3, [pc, #232]	; (800599c <HAL_RCC_OscConfig+0x86c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1ee      	bne.n	800589a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80058bc:	4b37      	ldr	r3, [pc, #220]	; (800599c <HAL_RCC_OscConfig+0x86c>)
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	4a36      	ldr	r2, [pc, #216]	; (800599c <HAL_RCC_OscConfig+0x86c>)
 80058c2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	6293      	str	r3, [r2, #40]	; 0x28
 80058cc:	e061      	b.n	8005992 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80058ce:	4b33      	ldr	r3, [pc, #204]	; (800599c <HAL_RCC_OscConfig+0x86c>)
 80058d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058d4:	4b31      	ldr	r3, [pc, #196]	; (800599c <HAL_RCC_OscConfig+0x86c>)
 80058d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d031      	beq.n	8005946 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f003 0203 	and.w	r2, r3, #3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d12a      	bne.n	8005946 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	0a1b      	lsrs	r3, r3, #8
 80058f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d122      	bne.n	8005946 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800590c:	429a      	cmp	r2, r3
 800590e:	d11a      	bne.n	8005946 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	0a5b      	lsrs	r3, r3, #9
 8005914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800591e:	429a      	cmp	r2, r3
 8005920:	d111      	bne.n	8005946 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	0c1b      	lsrs	r3, r3, #16
 8005926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005930:	429a      	cmp	r2, r3
 8005932:	d108      	bne.n	8005946 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	0e1b      	lsrs	r3, r3, #24
 8005938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005940:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005942:	429a      	cmp	r2, r3
 8005944:	d001      	beq.n	800594a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e024      	b.n	8005994 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800594a:	4b14      	ldr	r3, [pc, #80]	; (800599c <HAL_RCC_OscConfig+0x86c>)
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	08db      	lsrs	r3, r3, #3
 8005950:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005958:	429a      	cmp	r2, r3
 800595a:	d01a      	beq.n	8005992 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800595c:	4b0f      	ldr	r3, [pc, #60]	; (800599c <HAL_RCC_OscConfig+0x86c>)
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	4a0e      	ldr	r2, [pc, #56]	; (800599c <HAL_RCC_OscConfig+0x86c>)
 8005962:	f023 0310 	bic.w	r3, r3, #16
 8005966:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005968:	f7fc feb8 	bl	80026dc <HAL_GetTick>
 800596c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800596e:	bf00      	nop
 8005970:	f7fc feb4 	bl	80026dc <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	4293      	cmp	r3, r2
 800597a:	d0f9      	beq.n	8005970 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005980:	4a06      	ldr	r2, [pc, #24]	; (800599c <HAL_RCC_OscConfig+0x86c>)
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005986:	4b05      	ldr	r3, [pc, #20]	; (800599c <HAL_RCC_OscConfig+0x86c>)
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	4a04      	ldr	r2, [pc, #16]	; (800599c <HAL_RCC_OscConfig+0x86c>)
 800598c:	f043 0310 	orr.w	r3, r3, #16
 8005990:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3720      	adds	r7, #32
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	44020c00 	.word	0x44020c00

080059a0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e19e      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059b4:	4b83      	ldr	r3, [pc, #524]	; (8005bc4 <HAL_RCC_ClockConfig+0x224>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d910      	bls.n	80059e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c2:	4b80      	ldr	r3, [pc, #512]	; (8005bc4 <HAL_RCC_ClockConfig+0x224>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f023 020f 	bic.w	r2, r3, #15
 80059ca:	497e      	ldr	r1, [pc, #504]	; (8005bc4 <HAL_RCC_ClockConfig+0x224>)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d2:	4b7c      	ldr	r3, [pc, #496]	; (8005bc4 <HAL_RCC_ClockConfig+0x224>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d001      	beq.n	80059e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e186      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d012      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695a      	ldr	r2, [r3, #20]
 80059f4:	4b74      	ldr	r3, [pc, #464]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	0a1b      	lsrs	r3, r3, #8
 80059fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d909      	bls.n	8005a16 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005a02:	4b71      	ldr	r3, [pc, #452]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	496d      	ldr	r1, [pc, #436]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d012      	beq.n	8005a48 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	4b68      	ldr	r3, [pc, #416]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	091b      	lsrs	r3, r3, #4
 8005a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d909      	bls.n	8005a48 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005a34:	4b64      	ldr	r3, [pc, #400]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	4961      	ldr	r1, [pc, #388]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d010      	beq.n	8005a76 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68da      	ldr	r2, [r3, #12]
 8005a58:	4b5b      	ldr	r3, [pc, #364]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d908      	bls.n	8005a76 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005a64:	4b58      	ldr	r3, [pc, #352]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	4955      	ldr	r1, [pc, #340]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d010      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	4b50      	ldr	r3, [pc, #320]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d908      	bls.n	8005aa4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005a92:	4b4d      	ldr	r3, [pc, #308]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f023 020f 	bic.w	r2, r3, #15
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	494a      	ldr	r1, [pc, #296]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8093 	beq.w	8005bd8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d107      	bne.n	8005aca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005aba:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d121      	bne.n	8005b0a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e113      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d107      	bne.n	8005ae2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ad2:	4b3d      	ldr	r3, [pc, #244]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d115      	bne.n	8005b0a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e107      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d107      	bne.n	8005afa <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005aea:	4b37      	ldr	r3, [pc, #220]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d109      	bne.n	8005b0a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e0fb      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005afa:	4b33      	ldr	r3, [pc, #204]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e0f3      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8005b0a:	4b2f      	ldr	r3, [pc, #188]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f023 0203 	bic.w	r2, r3, #3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	492c      	ldr	r1, [pc, #176]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1c:	f7fc fdde 	bl	80026dc <HAL_GetTick>
 8005b20:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d112      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b2a:	e00a      	b.n	8005b42 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005b2c:	f7fc fdd6 	bl	80026dc <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e0d7      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b42:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f003 0318 	and.w	r3, r3, #24
 8005b4a:	2b18      	cmp	r3, #24
 8005b4c:	d1ee      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x18c>
 8005b4e:	e043      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d112      	bne.n	8005b7e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b58:	e00a      	b.n	8005b70 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005b5a:	f7fc fdbf 	bl	80026dc <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e0c0      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b70:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f003 0318 	and.w	r3, r3, #24
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d1ee      	bne.n	8005b5a <HAL_RCC_ClockConfig+0x1ba>
 8005b7c:	e02c      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d122      	bne.n	8005bcc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005b86:	e00a      	b.n	8005b9e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005b88:	f7fc fda8 	bl	80026dc <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e0a9      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <HAL_RCC_ClockConfig+0x228>)
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f003 0318 	and.w	r3, r3, #24
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d1ee      	bne.n	8005b88 <HAL_RCC_ClockConfig+0x1e8>
 8005baa:	e015      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005bac:	f7fc fd96 	bl	80026dc <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d906      	bls.n	8005bcc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e097      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x352>
 8005bc2:	bf00      	nop
 8005bc4:	40022000 	.word	0x40022000
 8005bc8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bcc:	4b4b      	ldr	r3, [pc, #300]	; (8005cfc <HAL_RCC_ClockConfig+0x35c>)
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	f003 0318 	and.w	r3, r3, #24
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e9      	bne.n	8005bac <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d010      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	4b44      	ldr	r3, [pc, #272]	; (8005cfc <HAL_RCC_ClockConfig+0x35c>)
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d208      	bcs.n	8005c06 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005bf4:	4b41      	ldr	r3, [pc, #260]	; (8005cfc <HAL_RCC_ClockConfig+0x35c>)
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	f023 020f 	bic.w	r2, r3, #15
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	493e      	ldr	r1, [pc, #248]	; (8005cfc <HAL_RCC_ClockConfig+0x35c>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c06:	4b3e      	ldr	r3, [pc, #248]	; (8005d00 <HAL_RCC_ClockConfig+0x360>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d210      	bcs.n	8005c36 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c14:	4b3a      	ldr	r3, [pc, #232]	; (8005d00 <HAL_RCC_ClockConfig+0x360>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f023 020f 	bic.w	r2, r3, #15
 8005c1c:	4938      	ldr	r1, [pc, #224]	; (8005d00 <HAL_RCC_ClockConfig+0x360>)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c24:	4b36      	ldr	r3, [pc, #216]	; (8005d00 <HAL_RCC_ClockConfig+0x360>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 030f 	and.w	r3, r3, #15
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d001      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e05d      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0304 	and.w	r3, r3, #4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d010      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	4b2d      	ldr	r3, [pc, #180]	; (8005cfc <HAL_RCC_ClockConfig+0x35c>)
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d208      	bcs.n	8005c64 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005c52:	4b2a      	ldr	r3, [pc, #168]	; (8005cfc <HAL_RCC_ClockConfig+0x35c>)
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	4927      	ldr	r1, [pc, #156]	; (8005cfc <HAL_RCC_ClockConfig+0x35c>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d012      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	4b21      	ldr	r3, [pc, #132]	; (8005cfc <HAL_RCC_ClockConfig+0x35c>)
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	091b      	lsrs	r3, r3, #4
 8005c7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d209      	bcs.n	8005c96 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005c82:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <HAL_RCC_ClockConfig+0x35c>)
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	491a      	ldr	r1, [pc, #104]	; (8005cfc <HAL_RCC_ClockConfig+0x35c>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d012      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	695a      	ldr	r2, [r3, #20]
 8005ca6:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <HAL_RCC_ClockConfig+0x35c>)
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	0a1b      	lsrs	r3, r3, #8
 8005cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d209      	bcs.n	8005cc8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005cb4:	4b11      	ldr	r3, [pc, #68]	; (8005cfc <HAL_RCC_ClockConfig+0x35c>)
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	490e      	ldr	r1, [pc, #56]	; (8005cfc <HAL_RCC_ClockConfig+0x35c>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005cc8:	f000 f822 	bl	8005d10 <HAL_RCC_GetSysClockFreq>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <HAL_RCC_ClockConfig+0x35c>)
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	490b      	ldr	r1, [pc, #44]	; (8005d04 <HAL_RCC_ClockConfig+0x364>)
 8005cd8:	5ccb      	ldrb	r3, [r1, r3]
 8005cda:	fa22 f303 	lsr.w	r3, r2, r3
 8005cde:	4a0a      	ldr	r2, [pc, #40]	; (8005d08 <HAL_RCC_ClockConfig+0x368>)
 8005ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005ce2:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <HAL_RCC_ClockConfig+0x36c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fc fcae 	bl	8002648 <HAL_InitTick>
 8005cec:	4603      	mov	r3, r0
 8005cee:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005cf0:	7afb      	ldrb	r3, [r7, #11]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	44020c00 	.word	0x44020c00
 8005d00:	40022000 	.word	0x40022000
 8005d04:	0800cecc 	.word	0x0800cecc
 8005d08:	20000000 	.word	0x20000000
 8005d0c:	20000004 	.word	0x20000004

08005d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b089      	sub	sp, #36	; 0x24
 8005d14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8005d16:	4b8c      	ldr	r3, [pc, #560]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f003 0318 	and.w	r3, r3, #24
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d102      	bne.n	8005d28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d22:	4b8a      	ldr	r3, [pc, #552]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x23c>)
 8005d24:	61fb      	str	r3, [r7, #28]
 8005d26:	e107      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d28:	4b87      	ldr	r3, [pc, #540]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f003 0318 	and.w	r3, r3, #24
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d112      	bne.n	8005d5a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005d34:	4b84      	ldr	r3, [pc, #528]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0320 	and.w	r3, r3, #32
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d009      	beq.n	8005d54 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d40:	4b81      	ldr	r3, [pc, #516]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	08db      	lsrs	r3, r3, #3
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	4a81      	ldr	r2, [pc, #516]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x240>)
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d50:	61fb      	str	r3, [r7, #28]
 8005d52:	e0f1      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005d54:	4b7e      	ldr	r3, [pc, #504]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x240>)
 8005d56:	61fb      	str	r3, [r7, #28]
 8005d58:	e0ee      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d5a:	4b7b      	ldr	r3, [pc, #492]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f003 0318 	and.w	r3, r3, #24
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d102      	bne.n	8005d6c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d66:	4b7b      	ldr	r3, [pc, #492]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x244>)
 8005d68:	61fb      	str	r3, [r7, #28]
 8005d6a:	e0e5      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d6c:	4b76      	ldr	r3, [pc, #472]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f003 0318 	and.w	r3, r3, #24
 8005d74:	2b18      	cmp	r3, #24
 8005d76:	f040 80dd 	bne.w	8005f34 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005d7a:	4b73      	ldr	r3, [pc, #460]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7e:	f003 0303 	and.w	r3, r3, #3
 8005d82:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005d84:	4b70      	ldr	r3, [pc, #448]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	0a1b      	lsrs	r3, r3, #8
 8005d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005d90:	4b6d      	ldr	r3, [pc, #436]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d94:	091b      	lsrs	r3, r3, #4
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005d9c:	4b6a      	ldr	r3, [pc, #424]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8005da0:	08db      	lsrs	r3, r3, #3
 8005da2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	fb02 f303 	mul.w	r3, r2, r3
 8005dac:	ee07 3a90 	vmov	s15, r3
 8005db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 80b7 	beq.w	8005f2e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d003      	beq.n	8005dce <HAL_RCC_GetSysClockFreq+0xbe>
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d056      	beq.n	8005e7a <HAL_RCC_GetSysClockFreq+0x16a>
 8005dcc:	e077      	b.n	8005ebe <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005dce:	4b5e      	ldr	r3, [pc, #376]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0320 	and.w	r3, r3, #32
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d02d      	beq.n	8005e36 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005dda:	4b5b      	ldr	r3, [pc, #364]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	08db      	lsrs	r3, r3, #3
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	4a5a      	ldr	r2, [pc, #360]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x240>)
 8005de6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dea:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e04:	4b50      	ldr	r3, [pc, #320]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0c:	ee07 3a90 	vmov	s15, r3
 8005e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e14:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e18:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005f58 <HAL_RCC_GetSysClockFreq+0x248>
 8005e1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e20:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e28:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e30:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005e34:	e065      	b.n	8005f02 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e40:	eddf 6a46 	vldr	s13, [pc, #280]	; 8005f5c <HAL_RCC_GetSysClockFreq+0x24c>
 8005e44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e48:	4b3f      	ldr	r3, [pc, #252]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e50:	ee07 3a90 	vmov	s15, r3
 8005e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e58:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e5c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005f58 <HAL_RCC_GetSysClockFreq+0x248>
 8005e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e74:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005e78:	e043      	b.n	8005f02 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	ee07 3a90 	vmov	s15, r3
 8005e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e84:	eddf 6a36 	vldr	s13, [pc, #216]	; 8005f60 <HAL_RCC_GetSysClockFreq+0x250>
 8005e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8c:	4b2e      	ldr	r3, [pc, #184]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e94:	ee07 3a90 	vmov	s15, r3
 8005e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ea0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005f58 <HAL_RCC_GetSysClockFreq+0x248>
 8005ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005eac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8005ebc:	e021      	b.n	8005f02 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	ee07 3a90 	vmov	s15, r3
 8005ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec8:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005f64 <HAL_RCC_GetSysClockFreq+0x254>
 8005ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ed0:	4b1d      	ldr	r3, [pc, #116]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed8:	ee07 3a90 	vmov	s15, r3
 8005edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ee0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ee4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005f58 <HAL_RCC_GetSysClockFreq+0x248>
 8005ee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ef0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005f00:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8005f02:	4b11      	ldr	r3, [pc, #68]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x238>)
 8005f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f06:	0a5b      	lsrs	r3, r3, #9
 8005f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f1a:	edd7 6a06 	vldr	s13, [r7, #24]
 8005f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f26:	ee17 3a90 	vmov	r3, s15
 8005f2a:	61fb      	str	r3, [r7, #28]
 8005f2c:	e004      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61fb      	str	r3, [r7, #28]
 8005f32:	e001      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005f34:	4b06      	ldr	r3, [pc, #24]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x240>)
 8005f36:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005f38:	69fb      	ldr	r3, [r7, #28]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3724      	adds	r7, #36	; 0x24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	44020c00 	.word	0x44020c00
 8005f4c:	003d0900 	.word	0x003d0900
 8005f50:	03d09000 	.word	0x03d09000
 8005f54:	007a1200 	.word	0x007a1200
 8005f58:	46000000 	.word	0x46000000
 8005f5c:	4c742400 	.word	0x4c742400
 8005f60:	4af42400 	.word	0x4af42400
 8005f64:	4a742400 	.word	0x4a742400

08005f68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005f6c:	f7ff fed0 	bl	8005d10 <HAL_RCC_GetSysClockFreq>
 8005f70:	4602      	mov	r2, r0
 8005f72:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005f74:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005f76:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005f7a:	4907      	ldr	r1, [pc, #28]	; (8005f98 <HAL_RCC_GetHCLKFreq+0x30>)
 8005f7c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005f7e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005f82:	fa22 f303 	lsr.w	r3, r2, r3
 8005f86:	4a05      	ldr	r2, [pc, #20]	; (8005f9c <HAL_RCC_GetHCLKFreq+0x34>)
 8005f88:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8005f8a:	4b04      	ldr	r3, [pc, #16]	; (8005f9c <HAL_RCC_GetHCLKFreq+0x34>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	44020c00 	.word	0x44020c00
 8005f98:	0800cecc 	.word	0x0800cecc
 8005f9c:	20000000 	.word	0x20000000

08005fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8005fa4:	f7ff ffe0 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	091b      	lsrs	r3, r3, #4
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	4904      	ldr	r1, [pc, #16]	; (8005fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fb6:	5ccb      	ldrb	r3, [r1, r3]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	44020c00 	.word	0x44020c00
 8005fc8:	0800cedc 	.word	0x0800cedc

08005fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8005fd0:	f7ff ffca 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	0a1b      	lsrs	r3, r3, #8
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	4904      	ldr	r1, [pc, #16]	; (8005ff4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fe2:	5ccb      	ldrb	r3, [r1, r3]
 8005fe4:	f003 031f 	and.w	r3, r3, #31
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	44020c00 	.word	0x44020c00
 8005ff4:	0800cedc 	.word	0x0800cedc

08005ff8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8005ffc:	f7ff ffb4 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8006000:	4602      	mov	r2, r0
 8006002:	4b06      	ldr	r3, [pc, #24]	; (800601c <HAL_RCC_GetPCLK3Freq+0x24>)
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	0b1b      	lsrs	r3, r3, #12
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	4904      	ldr	r1, [pc, #16]	; (8006020 <HAL_RCC_GetPCLK3Freq+0x28>)
 800600e:	5ccb      	ldrb	r3, [r1, r3]
 8006010:	f003 031f 	and.w	r3, r3, #31
 8006014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006018:	4618      	mov	r0, r3
 800601a:	bd80      	pop	{r7, pc}
 800601c:	44020c00 	.word	0x44020c00
 8006020:	0800cedc 	.word	0x0800cedc

08006024 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006028:	b0d8      	sub	sp, #352	; 0x160
 800602a:	af00      	add	r7, sp, #0
 800602c:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006030:	2300      	movs	r3, #0
 8006032:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006036:	2300      	movs	r3, #0
 8006038:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800603c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8006048:	2500      	movs	r5, #0
 800604a:	ea54 0305 	orrs.w	r3, r4, r5
 800604e:	d00b      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006050:	4bcd      	ldr	r3, [pc, #820]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006056:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 800605a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800605e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006060:	4ac9      	ldr	r2, [pc, #804]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006062:	430b      	orrs	r3, r1
 8006064:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006068:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	f002 0801 	and.w	r8, r2, #1
 8006074:	f04f 0900 	mov.w	r9, #0
 8006078:	ea58 0309 	orrs.w	r3, r8, r9
 800607c:	d042      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800607e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006084:	2b05      	cmp	r3, #5
 8006086:	d823      	bhi.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8006088:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 800608a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608e:	bf00      	nop
 8006090:	080060d9 	.word	0x080060d9
 8006094:	080060a9 	.word	0x080060a9
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060d9 	.word	0x080060d9
 80060a0:	080060d9 	.word	0x080060d9
 80060a4:	080060d9 	.word	0x080060d9
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060ac:	3308      	adds	r3, #8
 80060ae:	4618      	mov	r0, r3
 80060b0:	f004 feda 	bl	800ae68 <RCCEx_PLL2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80060ba:	e00e      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060c0:	3330      	adds	r3, #48	; 0x30
 80060c2:	4618      	mov	r0, r3
 80060c4:	f004 ff68 	bl	800af98 <RCCEx_PLL3_Config>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80060ce:	e004      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80060d6:	e000      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80060d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10c      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80060e2:	4ba9      	ldr	r3, [pc, #676]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80060e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80060e8:	f023 0107 	bic.w	r1, r3, #7
 80060ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80060f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f2:	4aa5      	ldr	r2, [pc, #660]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80060f4:	430b      	orrs	r3, r1
 80060f6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80060fa:	e003      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060fc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006100:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006104:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f002 0a02 	and.w	sl, r2, #2
 8006110:	f04f 0b00 	mov.w	fp, #0
 8006114:	ea5a 030b 	orrs.w	r3, sl, fp
 8006118:	f000 8088 	beq.w	800622c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800611c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006122:	2b28      	cmp	r3, #40	; 0x28
 8006124:	d868      	bhi.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006126:	a201      	add	r2, pc, #4	; (adr r2, 800612c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	08006201 	.word	0x08006201
 8006130:	080061f9 	.word	0x080061f9
 8006134:	080061f9 	.word	0x080061f9
 8006138:	080061f9 	.word	0x080061f9
 800613c:	080061f9 	.word	0x080061f9
 8006140:	080061f9 	.word	0x080061f9
 8006144:	080061f9 	.word	0x080061f9
 8006148:	080061f9 	.word	0x080061f9
 800614c:	080061d1 	.word	0x080061d1
 8006150:	080061f9 	.word	0x080061f9
 8006154:	080061f9 	.word	0x080061f9
 8006158:	080061f9 	.word	0x080061f9
 800615c:	080061f9 	.word	0x080061f9
 8006160:	080061f9 	.word	0x080061f9
 8006164:	080061f9 	.word	0x080061f9
 8006168:	080061f9 	.word	0x080061f9
 800616c:	080061e5 	.word	0x080061e5
 8006170:	080061f9 	.word	0x080061f9
 8006174:	080061f9 	.word	0x080061f9
 8006178:	080061f9 	.word	0x080061f9
 800617c:	080061f9 	.word	0x080061f9
 8006180:	080061f9 	.word	0x080061f9
 8006184:	080061f9 	.word	0x080061f9
 8006188:	080061f9 	.word	0x080061f9
 800618c:	08006201 	.word	0x08006201
 8006190:	080061f9 	.word	0x080061f9
 8006194:	080061f9 	.word	0x080061f9
 8006198:	080061f9 	.word	0x080061f9
 800619c:	080061f9 	.word	0x080061f9
 80061a0:	080061f9 	.word	0x080061f9
 80061a4:	080061f9 	.word	0x080061f9
 80061a8:	080061f9 	.word	0x080061f9
 80061ac:	08006201 	.word	0x08006201
 80061b0:	080061f9 	.word	0x080061f9
 80061b4:	080061f9 	.word	0x080061f9
 80061b8:	080061f9 	.word	0x080061f9
 80061bc:	080061f9 	.word	0x080061f9
 80061c0:	080061f9 	.word	0x080061f9
 80061c4:	080061f9 	.word	0x080061f9
 80061c8:	080061f9 	.word	0x080061f9
 80061cc:	08006201 	.word	0x08006201
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061d4:	3308      	adds	r3, #8
 80061d6:	4618      	mov	r0, r3
 80061d8:	f004 fe46 	bl	800ae68 <RCCEx_PLL2_Config>
 80061dc:	4603      	mov	r3, r0
 80061de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80061e2:	e00e      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80061e8:	3330      	adds	r3, #48	; 0x30
 80061ea:	4618      	mov	r0, r3
 80061ec:	f004 fed4 	bl	800af98 <RCCEx_PLL3_Config>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80061f6:	e004      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80061fe:	e000      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006202:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10c      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800620a:	4b5f      	ldr	r3, [pc, #380]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800620c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006210:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006214:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800621a:	4a5b      	ldr	r2, [pc, #364]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800621c:	430b      	orrs	r3, r1
 800621e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006222:	e003      	b.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006224:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006228:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800622c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006234:	f002 0304 	and.w	r3, r2, #4
 8006238:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800623c:	2300      	movs	r3, #0
 800623e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8006242:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8006246:	460b      	mov	r3, r1
 8006248:	4313      	orrs	r3, r2
 800624a:	d04e      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800624c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006252:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006256:	d02c      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006258:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800625c:	d825      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x286>
 800625e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006262:	d028      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006268:	d81f      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x286>
 800626a:	2bc0      	cmp	r3, #192	; 0xc0
 800626c:	d025      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x296>
 800626e:	2bc0      	cmp	r3, #192	; 0xc0
 8006270:	d81b      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006272:	2b80      	cmp	r3, #128	; 0x80
 8006274:	d00f      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8006276:	2b80      	cmp	r3, #128	; 0x80
 8006278:	d817      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x286>
 800627a:	2b00      	cmp	r3, #0
 800627c:	d01f      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d113      	bne.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006282:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006286:	3308      	adds	r3, #8
 8006288:	4618      	mov	r0, r3
 800628a:	f004 fded 	bl	800ae68 <RCCEx_PLL2_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006294:	e014      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006296:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800629a:	3330      	adds	r3, #48	; 0x30
 800629c:	4618      	mov	r0, r3
 800629e:	f004 fe7b 	bl	800af98 <RCCEx_PLL3_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80062a8:	e00a      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80062b0:	e006      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80062b2:	bf00      	nop
 80062b4:	e004      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80062b6:	bf00      	nop
 80062b8:	e002      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80062ba:	bf00      	nop
 80062bc:	e000      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80062be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10c      	bne.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80062c8:	4b2f      	ldr	r3, [pc, #188]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80062ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80062ce:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80062d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d8:	4a2b      	ldr	r2, [pc, #172]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80062da:	430b      	orrs	r3, r1
 80062dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80062e0:	e003      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80062e6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80062ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f002 0308 	and.w	r3, r2, #8
 80062f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80062fa:	2300      	movs	r3, #0
 80062fc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8006300:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8006304:	460b      	mov	r3, r1
 8006306:	4313      	orrs	r3, r2
 8006308:	d056      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800630a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800630e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006310:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006314:	d031      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006316:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800631a:	d82a      	bhi.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800631c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006320:	d02d      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006326:	d824      	bhi.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006328:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800632c:	d029      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800632e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006332:	d81e      	bhi.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006338:	d011      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800633a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633e:	d818      	bhi.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d023      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006348:	d113      	bne.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800634a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800634e:	3308      	adds	r3, #8
 8006350:	4618      	mov	r0, r3
 8006352:	f004 fd89 	bl	800ae68 <RCCEx_PLL2_Config>
 8006356:	4603      	mov	r3, r0
 8006358:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800635c:	e017      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800635e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006362:	3330      	adds	r3, #48	; 0x30
 8006364:	4618      	mov	r0, r3
 8006366:	f004 fe17 	bl	800af98 <RCCEx_PLL3_Config>
 800636a:	4603      	mov	r3, r0
 800636c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8006370:	e00d      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006378:	e009      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800637a:	bf00      	nop
 800637c:	e007      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800637e:	bf00      	nop
 8006380:	e005      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006382:	bf00      	nop
 8006384:	e003      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006386:	bf00      	nop
 8006388:	44020c00 	.word	0x44020c00
        break;
 800638c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800638e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10c      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006396:	4bbb      	ldr	r3, [pc, #748]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006398:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800639c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80063a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063a6:	4ab7      	ldr	r2, [pc, #732]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80063a8:	430b      	orrs	r3, r1
 80063aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80063ae:	e003      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80063b4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f002 0310 	and.w	r3, r2, #16
 80063c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80063c8:	2300      	movs	r3, #0
 80063ca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80063ce:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80063d2:	460b      	mov	r3, r1
 80063d4:	4313      	orrs	r3, r2
 80063d6:	d053      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80063d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80063dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063de:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80063e2:	d031      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80063e4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80063e8:	d82a      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80063ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063ee:	d02d      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x428>
 80063f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063f4:	d824      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80063f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063fa:	d029      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80063fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006400:	d81e      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006406:	d011      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800640c:	d818      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800640e:	2b00      	cmp	r3, #0
 8006410:	d020      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8006412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006416:	d113      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006418:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800641c:	3308      	adds	r3, #8
 800641e:	4618      	mov	r0, r3
 8006420:	f004 fd22 	bl	800ae68 <RCCEx_PLL2_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800642a:	e014      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800642c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006430:	3330      	adds	r3, #48	; 0x30
 8006432:	4618      	mov	r0, r3
 8006434:	f004 fdb0 	bl	800af98 <RCCEx_PLL3_Config>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800643e:	e00a      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006446:	e006      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006448:	bf00      	nop
 800644a:	e004      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800644c:	bf00      	nop
 800644e:	e002      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006450:	bf00      	nop
 8006452:	e000      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006456:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10c      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800645e:	4b89      	ldr	r3, [pc, #548]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006460:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006464:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006468:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800646c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800646e:	4a85      	ldr	r2, [pc, #532]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006470:	430b      	orrs	r3, r1
 8006472:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006476:	e003      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006478:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800647c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006480:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006488:	f002 0320 	and.w	r3, r2, #32
 800648c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006490:	2300      	movs	r3, #0
 8006492:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006496:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800649a:	460b      	mov	r3, r1
 800649c:	4313      	orrs	r3, r2
 800649e:	d053      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80064a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a6:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80064aa:	d031      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80064ac:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80064b0:	d82a      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80064b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064b6:	d02d      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80064b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064bc:	d824      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80064be:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80064c2:	d029      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80064c4:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80064c8:	d81e      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80064ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ce:	d011      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80064d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d4:	d818      	bhi.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d020      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80064da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064de:	d113      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064e4:	3308      	adds	r3, #8
 80064e6:	4618      	mov	r0, r3
 80064e8:	f004 fcbe 	bl	800ae68 <RCCEx_PLL2_Config>
 80064ec:	4603      	mov	r3, r0
 80064ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80064f2:	e014      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80064f8:	3330      	adds	r3, #48	; 0x30
 80064fa:	4618      	mov	r0, r3
 80064fc:	f004 fd4c 	bl	800af98 <RCCEx_PLL3_Config>
 8006500:	4603      	mov	r3, r0
 8006502:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8006506:	e00a      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800650e:	e006      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006510:	bf00      	nop
 8006512:	e004      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006514:	bf00      	nop
 8006516:	e002      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006518:	bf00      	nop
 800651a:	e000      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800651c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800651e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10c      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8006526:	4b57      	ldr	r3, [pc, #348]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800652c:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8006530:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006536:	4a53      	ldr	r2, [pc, #332]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006538:	430b      	orrs	r3, r1
 800653a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800653e:	e003      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006540:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006544:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006548:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006550:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006554:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006558:	2300      	movs	r3, #0
 800655a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800655e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8006562:	460b      	mov	r3, r1
 8006564:	4313      	orrs	r3, r2
 8006566:	d053      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8006568:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800656c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006572:	d031      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8006574:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006578:	d82a      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800657a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800657e:	d02d      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8006580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006584:	d824      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006586:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800658a:	d029      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800658c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006590:	d81e      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006592:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006596:	d011      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006598:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800659c:	d818      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d020      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80065a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065a6:	d113      	bne.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065ac:	3308      	adds	r3, #8
 80065ae:	4618      	mov	r0, r3
 80065b0:	f004 fc5a 	bl	800ae68 <RCCEx_PLL2_Config>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80065ba:	e014      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065c0:	3330      	adds	r3, #48	; 0x30
 80065c2:	4618      	mov	r0, r3
 80065c4:	f004 fce8 	bl	800af98 <RCCEx_PLL3_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80065ce:	e00a      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80065d6:	e006      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80065d8:	bf00      	nop
 80065da:	e004      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80065dc:	bf00      	nop
 80065de:	e002      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80065e0:	bf00      	nop
 80065e2:	e000      	b.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80065e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10c      	bne.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80065ee:	4b25      	ldr	r3, [pc, #148]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80065f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80065f4:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 80065f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80065fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065fe:	4a21      	ldr	r2, [pc, #132]	; (8006684 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006600:	430b      	orrs	r3, r1
 8006602:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006606:	e003      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006608:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800660c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006610:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006618:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800661c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006620:	2300      	movs	r3, #0
 8006622:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006626:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 800662a:	460b      	mov	r3, r1
 800662c:	4313      	orrs	r3, r2
 800662e:	d055      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8006630:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006636:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800663a:	d033      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800663c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006640:	d82c      	bhi.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006646:	d02f      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8006648:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800664c:	d826      	bhi.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x678>
 800664e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006652:	d02b      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x688>
 8006654:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006658:	d820      	bhi.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x678>
 800665a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800665e:	d013      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006664:	d81a      	bhi.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006666:	2b00      	cmp	r3, #0
 8006668:	d022      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800666a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800666e:	d115      	bne.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006670:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006674:	3308      	adds	r3, #8
 8006676:	4618      	mov	r0, r3
 8006678:	f004 fbf6 	bl	800ae68 <RCCEx_PLL2_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8006682:	e016      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8006684:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006688:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800668c:	3330      	adds	r3, #48	; 0x30
 800668e:	4618      	mov	r0, r3
 8006690:	f004 fc82 	bl	800af98 <RCCEx_PLL3_Config>
 8006694:	4603      	mov	r3, r0
 8006696:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800669a:	e00a      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80066a2:	e006      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80066a4:	bf00      	nop
 80066a6:	e004      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80066a8:	bf00      	nop
 80066aa:	e002      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80066ac:	bf00      	nop
 80066ae:	e000      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80066b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10c      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80066ba:	4bbb      	ldr	r3, [pc, #748]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80066bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80066c0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80066c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80066c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ca:	4ab7      	ldr	r2, [pc, #732]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80066cc:	430b      	orrs	r3, r1
 80066ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80066d2:	e003      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80066d8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80066dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80066e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80066ec:	2300      	movs	r3, #0
 80066ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80066f2:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80066f6:	460b      	mov	r3, r1
 80066f8:	4313      	orrs	r3, r2
 80066fa:	d053      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80066fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006702:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006706:	d031      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8006708:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800670c:	d82a      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800670e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006712:	d02d      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8006714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006718:	d824      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800671a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800671e:	d029      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8006720:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006724:	d81e      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800672a:	d011      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800672c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006730:	d818      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d020      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8006736:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800673a:	d113      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800673c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006740:	3308      	adds	r3, #8
 8006742:	4618      	mov	r0, r3
 8006744:	f004 fb90 	bl	800ae68 <RCCEx_PLL2_Config>
 8006748:	4603      	mov	r3, r0
 800674a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800674e:	e014      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006750:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006754:	3330      	adds	r3, #48	; 0x30
 8006756:	4618      	mov	r0, r3
 8006758:	f004 fc1e 	bl	800af98 <RCCEx_PLL3_Config>
 800675c:	4603      	mov	r3, r0
 800675e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8006762:	e00a      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800676a:	e006      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800676c:	bf00      	nop
 800676e:	e004      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006770:	bf00      	nop
 8006772:	e002      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006774:	bf00      	nop
 8006776:	e000      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10c      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8006782:	4b89      	ldr	r3, [pc, #548]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006788:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800678c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006792:	4a85      	ldr	r2, [pc, #532]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006794:	430b      	orrs	r3, r1
 8006796:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800679a:	e003      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80067a0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80067a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80067b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80067b4:	2300      	movs	r3, #0
 80067b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067ba:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80067be:	460b      	mov	r3, r1
 80067c0:	4313      	orrs	r3, r2
 80067c2:	d055      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80067c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80067c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067cc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80067d0:	d031      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80067d2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80067d6:	d82a      	bhi.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80067d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067dc:	d02d      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x816>
 80067de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067e2:	d824      	bhi.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80067e4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80067e8:	d029      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80067ea:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80067ee:	d81e      	bhi.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80067f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067f4:	d011      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80067f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067fa:	d818      	bhi.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d020      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8006800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006804:	d113      	bne.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006806:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800680a:	3308      	adds	r3, #8
 800680c:	4618      	mov	r0, r3
 800680e:	f004 fb2b 	bl	800ae68 <RCCEx_PLL2_Config>
 8006812:	4603      	mov	r3, r0
 8006814:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8006818:	e014      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800681a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800681e:	3330      	adds	r3, #48	; 0x30
 8006820:	4618      	mov	r0, r3
 8006822:	f004 fbb9 	bl	800af98 <RCCEx_PLL3_Config>
 8006826:	4603      	mov	r3, r0
 8006828:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800682c:	e00a      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006834:	e006      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006836:	bf00      	nop
 8006838:	e004      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800683a:	bf00      	nop
 800683c:	e002      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800683e:	bf00      	nop
 8006840:	e000      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006844:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10d      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800684c:	4b56      	ldr	r3, [pc, #344]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800684e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006852:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8006856:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800685a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800685e:	4a52      	ldr	r2, [pc, #328]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006860:	430b      	orrs	r3, r1
 8006862:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006866:	e003      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006868:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800686c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8006870:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800687c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006880:	2300      	movs	r3, #0
 8006882:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006886:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800688a:	460b      	mov	r3, r1
 800688c:	4313      	orrs	r3, r2
 800688e:	d044      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8006890:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006898:	2b05      	cmp	r3, #5
 800689a:	d823      	bhi.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800689c:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068ed 	.word	0x080068ed
 80068a8:	080068bd 	.word	0x080068bd
 80068ac:	080068d1 	.word	0x080068d1
 80068b0:	080068ed 	.word	0x080068ed
 80068b4:	080068ed 	.word	0x080068ed
 80068b8:	080068ed 	.word	0x080068ed
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80068c0:	3308      	adds	r3, #8
 80068c2:	4618      	mov	r0, r3
 80068c4:	f004 fad0 	bl	800ae68 <RCCEx_PLL2_Config>
 80068c8:	4603      	mov	r3, r0
 80068ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80068ce:	e00e      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80068d4:	3330      	adds	r3, #48	; 0x30
 80068d6:	4618      	mov	r0, r3
 80068d8:	f004 fb5e 	bl	800af98 <RCCEx_PLL3_Config>
 80068dc:	4603      	mov	r3, r0
 80068de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80068e2:	e004      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80068ea:	e000      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80068ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10d      	bne.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80068f6:	4b2c      	ldr	r3, [pc, #176]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80068f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80068fc:	f023 0107 	bic.w	r1, r3, #7
 8006900:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006908:	4a27      	ldr	r2, [pc, #156]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800690a:	430b      	orrs	r3, r1
 800690c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006910:	e003      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006912:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006916:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800691a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006926:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800692a:	2300      	movs	r3, #0
 800692c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006930:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006934:	460b      	mov	r3, r1
 8006936:	4313      	orrs	r3, r2
 8006938:	d04f      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800693a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800693e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006942:	2b50      	cmp	r3, #80	; 0x50
 8006944:	d029      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006946:	2b50      	cmp	r3, #80	; 0x50
 8006948:	d823      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800694a:	2b40      	cmp	r3, #64	; 0x40
 800694c:	d027      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d81f      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006952:	2b30      	cmp	r3, #48	; 0x30
 8006954:	d025      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8006956:	2b30      	cmp	r3, #48	; 0x30
 8006958:	d81b      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800695a:	2b20      	cmp	r3, #32
 800695c:	d00f      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800695e:	2b20      	cmp	r3, #32
 8006960:	d817      	bhi.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d022      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006966:	2b10      	cmp	r3, #16
 8006968:	d113      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800696a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800696e:	3308      	adds	r3, #8
 8006970:	4618      	mov	r0, r3
 8006972:	f004 fa79 	bl	800ae68 <RCCEx_PLL2_Config>
 8006976:	4603      	mov	r3, r0
 8006978:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800697c:	e017      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800697e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006982:	3330      	adds	r3, #48	; 0x30
 8006984:	4618      	mov	r0, r3
 8006986:	f004 fb07 	bl	800af98 <RCCEx_PLL3_Config>
 800698a:	4603      	mov	r3, r0
 800698c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006990:	e00d      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006998:	e009      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800699a:	bf00      	nop
 800699c:	e007      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800699e:	bf00      	nop
 80069a0:	e005      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80069a2:	bf00      	nop
 80069a4:	e003      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80069a6:	bf00      	nop
 80069a8:	44020c00 	.word	0x44020c00
        break;
 80069ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10d      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80069b6:	4baf      	ldr	r3, [pc, #700]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80069b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80069bc:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80069c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80069c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c8:	4aaa      	ldr	r2, [pc, #680]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80069ca:	430b      	orrs	r3, r1
 80069cc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80069d0:	e003      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80069d6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80069e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80069ea:	2300      	movs	r3, #0
 80069ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80069f0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4313      	orrs	r3, r2
 80069f8:	d055      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80069fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80069fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a02:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006a06:	d031      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8006a08:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006a0c:	d82a      	bhi.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006a0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a12:	d02d      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006a14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a18:	d824      	bhi.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006a1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a1e:	d029      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8006a20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006a24:	d81e      	bhi.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006a26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a2a:	d011      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8006a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a30:	d818      	bhi.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d020      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8006a36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a3a:	d113      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a40:	3308      	adds	r3, #8
 8006a42:	4618      	mov	r0, r3
 8006a44:	f004 fa10 	bl	800ae68 <RCCEx_PLL2_Config>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006a4e:	e014      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a54:	3330      	adds	r3, #48	; 0x30
 8006a56:	4618      	mov	r0, r3
 8006a58:	f004 fa9e 	bl	800af98 <RCCEx_PLL3_Config>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006a62:	e00a      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006a6a:	e006      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006a6c:	bf00      	nop
 8006a6e:	e004      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006a70:	bf00      	nop
 8006a72:	e002      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006a74:	bf00      	nop
 8006a76:	e000      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10d      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006a82:	4b7c      	ldr	r3, [pc, #496]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a88:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006a8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a94:	4a77      	ldr	r2, [pc, #476]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006a96:	430b      	orrs	r3, r1
 8006a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a9c:	e003      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006aa2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006aa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006abc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	d03d      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8006ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ace:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ad2:	d01b      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8006ad4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ad8:	d814      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8006ada:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ade:	d017      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8006ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ae4:	d80e      	bhi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d014      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8006aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aee:	d109      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006af4:	3330      	adds	r3, #48	; 0x30
 8006af6:	4618      	mov	r0, r3
 8006af8:	f004 fa4e 	bl	800af98 <RCCEx_PLL3_Config>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8006b02:	e008      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006b0a:	e004      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006b0c:	bf00      	nop
 8006b0e:	e002      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006b10:	bf00      	nop
 8006b12:	e000      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006b14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10d      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006b1e:	4b55      	ldr	r3, [pc, #340]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006b20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b24:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b30:	4a50      	ldr	r2, [pc, #320]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006b32:	430b      	orrs	r3, r1
 8006b34:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006b38:	e003      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006b3e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006b4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b52:	2300      	movs	r3, #0
 8006b54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b58:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	d03d      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8006b62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b6a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b6e:	d01b      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8006b70:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b74:	d814      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006b76:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b7a:	d017      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8006b7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b80:	d80e      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d014      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8006b86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b8a:	d109      	bne.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006b90:	3330      	adds	r3, #48	; 0x30
 8006b92:	4618      	mov	r0, r3
 8006b94:	f004 fa00 	bl	800af98 <RCCEx_PLL3_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006ba6:	e004      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006ba8:	bf00      	nop
 8006baa:	e002      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006bac:	bf00      	nop
 8006bae:	e000      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bb2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10d      	bne.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006bba:	4b2e      	ldr	r3, [pc, #184]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006bbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bc0:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8006bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bcc:	4a29      	ldr	r2, [pc, #164]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006bd4:	e003      	b.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006bda:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006bde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bf4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	d040      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8006bfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c0a:	d01b      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8006c0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c10:	d814      	bhi.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006c12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c16:	d017      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006c18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c1c:	d80e      	bhi.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d014      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c26:	d109      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c2c:	3330      	adds	r3, #48	; 0x30
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f004 f9b2 	bl	800af98 <RCCEx_PLL3_Config>
 8006c34:	4603      	mov	r3, r0
 8006c36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8006c3a:	e008      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006c42:	e004      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006c44:	bf00      	nop
 8006c46:	e002      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006c48:	bf00      	nop
 8006c4a:	e000      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d110      	bne.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006c56:	4b07      	ldr	r3, [pc, #28]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006c58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c5c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006c60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c68:	4a02      	ldr	r2, [pc, #8]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006c6a:	430b      	orrs	r3, r1
 8006c6c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006c70:	e006      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8006c72:	bf00      	nop
 8006c74:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c78:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006c7c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c88:	2100      	movs	r1, #0
 8006c8a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	d03d      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8006ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ca4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ca8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006cac:	d01b      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006cae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006cb2:	d814      	bhi.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006cb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cb8:	d017      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8006cba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cbe:	d80e      	bhi.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d014      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8006cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cc8:	d109      	bne.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006cce:	3330      	adds	r3, #48	; 0x30
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f004 f961 	bl	800af98 <RCCEx_PLL3_Config>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8006cdc:	e008      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006ce4:	e004      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006ce6:	bf00      	nop
 8006ce8:	e002      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006cea:	bf00      	nop
 8006cec:	e000      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cf0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10d      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006cf8:	4bbe      	ldr	r3, [pc, #760]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006cfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006cfe:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d0a:	4aba      	ldr	r2, [pc, #744]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006d12:	e003      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d14:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006d18:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8006d1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006d28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006d36:	460b      	mov	r3, r1
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	d035      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8006d3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d48:	d015      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8006d4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d4e:	d80e      	bhi.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d012      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8006d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d58:	d109      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d5e:	3330      	adds	r3, #48	; 0x30
 8006d60:	4618      	mov	r0, r3
 8006d62:	f004 f919 	bl	800af98 <RCCEx_PLL3_Config>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8006d6c:	e006      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006d74:	e002      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8006d76:	bf00      	nop
 8006d78:	e000      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8006d7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d7c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10d      	bne.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8006d84:	4b9b      	ldr	r3, [pc, #620]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006d86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d8a:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8006d8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006d92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d96:	4a97      	ldr	r2, [pc, #604]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006d98:	430b      	orrs	r3, r1
 8006d9a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006d9e:	e003      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006da4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006da8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	2100      	movs	r1, #0
 8006db2:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8006db6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dbe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	d00e      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8006dc8:	4b8a      	ldr	r3, [pc, #552]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	4a89      	ldr	r2, [pc, #548]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006dce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dd2:	61d3      	str	r3, [r2, #28]
 8006dd4:	4b87      	ldr	r3, [pc, #540]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006dd6:	69d9      	ldr	r1, [r3, #28]
 8006dd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ddc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006de0:	4a84      	ldr	r2, [pc, #528]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006de2:	430b      	orrs	r3, r1
 8006de4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006de6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006df2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006df6:	2300      	movs	r3, #0
 8006df8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dfc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006e00:	460b      	mov	r3, r1
 8006e02:	4313      	orrs	r3, r2
 8006e04:	d055      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8006e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e0e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006e12:	d031      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8006e14:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006e18:	d82a      	bhi.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e1e:	d02d      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e24:	d824      	bhi.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e2a:	d029      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e30:	d81e      	bhi.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e36:	d011      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8006e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e3c:	d818      	bhi.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d020      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e46:	d113      	bne.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f004 f80a 	bl	800ae68 <RCCEx_PLL2_Config>
 8006e54:	4603      	mov	r3, r0
 8006e56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006e5a:	e014      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006e5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e60:	3330      	adds	r3, #48	; 0x30
 8006e62:	4618      	mov	r0, r3
 8006e64:	f004 f898 	bl	800af98 <RCCEx_PLL3_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006e6e:	e00a      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006e76:	e006      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006e78:	bf00      	nop
 8006e7a:	e004      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006e7c:	bf00      	nop
 8006e7e:	e002      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006e80:	bf00      	nop
 8006e82:	e000      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10d      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006e8e:	4b59      	ldr	r3, [pc, #356]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006e90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006e94:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006e9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ea0:	4a54      	ldr	r2, [pc, #336]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006ea8:	e003      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eaa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006eae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006eb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ec8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	d055      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ed6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006eda:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006ede:	d031      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8006ee0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006ee4:	d82a      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006ee6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eea:	d02d      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8006eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ef0:	d824      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006ef2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ef6:	d029      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8006ef8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006efc:	d81e      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f02:	d011      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8006f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f08:	d818      	bhi.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d020      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f12:	d113      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f18:	3308      	adds	r3, #8
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f003 ffa4 	bl	800ae68 <RCCEx_PLL2_Config>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006f26:	e014      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f2c:	3330      	adds	r3, #48	; 0x30
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f004 f832 	bl	800af98 <RCCEx_PLL3_Config>
 8006f34:	4603      	mov	r3, r0
 8006f36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006f3a:	e00a      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8006f42:	e006      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006f44:	bf00      	nop
 8006f46:	e004      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006f48:	bf00      	nop
 8006f4a:	e002      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006f4c:	bf00      	nop
 8006f4e:	e000      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f52:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10d      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006f5a:	4b26      	ldr	r3, [pc, #152]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006f5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006f60:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f6c:	4a21      	ldr	r2, [pc, #132]	; (8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006f6e:	430b      	orrs	r3, r1
 8006f70:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8006f74:	e003      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f76:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8006f7a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8006f7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	2100      	movs	r1, #0
 8006f88:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8006f8c:	f003 0320 	and.w	r3, r3, #32
 8006f90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	d057      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8006f9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006fa2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006faa:	d033      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8006fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fb0:	d82c      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006fb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fb6:	d02f      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8006fb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fbc:	d826      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006fbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fc2:	d02b      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8006fc4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006fc8:	d820      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006fca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fce:	d013      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006fd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fd4:	d81a      	bhi.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d022      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8006fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fde:	d115      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006fe4:	3308      	adds	r3, #8
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f003 ff3e 	bl	800ae68 <RCCEx_PLL2_Config>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8006ff2:	e016      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8006ff4:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006ffc:	3330      	adds	r3, #48	; 0x30
 8006ffe:	4618      	mov	r0, r3
 8007000:	f003 ffca 	bl	800af98 <RCCEx_PLL3_Config>
 8007004:	4603      	mov	r3, r0
 8007006:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800700a:	e00a      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007012:	e006      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007014:	bf00      	nop
 8007016:	e004      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007018:	bf00      	nop
 800701a:	e002      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800701c:	bf00      	nop
 800701e:	e000      	b.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007022:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10d      	bne.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800702a:	4bbb      	ldr	r3, [pc, #748]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800702c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007030:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007034:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007038:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800703c:	4ab6      	ldr	r2, [pc, #728]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800703e:	430b      	orrs	r3, r1
 8007040:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8007044:	e003      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007046:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800704a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800704e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	2100      	movs	r1, #0
 8007058:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800705c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007060:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007064:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007068:	460b      	mov	r3, r1
 800706a:	4313      	orrs	r3, r2
 800706c:	d055      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800706e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007072:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007076:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800707a:	d031      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800707c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007080:	d82a      	bhi.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007086:	d02d      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8007088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800708c:	d824      	bhi.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800708e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007092:	d029      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8007094:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007098:	d81e      	bhi.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800709a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800709e:	d011      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80070a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070a4:	d818      	bhi.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d020      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80070aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ae:	d113      	bne.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80070b4:	3308      	adds	r3, #8
 80070b6:	4618      	mov	r0, r3
 80070b8:	f003 fed6 	bl	800ae68 <RCCEx_PLL2_Config>
 80070bc:	4603      	mov	r3, r0
 80070be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80070c2:	e014      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80070c8:	3330      	adds	r3, #48	; 0x30
 80070ca:	4618      	mov	r0, r3
 80070cc:	f003 ff64 	bl	800af98 <RCCEx_PLL3_Config>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80070d6:	e00a      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80070de:	e006      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80070e0:	bf00      	nop
 80070e2:	e004      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80070e4:	bf00      	nop
 80070e6:	e002      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80070e8:	bf00      	nop
 80070ea:	e000      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80070ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10d      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80070f6:	4b88      	ldr	r3, [pc, #544]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80070f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80070fc:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8007100:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007104:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007108:	4a83      	ldr	r2, [pc, #524]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800710a:	430b      	orrs	r3, r1
 800710c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8007110:	e003      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007112:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007116:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800711a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007122:	2100      	movs	r1, #0
 8007124:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8007128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007130:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007134:	460b      	mov	r3, r1
 8007136:	4313      	orrs	r3, r2
 8007138:	d055      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800713a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800713e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007142:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007146:	d031      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8007148:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800714c:	d82a      	bhi.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800714e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007152:	d02d      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8007154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007158:	d824      	bhi.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800715a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800715e:	d029      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8007160:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007164:	d81e      	bhi.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800716a:	d011      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800716c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007170:	d818      	bhi.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007172:	2b00      	cmp	r3, #0
 8007174:	d020      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8007176:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800717a:	d113      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800717c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007180:	3308      	adds	r3, #8
 8007182:	4618      	mov	r0, r3
 8007184:	f003 fe70 	bl	800ae68 <RCCEx_PLL2_Config>
 8007188:	4603      	mov	r3, r0
 800718a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800718e:	e014      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007190:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007194:	3330      	adds	r3, #48	; 0x30
 8007196:	4618      	mov	r0, r3
 8007198:	f003 fefe 	bl	800af98 <RCCEx_PLL3_Config>
 800719c:	4603      	mov	r3, r0
 800719e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80071a2:	e00a      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80071aa:	e006      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80071ac:	bf00      	nop
 80071ae:	e004      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80071b0:	bf00      	nop
 80071b2:	e002      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80071b4:	bf00      	nop
 80071b6:	e000      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80071b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10d      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80071c2:	4b55      	ldr	r3, [pc, #340]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80071c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80071c8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80071cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80071d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071d4:	4a50      	ldr	r2, [pc, #320]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80071d6:	430b      	orrs	r3, r1
 80071d8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80071dc:	e003      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80071e2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80071e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80071ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ee:	2100      	movs	r1, #0
 80071f0:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80071f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071fc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007200:	460b      	mov	r3, r1
 8007202:	4313      	orrs	r3, r2
 8007204:	d055      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8007206:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800720a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800720e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007212:	d031      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8007214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007218:	d82a      	bhi.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800721a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721e:	d02d      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8007220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007224:	d824      	bhi.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007226:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800722a:	d029      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800722c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007230:	d81e      	bhi.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007236:	d011      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8007238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800723c:	d818      	bhi.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800723e:	2b00      	cmp	r3, #0
 8007240:	d020      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8007242:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007246:	d113      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007248:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800724c:	3308      	adds	r3, #8
 800724e:	4618      	mov	r0, r3
 8007250:	f003 fe0a 	bl	800ae68 <RCCEx_PLL2_Config>
 8007254:	4603      	mov	r3, r0
 8007256:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800725a:	e014      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800725c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007260:	3330      	adds	r3, #48	; 0x30
 8007262:	4618      	mov	r0, r3
 8007264:	f003 fe98 	bl	800af98 <RCCEx_PLL3_Config>
 8007268:	4603      	mov	r3, r0
 800726a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800726e:	e00a      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007276:	e006      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007278:	bf00      	nop
 800727a:	e004      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800727c:	bf00      	nop
 800727e:	e002      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007280:	bf00      	nop
 8007282:	e000      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007286:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10d      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800728e:	4b22      	ldr	r3, [pc, #136]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007290:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007294:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007298:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800729c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80072a0:	4a1d      	ldr	r2, [pc, #116]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80072a2:	430b      	orrs	r3, r1
 80072a4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80072a8:	e003      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80072ae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80072b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80072be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072c2:	2300      	movs	r3, #0
 80072c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80072cc:	460b      	mov	r3, r1
 80072ce:	4313      	orrs	r3, r2
 80072d0:	d055      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80072d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80072d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80072da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072de:	d035      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80072e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072e4:	d82e      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80072e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072ea:	d031      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80072ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072f0:	d828      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80072f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072f6:	d01b      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80072f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072fc:	d822      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8007302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007306:	d009      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8007308:	e01c      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800730a:	4b03      	ldr	r3, [pc, #12]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	4a02      	ldr	r2, [pc, #8]	; (8007318 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007314:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007316:	e01c      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8007318:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800731c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007320:	3308      	adds	r3, #8
 8007322:	4618      	mov	r0, r3
 8007324:	f003 fda0 	bl	800ae68 <RCCEx_PLL2_Config>
 8007328:	4603      	mov	r3, r0
 800732a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800732e:	e010      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007330:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007334:	3330      	adds	r3, #48	; 0x30
 8007336:	4618      	mov	r0, r3
 8007338:	f003 fe2e 	bl	800af98 <RCCEx_PLL3_Config>
 800733c:	4603      	mov	r3, r0
 800733e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007342:	e006      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800734a:	e002      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800734c:	bf00      	nop
 800734e:	e000      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8007350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007352:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10d      	bne.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800735a:	4bc3      	ldr	r3, [pc, #780]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800735c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007360:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007364:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007368:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800736c:	4abe      	ldr	r2, [pc, #760]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800736e:	430b      	orrs	r3, r1
 8007370:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007374:	e003      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007376:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800737a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800737e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007386:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800738a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800738e:	2300      	movs	r3, #0
 8007390:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007394:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007398:	460b      	mov	r3, r1
 800739a:	4313      	orrs	r3, r2
 800739c:	d051      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800739e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80073a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80073a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073aa:	d033      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80073ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073b0:	d82c      	bhi.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80073b2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80073b6:	d02d      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80073b8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80073bc:	d826      	bhi.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80073be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073c2:	d019      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80073c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073c8:	d820      	bhi.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d003      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80073ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80073d2:	d007      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80073d4:	e01a      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d6:	4ba4      	ldr	r3, [pc, #656]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	4aa3      	ldr	r2, [pc, #652]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80073dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073e0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80073e2:	e018      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80073e8:	3308      	adds	r3, #8
 80073ea:	4618      	mov	r0, r3
 80073ec:	f003 fd3c 	bl	800ae68 <RCCEx_PLL2_Config>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80073f6:	e00e      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80073fc:	3330      	adds	r3, #48	; 0x30
 80073fe:	4618      	mov	r0, r3
 8007400:	f003 fdca 	bl	800af98 <RCCEx_PLL3_Config>
 8007404:	4603      	mov	r3, r0
 8007406:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800740a:	e004      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007412:	e000      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8007414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007416:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10d      	bne.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800741e:	4b92      	ldr	r3, [pc, #584]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007424:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8007428:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800742c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007430:	4a8d      	ldr	r2, [pc, #564]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007432:	430b      	orrs	r3, r1
 8007434:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007438:	e003      	b.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800743a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800743e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007442:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800744e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007450:	2300      	movs	r3, #0
 8007452:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007454:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007458:	460b      	mov	r3, r1
 800745a:	4313      	orrs	r3, r2
 800745c:	d032      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800745e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007462:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007466:	2b05      	cmp	r3, #5
 8007468:	d80f      	bhi.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800746a:	2b03      	cmp	r3, #3
 800746c:	d211      	bcs.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800746e:	2b01      	cmp	r3, #1
 8007470:	d911      	bls.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8007472:	2b02      	cmp	r3, #2
 8007474:	d109      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007476:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800747a:	3308      	adds	r3, #8
 800747c:	4618      	mov	r0, r3
 800747e:	f003 fcf3 	bl	800ae68 <RCCEx_PLL2_Config>
 8007482:	4603      	mov	r3, r0
 8007484:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007488:	e006      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007490:	e002      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8007492:	bf00      	nop
 8007494:	e000      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8007496:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007498:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10d      	bne.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80074a0:	4b71      	ldr	r3, [pc, #452]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80074a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80074a6:	f023 0107 	bic.w	r1, r3, #7
 80074aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80074ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80074b2:	4a6d      	ldr	r2, [pc, #436]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80074b4:	430b      	orrs	r3, r1
 80074b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80074ba:	e003      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074bc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80074c0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80074c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	2100      	movs	r1, #0
 80074ce:	6739      	str	r1, [r7, #112]	; 0x70
 80074d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074d4:	677b      	str	r3, [r7, #116]	; 0x74
 80074d6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80074da:	460b      	mov	r3, r1
 80074dc:	4313      	orrs	r3, r2
 80074de:	d024      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80074e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80074e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d005      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80074f6:	e002      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80074f8:	bf00      	nop
 80074fa:	e000      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80074fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10d      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8007506:	4b58      	ldr	r3, [pc, #352]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800750c:	f023 0108 	bic.w	r1, r3, #8
 8007510:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007514:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007518:	4a53      	ldr	r2, [pc, #332]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800751a:	430b      	orrs	r3, r1
 800751c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007520:	e003      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007522:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007526:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800752a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007536:	66bb      	str	r3, [r7, #104]	; 0x68
 8007538:	2300      	movs	r3, #0
 800753a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800753c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007540:	460b      	mov	r3, r1
 8007542:	4313      	orrs	r3, r2
 8007544:	f000 80b9 	beq.w	80076ba <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007548:	4b48      	ldr	r3, [pc, #288]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800754a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754c:	4a47      	ldr	r2, [pc, #284]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800754e:	f043 0301 	orr.w	r3, r3, #1
 8007552:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007554:	f7fb f8c2 	bl	80026dc <HAL_GetTick>
 8007558:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800755c:	e00b      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800755e:	f7fb f8bd 	bl	80026dc <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d903      	bls.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007574:	e005      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007576:	4b3d      	ldr	r3, [pc, #244]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0ed      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8007582:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007586:	2b00      	cmp	r3, #0
 8007588:	f040 8093 	bne.w	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800758c:	4b36      	ldr	r3, [pc, #216]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800758e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007596:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800759a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d023      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80075a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80075a6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80075aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d01b      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075b2:	4b2d      	ldr	r3, [pc, #180]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80075b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075bc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075c0:	4b29      	ldr	r3, [pc, #164]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80075c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075c6:	4a28      	ldr	r2, [pc, #160]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80075c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075d0:	4b25      	ldr	r3, [pc, #148]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80075d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075d6:	4a24      	ldr	r2, [pc, #144]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80075d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075e0:	4a21      	ldr	r2, [pc, #132]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80075e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80075e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80075ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d019      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f6:	f7fb f871 	bl	80026dc <HAL_GetTick>
 80075fa:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075fe:	e00d      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007600:	f7fb f86c 	bl	80026dc <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800760a:	1ad2      	subs	r2, r2, r3
 800760c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007610:	429a      	cmp	r2, r3
 8007612:	d903      	bls.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 800761a:	e006      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800761c:	4b12      	ldr	r3, [pc, #72]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800761e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0ea      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800762a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800762e:	2b00      	cmp	r3, #0
 8007630:	d13a      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007632:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007636:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800763a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800763e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007642:	d115      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8007644:	4b08      	ldr	r3, [pc, #32]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800764c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007650:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8007654:	091b      	lsrs	r3, r3, #4
 8007656:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800765a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800765e:	4a02      	ldr	r2, [pc, #8]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007660:	430b      	orrs	r3, r1
 8007662:	61d3      	str	r3, [r2, #28]
 8007664:	e00a      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8007666:	bf00      	nop
 8007668:	44020c00 	.word	0x44020c00
 800766c:	44020800 	.word	0x44020800
 8007670:	4b9f      	ldr	r3, [pc, #636]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	4a9e      	ldr	r2, [pc, #632]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007676:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800767a:	61d3      	str	r3, [r2, #28]
 800767c:	4b9c      	ldr	r3, [pc, #624]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800767e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007682:	4a9b      	ldr	r2, [pc, #620]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007688:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800768c:	4b98      	ldr	r3, [pc, #608]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800768e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8007692:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007696:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800769a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800769e:	4a94      	ldr	r2, [pc, #592]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80076a0:	430b      	orrs	r3, r1
 80076a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80076a6:	e008      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80076ac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 80076b0:	e003      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80076b6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80076ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80076be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c2:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80076c6:	663b      	str	r3, [r7, #96]	; 0x60
 80076c8:	2300      	movs	r3, #0
 80076ca:	667b      	str	r3, [r7, #100]	; 0x64
 80076cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80076d0:	460b      	mov	r3, r1
 80076d2:	4313      	orrs	r3, r2
 80076d4:	d035      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80076d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80076da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80076de:	2b30      	cmp	r3, #48	; 0x30
 80076e0:	d014      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80076e2:	2b30      	cmp	r3, #48	; 0x30
 80076e4:	d80e      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d012      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	d80a      	bhi.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d010      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80076f2:	2b10      	cmp	r3, #16
 80076f4:	d106      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076f6:	4b7e      	ldr	r3, [pc, #504]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80076f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fa:	4a7d      	ldr	r2, [pc, #500]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80076fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007700:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8007702:	e008      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800770a:	e004      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800770c:	bf00      	nop
 800770e:	e002      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8007710:	bf00      	nop
 8007712:	e000      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8007714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007716:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10d      	bne.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800771e:	4b74      	ldr	r3, [pc, #464]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007724:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007728:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800772c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007730:	4a6f      	ldr	r2, [pc, #444]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007732:	430b      	orrs	r3, r1
 8007734:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007738:	e003      	b.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800773a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800773e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007742:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774a:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800774e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007750:	2300      	movs	r3, #0
 8007752:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007754:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007758:	460b      	mov	r3, r1
 800775a:	4313      	orrs	r3, r2
 800775c:	d033      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800775e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007762:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800776a:	2b40      	cmp	r3, #64	; 0x40
 800776c:	d007      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800776e:	e010      	b.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007770:	4b5f      	ldr	r3, [pc, #380]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007774:	4a5e      	ldr	r2, [pc, #376]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800777a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800777c:	e00d      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800777e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007782:	3308      	adds	r3, #8
 8007784:	4618      	mov	r0, r3
 8007786:	f003 fb6f 	bl	800ae68 <RCCEx_PLL2_Config>
 800778a:	4603      	mov	r3, r0
 800778c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007790:	e003      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800779a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10d      	bne.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80077a2:	4b53      	ldr	r3, [pc, #332]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80077a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80077a8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80077ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80077b0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80077b4:	4a4e      	ldr	r2, [pc, #312]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80077b6:	430b      	orrs	r3, r1
 80077b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80077bc:	e003      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80077c2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80077c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80077d2:	653b      	str	r3, [r7, #80]	; 0x50
 80077d4:	2300      	movs	r3, #0
 80077d6:	657b      	str	r3, [r7, #84]	; 0x54
 80077d8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80077dc:	460b      	mov	r3, r1
 80077de:	4313      	orrs	r3, r2
 80077e0:	d033      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80077e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80077e6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80077ee:	2b80      	cmp	r3, #128	; 0x80
 80077f0:	d007      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80077f2:	e010      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f4:	4b3e      	ldr	r3, [pc, #248]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	4a3d      	ldr	r2, [pc, #244]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80077fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077fe:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8007800:	e00d      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007802:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007806:	3308      	adds	r3, #8
 8007808:	4618      	mov	r0, r3
 800780a:	f003 fb2d 	bl	800ae68 <RCCEx_PLL2_Config>
 800780e:	4603      	mov	r3, r0
 8007810:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8007814:	e003      	b.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800781c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800781e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10d      	bne.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8007826:	4b32      	ldr	r3, [pc, #200]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007828:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800782c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007830:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007834:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8007838:	4a2d      	ldr	r2, [pc, #180]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800783a:	430b      	orrs	r3, r1
 800783c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007840:	e003      	b.n	800784a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007842:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007846:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800784a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8007856:	64bb      	str	r3, [r7, #72]	; 0x48
 8007858:	2300      	movs	r3, #0
 800785a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800785c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007860:	460b      	mov	r3, r1
 8007862:	4313      	orrs	r3, r2
 8007864:	d04a      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8007866:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800786a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800786e:	2b04      	cmp	r3, #4
 8007870:	d827      	bhi.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8007872:	a201      	add	r2, pc, #4	; (adr r2, 8007878 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8007874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007878:	0800788d 	.word	0x0800788d
 800787c:	0800789b 	.word	0x0800789b
 8007880:	080078af 	.word	0x080078af
 8007884:	080078cb 	.word	0x080078cb
 8007888:	080078cb 	.word	0x080078cb
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800788c:	4b18      	ldr	r3, [pc, #96]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007890:	4a17      	ldr	r2, [pc, #92]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007896:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007898:	e018      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800789a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800789e:	3308      	adds	r3, #8
 80078a0:	4618      	mov	r0, r3
 80078a2:	f003 fae1 	bl	800ae68 <RCCEx_PLL2_Config>
 80078a6:	4603      	mov	r3, r0
 80078a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80078ac:	e00e      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80078b2:	3330      	adds	r3, #48	; 0x30
 80078b4:	4618      	mov	r0, r3
 80078b6:	f003 fb6f 	bl	800af98 <RCCEx_PLL3_Config>
 80078ba:	4603      	mov	r3, r0
 80078bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80078c0:	e004      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80078c8:	e000      	b.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80078ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10f      	bne.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80078d4:	4b06      	ldr	r3, [pc, #24]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80078d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078da:	f023 0107 	bic.w	r1, r3, #7
 80078de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80078e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078e6:	4a02      	ldr	r2, [pc, #8]	; (80078f0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80078e8:	430b      	orrs	r3, r1
 80078ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80078ee:	e005      	b.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80078f0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078f4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80078f8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80078fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007908:	643b      	str	r3, [r7, #64]	; 0x40
 800790a:	2300      	movs	r3, #0
 800790c:	647b      	str	r3, [r7, #68]	; 0x44
 800790e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007912:	460b      	mov	r3, r1
 8007914:	4313      	orrs	r3, r2
 8007916:	f000 8081 	beq.w	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800791a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800791e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007922:	2b20      	cmp	r3, #32
 8007924:	d85f      	bhi.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8007926:	a201      	add	r2, pc, #4	; (adr r2, 800792c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	080079b1 	.word	0x080079b1
 8007930:	080079e7 	.word	0x080079e7
 8007934:	080079e7 	.word	0x080079e7
 8007938:	080079e7 	.word	0x080079e7
 800793c:	080079e7 	.word	0x080079e7
 8007940:	080079e7 	.word	0x080079e7
 8007944:	080079e7 	.word	0x080079e7
 8007948:	080079e7 	.word	0x080079e7
 800794c:	080079bf 	.word	0x080079bf
 8007950:	080079e7 	.word	0x080079e7
 8007954:	080079e7 	.word	0x080079e7
 8007958:	080079e7 	.word	0x080079e7
 800795c:	080079e7 	.word	0x080079e7
 8007960:	080079e7 	.word	0x080079e7
 8007964:	080079e7 	.word	0x080079e7
 8007968:	080079e7 	.word	0x080079e7
 800796c:	080079d3 	.word	0x080079d3
 8007970:	080079e7 	.word	0x080079e7
 8007974:	080079e7 	.word	0x080079e7
 8007978:	080079e7 	.word	0x080079e7
 800797c:	080079e7 	.word	0x080079e7
 8007980:	080079e7 	.word	0x080079e7
 8007984:	080079e7 	.word	0x080079e7
 8007988:	080079e7 	.word	0x080079e7
 800798c:	080079ef 	.word	0x080079ef
 8007990:	080079e7 	.word	0x080079e7
 8007994:	080079e7 	.word	0x080079e7
 8007998:	080079e7 	.word	0x080079e7
 800799c:	080079e7 	.word	0x080079e7
 80079a0:	080079e7 	.word	0x080079e7
 80079a4:	080079e7 	.word	0x080079e7
 80079a8:	080079e7 	.word	0x080079e7
 80079ac:	080079ef 	.word	0x080079ef
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b0:	4bab      	ldr	r3, [pc, #684]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	4aaa      	ldr	r2, [pc, #680]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80079b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ba:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80079bc:	e018      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80079be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80079c2:	3308      	adds	r3, #8
 80079c4:	4618      	mov	r0, r3
 80079c6:	f003 fa4f 	bl	800ae68 <RCCEx_PLL2_Config>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80079d0:	e00e      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80079d6:	3330      	adds	r3, #48	; 0x30
 80079d8:	4618      	mov	r0, r3
 80079da:	f003 fadd 	bl	800af98 <RCCEx_PLL3_Config>
 80079de:	4603      	mov	r3, r0
 80079e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80079e4:	e004      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80079ec:	e000      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80079ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10d      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80079f8:	4b99      	ldr	r3, [pc, #612]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80079fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079fe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007a02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007a06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a0a:	4a95      	ldr	r2, [pc, #596]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a12:	e003      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a14:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007a18:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007a1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007a28:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007a32:	460b      	mov	r3, r1
 8007a34:	4313      	orrs	r3, r2
 8007a36:	d04e      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8007a38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007a3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a44:	d02e      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8007a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a4a:	d827      	bhi.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007a4c:	2bc0      	cmp	r3, #192	; 0xc0
 8007a4e:	d02b      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8007a50:	2bc0      	cmp	r3, #192	; 0xc0
 8007a52:	d823      	bhi.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007a54:	2b80      	cmp	r3, #128	; 0x80
 8007a56:	d017      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8007a58:	2b80      	cmp	r3, #128	; 0x80
 8007a5a:	d81f      	bhi.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8007a60:	2b40      	cmp	r3, #64	; 0x40
 8007a62:	d007      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8007a64:	e01a      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a66:	4b7e      	ldr	r3, [pc, #504]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	4a7d      	ldr	r2, [pc, #500]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a70:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007a72:	e01a      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007a78:	3308      	adds	r3, #8
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f003 f9f4 	bl	800ae68 <RCCEx_PLL2_Config>
 8007a80:	4603      	mov	r3, r0
 8007a82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007a86:	e010      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007a8c:	3330      	adds	r3, #48	; 0x30
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f003 fa82 	bl	800af98 <RCCEx_PLL3_Config>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007a9a:	e006      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007aa2:	e002      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007aa4:	bf00      	nop
 8007aa6:	e000      	b.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aaa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10d      	bne.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007ab2:	4b6b      	ldr	r3, [pc, #428]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ab8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007abc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ac4:	4a66      	ldr	r2, [pc, #408]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007ac6:	430b      	orrs	r3, r1
 8007ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007acc:	e003      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ace:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007ad2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007ad6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ade:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ae8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007aec:	460b      	mov	r3, r1
 8007aee:	4313      	orrs	r3, r2
 8007af0:	d055      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007af2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007af6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007afa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007afe:	d031      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8007b00:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007b04:	d82a      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b0a:	d02d      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8007b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b10:	d824      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007b12:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b16:	d029      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8007b18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b1c:	d81e      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b22:	d011      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8007b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b28:	d818      	bhi.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d020      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8007b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b32:	d113      	bne.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007b38:	3308      	adds	r3, #8
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f003 f994 	bl	800ae68 <RCCEx_PLL2_Config>
 8007b40:	4603      	mov	r3, r0
 8007b42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007b46:	e014      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007b4c:	3330      	adds	r3, #48	; 0x30
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f003 fa22 	bl	800af98 <RCCEx_PLL3_Config>
 8007b54:	4603      	mov	r3, r0
 8007b56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007b5a:	e00a      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007b62:	e006      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007b64:	bf00      	nop
 8007b66:	e004      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007b68:	bf00      	nop
 8007b6a:	e002      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007b6c:	bf00      	nop
 8007b6e:	e000      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10d      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8007b7a:	4b39      	ldr	r3, [pc, #228]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b80:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8007b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007b88:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007b8c:	4a34      	ldr	r2, [pc, #208]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007b94:	e003      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007b9a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8007b9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bac:	2300      	movs	r3, #0
 8007bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bb0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	d058      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8007bba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bc2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007bc6:	d031      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8007bc8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007bcc:	d82a      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007bce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bd2:	d02d      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8007bd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bd8:	d824      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007bda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bde:	d029      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8007be0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007be4:	d81e      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bea:	d011      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8007bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bf0:	d818      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d020      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8007bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bfa:	d113      	bne.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007c00:	3308      	adds	r3, #8
 8007c02:	4618      	mov	r0, r3
 8007c04:	f003 f930 	bl	800ae68 <RCCEx_PLL2_Config>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8007c0e:	e014      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007c14:	3330      	adds	r3, #48	; 0x30
 8007c16:	4618      	mov	r0, r3
 8007c18:	f003 f9be 	bl	800af98 <RCCEx_PLL3_Config>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8007c22:	e00a      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007c2a:	e006      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007c2c:	bf00      	nop
 8007c2e:	e004      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007c30:	bf00      	nop
 8007c32:	e002      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007c34:	bf00      	nop
 8007c36:	e000      	b.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c3a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d110      	bne.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8007c42:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c48:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007c4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c54:	4902      	ldr	r1, [pc, #8]	; (8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8007c5c:	e006      	b.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8007c5e:	bf00      	nop
 8007c60:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007c68:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007c6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c74:	2100      	movs	r1, #0
 8007c76:	6239      	str	r1, [r7, #32]
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c7e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007c82:	460b      	mov	r3, r1
 8007c84:	4313      	orrs	r3, r2
 8007c86:	d055      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8007c88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007c8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c90:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007c94:	d031      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8007c96:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007c9a:	d82a      	bhi.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ca0:	d02d      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8007ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ca6:	d824      	bhi.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007ca8:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007cac:	d029      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8007cae:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007cb2:	d81e      	bhi.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cb8:	d011      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8007cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cbe:	d818      	bhi.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d020      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8007cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc8:	d113      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007cce:	3308      	adds	r3, #8
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f003 f8c9 	bl	800ae68 <RCCEx_PLL2_Config>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007cdc:	e014      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007cde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007ce2:	3330      	adds	r3, #48	; 0x30
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f003 f957 	bl	800af98 <RCCEx_PLL3_Config>
 8007cea:	4603      	mov	r3, r0
 8007cec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007cf0:	e00a      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007cf8:	e006      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007cfa:	bf00      	nop
 8007cfc:	e004      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007cfe:	bf00      	nop
 8007d00:	e002      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007d02:	bf00      	nop
 8007d04:	e000      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d08:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10d      	bne.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8007d10:	4b88      	ldr	r3, [pc, #544]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d16:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8007d1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007d1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d22:	4984      	ldr	r1, [pc, #528]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8007d2a:	e003      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007d30:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007d34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	61b9      	str	r1, [r7, #24]
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	61fb      	str	r3, [r7, #28]
 8007d46:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	d03d      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8007d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007d54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007d58:	2b03      	cmp	r3, #3
 8007d5a:	d81c      	bhi.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8007d5c:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8007d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d62:	bf00      	nop
 8007d64:	08007d9f 	.word	0x08007d9f
 8007d68:	08007d75 	.word	0x08007d75
 8007d6c:	08007d83 	.word	0x08007d83
 8007d70:	08007d9f 	.word	0x08007d9f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d74:	4b6f      	ldr	r3, [pc, #444]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d78:	4a6e      	ldr	r2, [pc, #440]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d7e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8007d80:	e00e      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007d82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007d86:	3308      	adds	r3, #8
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f003 f86d 	bl	800ae68 <RCCEx_PLL2_Config>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007d94:	e004      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007d9c:	e000      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8007d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10d      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007da8:	4b62      	ldr	r3, [pc, #392]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007daa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007dae:	f023 0203 	bic.w	r2, r3, #3
 8007db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007db6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007dba:	495e      	ldr	r1, [pc, #376]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8007dc2:	e003      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007dc8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007dcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	6139      	str	r1, [r7, #16]
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	617b      	str	r3, [r7, #20]
 8007dde:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007de2:	460b      	mov	r3, r1
 8007de4:	4313      	orrs	r3, r2
 8007de6:	d03a      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007dec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007df4:	d00e      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8007df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dfa:	d815      	bhi.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d017      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8007e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e04:	d110      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e06:	4b4b      	ldr	r3, [pc, #300]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0a:	4a4a      	ldr	r2, [pc, #296]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e10:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007e12:	e00e      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007e18:	3308      	adds	r3, #8
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f003 f824 	bl	800ae68 <RCCEx_PLL2_Config>
 8007e20:	4603      	mov	r3, r0
 8007e22:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007e26:	e004      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007e2e:	e000      	b.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8007e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e32:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10d      	bne.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8007e3a:	4b3e      	ldr	r3, [pc, #248]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007e48:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007e4c:	4939      	ldr	r1, [pc, #228]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8007e54:	e003      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007e5a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e66:	2100      	movs	r1, #0
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	f003 0310 	and.w	r3, r3, #16
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007e74:	460b      	mov	r3, r1
 8007e76:	4313      	orrs	r3, r2
 8007e78:	d038      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007e7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007e7e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007e82:	2b30      	cmp	r3, #48	; 0x30
 8007e84:	d01b      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8007e86:	2b30      	cmp	r3, #48	; 0x30
 8007e88:	d815      	bhi.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8007e8a:	2b10      	cmp	r3, #16
 8007e8c:	d002      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	d007      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8007e92:	e010      	b.n	8007eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e94:	4b27      	ldr	r3, [pc, #156]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e98:	4a26      	ldr	r2, [pc, #152]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e9e:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007ea0:	e00e      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ea2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007ea6:	3330      	adds	r3, #48	; 0x30
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f003 f875 	bl	800af98 <RCCEx_PLL3_Config>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007eb4:	e004      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8007ebc:	e000      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8007ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ec0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10d      	bne.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007ec8:	4b1a      	ldr	r3, [pc, #104]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007eca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ece:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007ed6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007eda:	4916      	ldr	r1, [pc, #88]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8007ee2:	e003      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8007ee8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007eec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	6039      	str	r1, [r7, #0]
 8007ef8:	f003 0308 	and.w	r3, r3, #8
 8007efc:	607b      	str	r3, [r7, #4]
 8007efe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007f02:	460b      	mov	r3, r1
 8007f04:	4313      	orrs	r3, r2
 8007f06:	d00c      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8007f08:	4b0a      	ldr	r3, [pc, #40]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007f0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007f16:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8007f1a:	4906      	ldr	r1, [pc, #24]	; (8007f34 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8007f22:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f32:	bf00      	nop
 8007f34:	44020c00 	.word	0x44020c00

08007f38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b08b      	sub	sp, #44	; 0x2c
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007f40:	4bad      	ldr	r3, [pc, #692]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f48:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007f4a:	4bab      	ldr	r3, [pc, #684]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	f003 0303 	and.w	r3, r3, #3
 8007f52:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007f54:	4ba8      	ldr	r3, [pc, #672]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f58:	0a1b      	lsrs	r3, r3, #8
 8007f5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f5e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8007f60:	4ba5      	ldr	r3, [pc, #660]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f64:	f003 0310 	and.w	r3, r3, #16
 8007f68:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007f6a:	4ba3      	ldr	r3, [pc, #652]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f6e:	08db      	lsrs	r3, r3, #3
 8007f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	fb02 f303 	mul.w	r3, r2, r3
 8007f7a:	ee07 3a90 	vmov	s15, r3
 8007f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f82:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 8126 	beq.w	80081da <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d053      	beq.n	800803c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d86f      	bhi.n	800807a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d003      	beq.n	8007fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d02b      	beq.n	8007ffe <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8007fa6:	e068      	b.n	800807a <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007fa8:	4b93      	ldr	r3, [pc, #588]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	08db      	lsrs	r3, r3, #3
 8007fae:	f003 0303 	and.w	r3, r3, #3
 8007fb2:	4a92      	ldr	r2, [pc, #584]	; (80081fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	ee07 3a90 	vmov	s15, r3
 8007fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	ee07 3a90 	vmov	s15, r3
 8007fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	ee07 3a90 	vmov	s15, r3
 8007fd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fdc:	ed97 6a04 	vldr	s12, [r7, #16]
 8007fe0:	eddf 5a87 	vldr	s11, [pc, #540]	; 8008200 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8007fe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ff0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8007ffc:	e068      	b.n	80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	ee07 3a90 	vmov	s15, r3
 8008004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008008:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8008204 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800800c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800801a:	ed97 6a04 	vldr	s12, [r7, #16]
 800801e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008200 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800802a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800802e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008036:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800803a:	e049      	b.n	80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008046:	eddf 6a70 	vldr	s13, [pc, #448]	; 8008208 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800804a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800804e:	6a3b      	ldr	r3, [r7, #32]
 8008050:	ee07 3a90 	vmov	s15, r3
 8008054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008058:	ed97 6a04 	vldr	s12, [r7, #16]
 800805c:	eddf 5a68 	vldr	s11, [pc, #416]	; 8008200 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800806c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008074:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8008078:	e02a      	b.n	80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800807a:	4b5f      	ldr	r3, [pc, #380]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	08db      	lsrs	r3, r3, #3
 8008080:	f003 0303 	and.w	r3, r3, #3
 8008084:	4a5d      	ldr	r2, [pc, #372]	; (80081fc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008086:	fa22 f303 	lsr.w	r3, r2, r3
 800808a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	ee07 3a90 	vmov	s15, r3
 8008092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	ee07 3a90 	vmov	s15, r3
 800809c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	ee07 3a90 	vmov	s15, r3
 80080aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ae:	ed97 6a04 	vldr	s12, [r7, #16]
 80080b2:	eddf 5a53 	vldr	s11, [pc, #332]	; 8008200 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80080b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80080ce:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080d0:	4b49      	ldr	r3, [pc, #292]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080dc:	d121      	bne.n	8008122 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80080de:	4b46      	ldr	r3, [pc, #280]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80080e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d017      	beq.n	800811a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80080ea:	4b43      	ldr	r3, [pc, #268]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80080ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ee:	0a5b      	lsrs	r3, r3, #9
 80080f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f4:	ee07 3a90 	vmov	s15, r3
 80080f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80080fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008100:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008104:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800810c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008110:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	e006      	b.n	8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	e002      	b.n	8008128 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008128:	4b33      	ldr	r3, [pc, #204]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008134:	d121      	bne.n	800817a <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008136:	4b30      	ldr	r3, [pc, #192]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d017      	beq.n	8008172 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008142:	4b2d      	ldr	r3, [pc, #180]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008146:	0c1b      	lsrs	r3, r3, #16
 8008148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800814c:	ee07 3a90 	vmov	s15, r3
 8008150:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008154:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008158:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800815c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008168:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	605a      	str	r2, [r3, #4]
 8008170:	e006      	b.n	8008180 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	605a      	str	r2, [r3, #4]
 8008178:	e002      	b.n	8008180 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008180:	4b1d      	ldr	r3, [pc, #116]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008188:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800818c:	d121      	bne.n	80081d2 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800818e:	4b1a      	ldr	r3, [pc, #104]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d017      	beq.n	80081ca <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800819a:	4b17      	ldr	r3, [pc, #92]	; (80081f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800819c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819e:	0e1b      	lsrs	r3, r3, #24
 80081a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a4:	ee07 3a90 	vmov	s15, r3
 80081a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80081ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081b0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80081b4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80081b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081c0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80081c8:	e010      	b.n	80081ec <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	609a      	str	r2, [r3, #8]
}
 80081d0:	e00c      	b.n	80081ec <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	609a      	str	r2, [r3, #8]
}
 80081d8:	e008      	b.n	80081ec <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	609a      	str	r2, [r3, #8]
}
 80081ec:	bf00      	nop
 80081ee:	372c      	adds	r7, #44	; 0x2c
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	44020c00 	.word	0x44020c00
 80081fc:	03d09000 	.word	0x03d09000
 8008200:	46000000 	.word	0x46000000
 8008204:	4a742400 	.word	0x4a742400
 8008208:	4af42400 	.word	0x4af42400

0800820c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800820c:	b480      	push	{r7}
 800820e:	b08b      	sub	sp, #44	; 0x2c
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008214:	4bad      	ldr	r3, [pc, #692]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800821c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800821e:	4bab      	ldr	r3, [pc, #684]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8008228:	4ba8      	ldr	r3, [pc, #672]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822c:	0a1b      	lsrs	r3, r3, #8
 800822e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008232:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8008234:	4ba5      	ldr	r3, [pc, #660]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800823e:	4ba3      	ldr	r3, [pc, #652]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008242:	08db      	lsrs	r3, r3, #3
 8008244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008248:	697a      	ldr	r2, [r7, #20]
 800824a:	fb02 f303 	mul.w	r3, r2, r3
 800824e:	ee07 3a90 	vmov	s15, r3
 8008252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008256:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 8126 	beq.w	80084ae <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	2b03      	cmp	r3, #3
 8008266:	d053      	beq.n	8008310 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	2b03      	cmp	r3, #3
 800826c:	d86f      	bhi.n	800834e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d003      	beq.n	800827c <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	2b02      	cmp	r3, #2
 8008278:	d02b      	beq.n	80082d2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 800827a:	e068      	b.n	800834e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800827c:	4b93      	ldr	r3, [pc, #588]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	08db      	lsrs	r3, r3, #3
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	4a92      	ldr	r2, [pc, #584]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008288:	fa22 f303 	lsr.w	r3, r2, r3
 800828c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	ee07 3a90 	vmov	s15, r3
 8008294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	ee07 3a90 	vmov	s15, r3
 800829e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	ee07 3a90 	vmov	s15, r3
 80082ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082b0:	ed97 6a04 	vldr	s12, [r7, #16]
 80082b4:	eddf 5a87 	vldr	s11, [pc, #540]	; 80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80082b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082cc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80082d0:	e068      	b.n	80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	ee07 3a90 	vmov	s15, r3
 80082d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082dc:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80084d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80082e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ee:	ed97 6a04 	vldr	s12, [r7, #16]
 80082f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80082f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800830a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800830e:	e049      	b.n	80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831a:	eddf 6a70 	vldr	s13, [pc, #448]	; 80084dc <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800831e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	ee07 3a90 	vmov	s15, r3
 8008328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008330:	eddf 5a68 	vldr	s11, [pc, #416]	; 80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008348:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800834c:	e02a      	b.n	80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800834e:	4b5f      	ldr	r3, [pc, #380]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	08db      	lsrs	r3, r3, #3
 8008354:	f003 0303 	and.w	r3, r3, #3
 8008358:	4a5d      	ldr	r2, [pc, #372]	; (80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800835a:	fa22 f303 	lsr.w	r3, r2, r3
 800835e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	ee07 3a90 	vmov	s15, r3
 8008366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	ee07 3a90 	vmov	s15, r3
 8008370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008378:	6a3b      	ldr	r3, [r7, #32]
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008382:	ed97 6a04 	vldr	s12, [r7, #16]
 8008386:	eddf 5a53 	vldr	s11, [pc, #332]	; 80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800838a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800838e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800839a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800839e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80083a2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083a4:	4b49      	ldr	r3, [pc, #292]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083b0:	d121      	bne.n	80083f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80083b2:	4b46      	ldr	r3, [pc, #280]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80083b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d017      	beq.n	80083ee <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80083be:	4b43      	ldr	r3, [pc, #268]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80083c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c2:	0a5b      	lsrs	r3, r3, #9
 80083c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c8:	ee07 3a90 	vmov	s15, r3
 80083cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80083d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083d4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80083d8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80083dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	e006      	b.n	80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	e002      	b.n	80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083fc:	4b33      	ldr	r3, [pc, #204]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008408:	d121      	bne.n	800844e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800840a:	4b30      	ldr	r3, [pc, #192]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800840c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d017      	beq.n	8008446 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008416:	4b2d      	ldr	r3, [pc, #180]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841a:	0c1b      	lsrs	r3, r3, #16
 800841c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008420:	ee07 3a90 	vmov	s15, r3
 8008424:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008428:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800842c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008430:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800843c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	605a      	str	r2, [r3, #4]
 8008444:	e006      	b.n	8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	605a      	str	r2, [r3, #4]
 800844c:	e002      	b.n	8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008454:	4b1d      	ldr	r3, [pc, #116]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800845c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008460:	d121      	bne.n	80084a6 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008462:	4b1a      	ldr	r3, [pc, #104]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d017      	beq.n	800849e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800846e:	4b17      	ldr	r3, [pc, #92]	; (80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008472:	0e1b      	lsrs	r3, r3, #24
 8008474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008478:	ee07 3a90 	vmov	s15, r3
 800847c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8008480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008484:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008488:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800848c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008494:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800849c:	e010      	b.n	80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	609a      	str	r2, [r3, #8]
}
 80084a4:	e00c      	b.n	80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	609a      	str	r2, [r3, #8]
}
 80084ac:	e008      	b.n	80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	609a      	str	r2, [r3, #8]
}
 80084c0:	bf00      	nop
 80084c2:	372c      	adds	r7, #44	; 0x2c
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	44020c00 	.word	0x44020c00
 80084d0:	03d09000 	.word	0x03d09000
 80084d4:	46000000 	.word	0x46000000
 80084d8:	4a742400 	.word	0x4a742400
 80084dc:	4af42400 	.word	0x4af42400

080084e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b08b      	sub	sp, #44	; 0x2c
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80084e8:	4bad      	ldr	r3, [pc, #692]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80084ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084f0:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80084f2:	4bab      	ldr	r3, [pc, #684]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80084f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80084fc:	4ba8      	ldr	r3, [pc, #672]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80084fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008500:	0a1b      	lsrs	r3, r3, #8
 8008502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008506:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8008508:	4ba5      	ldr	r3, [pc, #660]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800850a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800850c:	f003 0310 	and.w	r3, r3, #16
 8008510:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008512:	4ba3      	ldr	r3, [pc, #652]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008516:	08db      	lsrs	r3, r3, #3
 8008518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	fb02 f303 	mul.w	r3, r2, r3
 8008522:	ee07 3a90 	vmov	s15, r3
 8008526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800852a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 8126 	beq.w	8008782 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	2b03      	cmp	r3, #3
 800853a:	d053      	beq.n	80085e4 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	2b03      	cmp	r3, #3
 8008540:	d86f      	bhi.n	8008622 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d003      	beq.n	8008550 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	2b02      	cmp	r3, #2
 800854c:	d02b      	beq.n	80085a6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800854e:	e068      	b.n	8008622 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008550:	4b93      	ldr	r3, [pc, #588]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	08db      	lsrs	r3, r3, #3
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	4a92      	ldr	r2, [pc, #584]	; (80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800855c:	fa22 f303 	lsr.w	r3, r2, r3
 8008560:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	ee07 3a90 	vmov	s15, r3
 8008568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	ee07 3a90 	vmov	s15, r3
 8008572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	ee07 3a90 	vmov	s15, r3
 8008580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008584:	ed97 6a04 	vldr	s12, [r7, #16]
 8008588:	eddf 5a87 	vldr	s11, [pc, #540]	; 80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800858c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008590:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008594:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008598:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800859c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80085a4:	e068      	b.n	8008678 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	ee07 3a90 	vmov	s15, r3
 80085ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b0:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80087ac <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80085b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085c2:	ed97 6a04 	vldr	s12, [r7, #16]
 80085c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80085ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80085e2:	e049      	b.n	8008678 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ee:	eddf 6a70 	vldr	s13, [pc, #448]	; 80087b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80085f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	ee07 3a90 	vmov	s15, r3
 80085fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008600:	ed97 6a04 	vldr	s12, [r7, #16]
 8008604:	eddf 5a68 	vldr	s11, [pc, #416]	; 80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008608:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800860c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008610:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008614:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800861c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8008620:	e02a      	b.n	8008678 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008622:	4b5f      	ldr	r3, [pc, #380]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	08db      	lsrs	r3, r3, #3
 8008628:	f003 0303 	and.w	r3, r3, #3
 800862c:	4a5d      	ldr	r2, [pc, #372]	; (80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800862e:	fa22 f303 	lsr.w	r3, r2, r3
 8008632:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	ee07 3a90 	vmov	s15, r3
 8008644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	ee07 3a90 	vmov	s15, r3
 8008652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008656:	ed97 6a04 	vldr	s12, [r7, #16]
 800865a:	eddf 5a53 	vldr	s11, [pc, #332]	; 80087a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800865e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800866a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008672:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8008676:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008678:	4b49      	ldr	r3, [pc, #292]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008680:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008684:	d121      	bne.n	80086ca <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008686:	4b46      	ldr	r3, [pc, #280]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d017      	beq.n	80086c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008692:	4b43      	ldr	r3, [pc, #268]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008696:	0a5b      	lsrs	r3, r3, #9
 8008698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800869c:	ee07 3a90 	vmov	s15, r3
 80086a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80086a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086a8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80086ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80086b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086b8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	e006      	b.n	80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	e002      	b.n	80086d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80086d0:	4b33      	ldr	r3, [pc, #204]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086dc:	d121      	bne.n	8008722 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80086de:	4b30      	ldr	r3, [pc, #192]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80086e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d017      	beq.n	800871a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80086ea:	4b2d      	ldr	r3, [pc, #180]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80086ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ee:	0c1b      	lsrs	r3, r3, #16
 80086f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f4:	ee07 3a90 	vmov	s15, r3
 80086f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80086fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008700:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8008704:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800870c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008710:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	605a      	str	r2, [r3, #4]
 8008718:	e006      	b.n	8008728 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	605a      	str	r2, [r3, #4]
 8008720:	e002      	b.n	8008728 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008728:	4b1d      	ldr	r3, [pc, #116]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008734:	d121      	bne.n	800877a <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008736:	4b1a      	ldr	r3, [pc, #104]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d017      	beq.n	8008772 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008742:	4b17      	ldr	r3, [pc, #92]	; (80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008746:	0e1b      	lsrs	r3, r3, #24
 8008748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800874c:	ee07 3a90 	vmov	s15, r3
 8008750:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8008754:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008758:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800875c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008768:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008770:	e010      	b.n	8008794 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	609a      	str	r2, [r3, #8]
}
 8008778:	e00c      	b.n	8008794 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	609a      	str	r2, [r3, #8]
}
 8008780:	e008      	b.n	8008794 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	609a      	str	r2, [r3, #8]
}
 8008794:	bf00      	nop
 8008796:	372c      	adds	r7, #44	; 0x2c
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	44020c00 	.word	0x44020c00
 80087a4:	03d09000 	.word	0x03d09000
 80087a8:	46000000 	.word	0x46000000
 80087ac:	4a742400 	.word	0x4a742400
 80087b0:	4af42400 	.word	0x4af42400

080087b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80087b4:	b590      	push	{r4, r7, lr}
 80087b6:	b08f      	sub	sp, #60	; 0x3c
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80087be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087c2:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 80087c6:	4321      	orrs	r1, r4
 80087c8:	d150      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80087ca:	4b26      	ldr	r3, [pc, #152]	; (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80087cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087d4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80087d6:	4b23      	ldr	r3, [pc, #140]	; (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80087d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087dc:	f003 0302 	and.w	r3, r3, #2
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d108      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80087e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087ea:	d104      	bne.n	80087f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80087ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087f0:	637b      	str	r3, [r7, #52]	; 0x34
 80087f2:	f002 bb2a 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80087f6:	4b1b      	ldr	r3, [pc, #108]	; (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80087f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008804:	d108      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800880c:	d104      	bne.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800880e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008812:	637b      	str	r3, [r7, #52]	; 0x34
 8008814:	f002 bb19 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8008818:	4b12      	ldr	r3, [pc, #72]	; (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008824:	d119      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800882c:	d115      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800882e:	4b0d      	ldr	r3, [pc, #52]	; (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8008836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800883a:	d30a      	bcc.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800883c:	4b09      	ldr	r3, [pc, #36]	; (8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	0a1b      	lsrs	r3, r3, #8
 8008842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008846:	4a08      	ldr	r2, [pc, #32]	; (8008868 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008848:	fbb2 f3f3 	udiv	r3, r2, r3
 800884c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800884e:	f002 bafc 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008856:	f002 baf8 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	637b      	str	r3, [r7, #52]	; 0x34
 800885e:	f002 baf4 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008862:	bf00      	nop
 8008864:	44020c00 	.word	0x44020c00
 8008868:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800886c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008870:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8008874:	ea50 0104 	orrs.w	r1, r0, r4
 8008878:	f001 8275 	beq.w	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800887c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008880:	2801      	cmp	r0, #1
 8008882:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8008886:	f082 82dd 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800888a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800888e:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8008892:	ea50 0104 	orrs.w	r1, r0, r4
 8008896:	f001 816c 	beq.w	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800889a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800889e:	2801      	cmp	r0, #1
 80088a0:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 80088a4:	f082 82ce 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80088a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088ac:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 80088b0:	ea50 0104 	orrs.w	r1, r0, r4
 80088b4:	f001 8602 	beq.w	800a4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80088b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088bc:	2801      	cmp	r0, #1
 80088be:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 80088c2:	f082 82bf 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80088c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088ca:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 80088ce:	ea50 0104 	orrs.w	r1, r0, r4
 80088d2:	f001 854c 	beq.w	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80088d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088da:	2801      	cmp	r0, #1
 80088dc:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 80088e0:	f082 82b0 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80088e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088e8:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 80088ec:	ea50 0104 	orrs.w	r1, r0, r4
 80088f0:	f001 849e 	beq.w	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80088f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088f8:	2801      	cmp	r0, #1
 80088fa:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 80088fe:	f082 82a1 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008902:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008906:	f1a1 0420 	sub.w	r4, r1, #32
 800890a:	ea50 0104 	orrs.w	r1, r0, r4
 800890e:	f001 83e8 	beq.w	800a0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8008912:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008916:	2801      	cmp	r0, #1
 8008918:	f171 0120 	sbcs.w	r1, r1, #32
 800891c:	f082 8292 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008924:	f1a1 0410 	sub.w	r4, r1, #16
 8008928:	ea50 0104 	orrs.w	r1, r0, r4
 800892c:	f002 8256 	beq.w	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8008930:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008934:	2801      	cmp	r0, #1
 8008936:	f171 0110 	sbcs.w	r1, r1, #16
 800893a:	f082 8283 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800893e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008942:	f1a1 0408 	sub.w	r4, r1, #8
 8008946:	ea50 0104 	orrs.w	r1, r0, r4
 800894a:	f002 81cc 	beq.w	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800894e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008952:	2801      	cmp	r0, #1
 8008954:	f171 0108 	sbcs.w	r1, r1, #8
 8008958:	f082 8274 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800895c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008960:	1f0c      	subs	r4, r1, #4
 8008962:	ea50 0104 	orrs.w	r1, r0, r4
 8008966:	f001 8648 	beq.w	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800896a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800896e:	2801      	cmp	r0, #1
 8008970:	f171 0104 	sbcs.w	r1, r1, #4
 8008974:	f082 8266 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800897c:	1e8c      	subs	r4, r1, #2
 800897e:	ea50 0104 	orrs.w	r1, r0, r4
 8008982:	f002 8143 	beq.w	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8008986:	e9d7 0100 	ldrd	r0, r1, [r7]
 800898a:	2801      	cmp	r0, #1
 800898c:	f171 0102 	sbcs.w	r1, r1, #2
 8008990:	f082 8258 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008994:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008998:	1e4c      	subs	r4, r1, #1
 800899a:	ea50 0104 	orrs.w	r1, r0, r4
 800899e:	f002 80ce 	beq.w	800ab3e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80089a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089a6:	2801      	cmp	r0, #1
 80089a8:	f171 0101 	sbcs.w	r1, r1, #1
 80089ac:	f082 824a 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80089b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089b4:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 80089b8:	4321      	orrs	r1, r4
 80089ba:	f002 8059 	beq.w	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80089be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089c2:	4cd9      	ldr	r4, [pc, #868]	; (8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80089c4:	42a0      	cmp	r0, r4
 80089c6:	f171 0100 	sbcs.w	r1, r1, #0
 80089ca:	f082 823b 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80089ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089d2:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 80089d6:	4321      	orrs	r1, r4
 80089d8:	f001 87d9 	beq.w	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80089dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089e0:	4cd2      	ldr	r4, [pc, #840]	; (8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80089e2:	42a0      	cmp	r0, r4
 80089e4:	f171 0100 	sbcs.w	r1, r1, #0
 80089e8:	f082 822c 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80089ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089f0:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 80089f4:	4321      	orrs	r1, r4
 80089f6:	f001 8751 	beq.w	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80089fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089fe:	4ccc      	ldr	r4, [pc, #816]	; (8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008a00:	42a0      	cmp	r0, r4
 8008a02:	f171 0100 	sbcs.w	r1, r1, #0
 8008a06:	f082 821d 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a0e:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8008a12:	4321      	orrs	r1, r4
 8008a14:	f001 869a 	beq.w	800a74c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8008a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a1c:	4cc5      	ldr	r4, [pc, #788]	; (8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8008a1e:	42a0      	cmp	r0, r4
 8008a20:	f171 0100 	sbcs.w	r1, r1, #0
 8008a24:	f082 820e 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a2c:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8008a30:	4321      	orrs	r1, r4
 8008a32:	f001 8612 	beq.w	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8008a36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a3a:	4cbf      	ldr	r4, [pc, #764]	; (8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8008a3c:	42a0      	cmp	r0, r4
 8008a3e:	f171 0100 	sbcs.w	r1, r1, #0
 8008a42:	f082 81ff 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a4a:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8008a4e:	4321      	orrs	r1, r4
 8008a50:	f002 817e 	beq.w	800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8008a54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a58:	4cb8      	ldr	r4, [pc, #736]	; (8008d3c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008a5a:	42a0      	cmp	r0, r4
 8008a5c:	f171 0100 	sbcs.w	r1, r1, #0
 8008a60:	f082 81f0 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a68:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8008a6c:	4321      	orrs	r1, r4
 8008a6e:	f000 829e 	beq.w	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8008a72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a76:	4cb2      	ldr	r4, [pc, #712]	; (8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008a78:	42a0      	cmp	r0, r4
 8008a7a:	f171 0100 	sbcs.w	r1, r1, #0
 8008a7e:	f082 81e1 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a86:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8008a8a:	4321      	orrs	r1, r4
 8008a8c:	f000 826d 	beq.w	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8008a90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a94:	4cab      	ldr	r4, [pc, #684]	; (8008d44 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008a96:	42a0      	cmp	r0, r4
 8008a98:	f171 0100 	sbcs.w	r1, r1, #0
 8008a9c:	f082 81d2 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008aa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008aa4:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8008aa8:	4321      	orrs	r1, r4
 8008aaa:	f001 800d 	beq.w	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8008aae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ab2:	4ca5      	ldr	r4, [pc, #660]	; (8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008ab4:	42a0      	cmp	r0, r4
 8008ab6:	f171 0100 	sbcs.w	r1, r1, #0
 8008aba:	f082 81c3 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008abe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ac2:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8008ac6:	4321      	orrs	r1, r4
 8008ac8:	f000 81d0 	beq.w	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8008acc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ad0:	4c9e      	ldr	r4, [pc, #632]	; (8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008ad2:	42a0      	cmp	r0, r4
 8008ad4:	f171 0100 	sbcs.w	r1, r1, #0
 8008ad8:	f082 81b4 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008adc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ae0:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8008ae4:	4321      	orrs	r1, r4
 8008ae6:	f000 8142 	beq.w	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8008aea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008aee:	4c98      	ldr	r4, [pc, #608]	; (8008d50 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008af0:	42a0      	cmp	r0, r4
 8008af2:	f171 0100 	sbcs.w	r1, r1, #0
 8008af6:	f082 81a5 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008afa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008afe:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8008b02:	4321      	orrs	r1, r4
 8008b04:	f001 824e 	beq.w	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8008b08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b0c:	4c91      	ldr	r4, [pc, #580]	; (8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8008b0e:	42a0      	cmp	r0, r4
 8008b10:	f171 0100 	sbcs.w	r1, r1, #0
 8008b14:	f082 8196 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b1c:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8008b20:	4321      	orrs	r1, r4
 8008b22:	f001 8197 	beq.w	8009e54 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8008b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b2a:	4c8b      	ldr	r4, [pc, #556]	; (8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008b2c:	42a0      	cmp	r0, r4
 8008b2e:	f171 0100 	sbcs.w	r1, r1, #0
 8008b32:	f082 8187 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b3a:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8008b3e:	4321      	orrs	r1, r4
 8008b40:	f001 8154 	beq.w	8009dec <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8008b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b48:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8008b4c:	f171 0100 	sbcs.w	r1, r1, #0
 8008b50:	f082 8178 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b58:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8008b5c:	4321      	orrs	r1, r4
 8008b5e:	f001 80b7 	beq.w	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8008b62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b66:	f248 0401 	movw	r4, #32769	; 0x8001
 8008b6a:	42a0      	cmp	r0, r4
 8008b6c:	f171 0100 	sbcs.w	r1, r1, #0
 8008b70:	f082 8168 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b78:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8008b7c:	4321      	orrs	r1, r4
 8008b7e:	f001 8064 	beq.w	8009c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8008b82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b86:	f244 0401 	movw	r4, #16385	; 0x4001
 8008b8a:	42a0      	cmp	r0, r4
 8008b8c:	f171 0100 	sbcs.w	r1, r1, #0
 8008b90:	f082 8158 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b98:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8008b9c:	4321      	orrs	r1, r4
 8008b9e:	f001 8011 	beq.w	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8008ba2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ba6:	f242 0401 	movw	r4, #8193	; 0x2001
 8008baa:	42a0      	cmp	r0, r4
 8008bac:	f171 0100 	sbcs.w	r1, r1, #0
 8008bb0:	f082 8148 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008bb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bb8:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8008bbc:	4321      	orrs	r1, r4
 8008bbe:	f000 871e 	beq.w	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8008bc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bc6:	f241 0401 	movw	r4, #4097	; 0x1001
 8008bca:	42a0      	cmp	r0, r4
 8008bcc:	f171 0100 	sbcs.w	r1, r1, #0
 8008bd0:	f082 8138 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008bd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bd8:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8008bdc:	4321      	orrs	r1, r4
 8008bde:	f000 86a8 	beq.w	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8008be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008be6:	f640 0401 	movw	r4, #2049	; 0x801
 8008bea:	42a0      	cmp	r0, r4
 8008bec:	f171 0100 	sbcs.w	r1, r1, #0
 8008bf0:	f082 8128 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008bf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bf8:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8008bfc:	4321      	orrs	r1, r4
 8008bfe:	f000 8632 	beq.w	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8008c02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c06:	f240 4401 	movw	r4, #1025	; 0x401
 8008c0a:	42a0      	cmp	r0, r4
 8008c0c:	f171 0100 	sbcs.w	r1, r1, #0
 8008c10:	f082 8118 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008c14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c18:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8008c1c:	4321      	orrs	r1, r4
 8008c1e:	f000 85b0 	beq.w	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8008c22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c26:	f240 2401 	movw	r4, #513	; 0x201
 8008c2a:	42a0      	cmp	r0, r4
 8008c2c:	f171 0100 	sbcs.w	r1, r1, #0
 8008c30:	f082 8108 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008c34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c38:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8008c3c:	4321      	orrs	r1, r4
 8008c3e:	f000 8535 	beq.w	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8008c42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c46:	f240 1401 	movw	r4, #257	; 0x101
 8008c4a:	42a0      	cmp	r0, r4
 8008c4c:	f171 0100 	sbcs.w	r1, r1, #0
 8008c50:	f082 80f8 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008c54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c58:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8008c5c:	4321      	orrs	r1, r4
 8008c5e:	f000 84ba 	beq.w	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8008c62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c66:	2881      	cmp	r0, #129	; 0x81
 8008c68:	f171 0100 	sbcs.w	r1, r1, #0
 8008c6c:	f082 80ea 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c74:	2821      	cmp	r0, #33	; 0x21
 8008c76:	f171 0100 	sbcs.w	r1, r1, #0
 8008c7a:	d26f      	bcs.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008c7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c80:	4301      	orrs	r1, r0
 8008c82:	f002 80df 	beq.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c8a:	1e42      	subs	r2, r0, #1
 8008c8c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008c90:	2a20      	cmp	r2, #32
 8008c92:	f173 0100 	sbcs.w	r1, r3, #0
 8008c96:	f082 80d5 	bcs.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008c9a:	2a1f      	cmp	r2, #31
 8008c9c:	f202 80d2 	bhi.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008ca0:	a101      	add	r1, pc, #4	; (adr r1, 8008ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008ca2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ca6:	bf00      	nop
 8008ca8:	08009009 	.word	0x08009009
 8008cac:	080090d5 	.word	0x080090d5
 8008cb0:	0800ae45 	.word	0x0800ae45
 8008cb4:	08009195 	.word	0x08009195
 8008cb8:	0800ae45 	.word	0x0800ae45
 8008cbc:	0800ae45 	.word	0x0800ae45
 8008cc0:	0800ae45 	.word	0x0800ae45
 8008cc4:	08009265 	.word	0x08009265
 8008cc8:	0800ae45 	.word	0x0800ae45
 8008ccc:	0800ae45 	.word	0x0800ae45
 8008cd0:	0800ae45 	.word	0x0800ae45
 8008cd4:	0800ae45 	.word	0x0800ae45
 8008cd8:	0800ae45 	.word	0x0800ae45
 8008cdc:	0800ae45 	.word	0x0800ae45
 8008ce0:	0800ae45 	.word	0x0800ae45
 8008ce4:	08009347 	.word	0x08009347
 8008ce8:	0800ae45 	.word	0x0800ae45
 8008cec:	0800ae45 	.word	0x0800ae45
 8008cf0:	0800ae45 	.word	0x0800ae45
 8008cf4:	0800ae45 	.word	0x0800ae45
 8008cf8:	0800ae45 	.word	0x0800ae45
 8008cfc:	0800ae45 	.word	0x0800ae45
 8008d00:	0800ae45 	.word	0x0800ae45
 8008d04:	0800ae45 	.word	0x0800ae45
 8008d08:	0800ae45 	.word	0x0800ae45
 8008d0c:	0800ae45 	.word	0x0800ae45
 8008d10:	0800ae45 	.word	0x0800ae45
 8008d14:	0800ae45 	.word	0x0800ae45
 8008d18:	0800ae45 	.word	0x0800ae45
 8008d1c:	0800ae45 	.word	0x0800ae45
 8008d20:	0800ae45 	.word	0x0800ae45
 8008d24:	0800941d 	.word	0x0800941d
 8008d28:	80000001 	.word	0x80000001
 8008d2c:	40000001 	.word	0x40000001
 8008d30:	20000001 	.word	0x20000001
 8008d34:	10000001 	.word	0x10000001
 8008d38:	08000001 	.word	0x08000001
 8008d3c:	04000001 	.word	0x04000001
 8008d40:	00800001 	.word	0x00800001
 8008d44:	00400001 	.word	0x00400001
 8008d48:	00200001 	.word	0x00200001
 8008d4c:	00100001 	.word	0x00100001
 8008d50:	00080001 	.word	0x00080001
 8008d54:	00040001 	.word	0x00040001
 8008d58:	00020001 	.word	0x00020001
 8008d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d60:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8008d64:	430b      	orrs	r3, r1
 8008d66:	f000 83c4 	beq.w	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8008d6a:	f002 b86b 	b.w	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008d6e:	4ba1      	ldr	r3, [pc, #644]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008d74:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008d78:	633b      	str	r3, [r7, #48]	; 0x30
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d80:	d036      	beq.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d88:	d86b      	bhi.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d90:	d02b      	beq.n	8008dea <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d98:	d863      	bhi.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008da0:	d01b      	beq.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008da8:	d85b      	bhi.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d004      	beq.n	8008dba <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8008db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db6:	d008      	beq.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8008db8:	e053      	b.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dba:	f107 0320 	add.w	r3, r7, #32
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff f8ba 	bl	8007f38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008dc8:	e04e      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dca:	f107 0314 	add.w	r3, r7, #20
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7ff fa1c 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008dd8:	e046      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dda:	f107 0308 	add.w	r3, r7, #8
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7ff fb7e 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008de8:	e03e      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008dea:	4b83      	ldr	r3, [pc, #524]	; (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008dec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008dee:	e03b      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008df0:	4b80      	ldr	r3, [pc, #512]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008df2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008df6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008dfa:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dfc:	4b7d      	ldr	r3, [pc, #500]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0302 	and.w	r3, r3, #2
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d10c      	bne.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d109      	bne.n	8008e22 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e0e:	4b79      	ldr	r3, [pc, #484]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	08db      	lsrs	r3, r3, #3
 8008e14:	f003 0303 	and.w	r3, r3, #3
 8008e18:	4a78      	ldr	r2, [pc, #480]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008e20:	e01e      	b.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e22:	4b74      	ldr	r3, [pc, #464]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e2e:	d106      	bne.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e36:	d102      	bne.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008e38:	4b71      	ldr	r3, [pc, #452]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e3c:	e010      	b.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e3e:	4b6d      	ldr	r3, [pc, #436]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e4a:	d106      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e52:	d102      	bne.n	8008e5a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008e54:	4b6b      	ldr	r3, [pc, #428]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008e56:	637b      	str	r3, [r7, #52]	; 0x34
 8008e58:	e002      	b.n	8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008e5e:	e003      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8008e60:	e002      	b.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8008e62:	2300      	movs	r3, #0
 8008e64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008e66:	bf00      	nop
          }
        }
        break;
 8008e68:	f001 bfef 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008e6c:	4b61      	ldr	r3, [pc, #388]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008e6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008e72:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8008e76:	633b      	str	r3, [r7, #48]	; 0x30
 8008e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e7e:	d036      	beq.n	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8008e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e86:	d86b      	bhi.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008e8e:	d02b      	beq.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e92:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008e96:	d863      	bhi.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e9e:	d01b      	beq.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ea6:	d85b      	bhi.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d004      	beq.n	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008eb4:	d008      	beq.n	8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8008eb6:	e053      	b.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008eb8:	f107 0320 	add.w	r3, r7, #32
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff f83b 	bl	8007f38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ec6:	e04e      	b.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ec8:	f107 0314 	add.w	r3, r7, #20
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7ff f99d 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ed6:	e046      	b.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ed8:	f107 0308 	add.w	r3, r7, #8
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff faff 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ee6:	e03e      	b.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008ee8:	4b43      	ldr	r3, [pc, #268]	; (8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008eea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008eec:	e03b      	b.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008eee:	4b41      	ldr	r3, [pc, #260]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008ef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ef4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008ef8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008efa:	4b3e      	ldr	r3, [pc, #248]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0302 	and.w	r3, r3, #2
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d10c      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d109      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f0c:	4b39      	ldr	r3, [pc, #228]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	08db      	lsrs	r3, r3, #3
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	4a39      	ldr	r2, [pc, #228]	; (8008ffc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008f18:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f1e:	e01e      	b.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f20:	4b34      	ldr	r3, [pc, #208]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f2c:	d106      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f34:	d102      	bne.n	8008f3c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008f36:	4b32      	ldr	r3, [pc, #200]	; (8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008f38:	637b      	str	r3, [r7, #52]	; 0x34
 8008f3a:	e010      	b.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f3c:	4b2d      	ldr	r3, [pc, #180]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f48:	d106      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f50:	d102      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008f52:	4b2c      	ldr	r3, [pc, #176]	; (8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008f54:	637b      	str	r3, [r7, #52]	; 0x34
 8008f56:	e002      	b.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008f5c:	e003      	b.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8008f5e:	e002      	b.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8008f60:	2300      	movs	r3, #0
 8008f62:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008f64:	bf00      	nop
          }
        }
        break;
 8008f66:	f001 bf70 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008f6a:	4b22      	ldr	r3, [pc, #136]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008f6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f74:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d108      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f7c:	f107 0320 	add.w	r3, r7, #32
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe ffd9 	bl	8007f38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008f8a:	f001 bf5e 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	2b40      	cmp	r3, #64	; 0x40
 8008f92:	d108      	bne.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f94:	f107 0314 	add.w	r3, r7, #20
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7ff f937 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008fa2:	f001 bf52 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008faa:	f001 bf4e 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8008fae:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008fb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb8:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d108      	bne.n	8008fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008fc0:	f107 0320 	add.w	r3, r7, #32
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7fe ffb7 	bl	8007f38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008fce:	f001 bf3c 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	2b80      	cmp	r3, #128	; 0x80
 8008fd6:	d108      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fd8:	f107 0314 	add.w	r3, r7, #20
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff f915 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008fe6:	f001 bf30 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008fee:	f001 bf2c 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ff2:	bf00      	nop
 8008ff4:	44020c00 	.word	0x44020c00
 8008ff8:	00bb8000 	.word	0x00bb8000
 8008ffc:	03d09000 	.word	0x03d09000
 8009000:	003d0900 	.word	0x003d0900
 8009004:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009008:	4b9d      	ldr	r3, [pc, #628]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800900a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800900e:	f003 0307 	and.w	r3, r3, #7
 8009012:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	2b00      	cmp	r3, #0
 8009018:	d104      	bne.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800901a:	f7fc ffd7 	bl	8005fcc <HAL_RCC_GetPCLK2Freq>
 800901e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009020:	f001 bf13 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8009024:	4b96      	ldr	r3, [pc, #600]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800902c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009030:	d10a      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	2b01      	cmp	r3, #1
 8009036:	d107      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009038:	f107 0314 	add.w	r3, r7, #20
 800903c:	4618      	mov	r0, r3
 800903e:	f7ff f8e5 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	637b      	str	r3, [r7, #52]	; 0x34
 8009046:	e043      	b.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8009048:	4b8d      	ldr	r3, [pc, #564]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009054:	d10a      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	2b02      	cmp	r3, #2
 800905a:	d107      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800905c:	f107 0308 	add.w	r3, r7, #8
 8009060:	4618      	mov	r0, r3
 8009062:	f7ff fa3d 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	637b      	str	r3, [r7, #52]	; 0x34
 800906a:	e031      	b.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800906c:	4b84      	ldr	r3, [pc, #528]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0302 	and.w	r3, r3, #2
 8009074:	2b02      	cmp	r3, #2
 8009076:	d10c      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907a:	2b03      	cmp	r3, #3
 800907c:	d109      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800907e:	4b80      	ldr	r3, [pc, #512]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	08db      	lsrs	r3, r3, #3
 8009084:	f003 0303 	and.w	r3, r3, #3
 8009088:	4a7e      	ldr	r2, [pc, #504]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800908a:	fa22 f303 	lsr.w	r3, r2, r3
 800908e:	637b      	str	r3, [r7, #52]	; 0x34
 8009090:	e01e      	b.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8009092:	4b7b      	ldr	r3, [pc, #492]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800909a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800909e:	d105      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80090a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a2:	2b04      	cmp	r3, #4
 80090a4:	d102      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80090a6:	4b78      	ldr	r3, [pc, #480]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80090a8:	637b      	str	r3, [r7, #52]	; 0x34
 80090aa:	e011      	b.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80090ac:	4b74      	ldr	r3, [pc, #464]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80090ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090b2:	f003 0302 	and.w	r3, r3, #2
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d106      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80090ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090bc:	2b05      	cmp	r3, #5
 80090be:	d103      	bne.n	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80090c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090c4:	637b      	str	r3, [r7, #52]	; 0x34
 80090c6:	e003      	b.n	80090d0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80090cc:	f001 bebd 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80090d0:	f001 bebb 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80090d4:	4b6a      	ldr	r3, [pc, #424]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80090d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80090da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090de:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80090e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d104      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80090e6:	f7fc ff5b 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 80090ea:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80090ec:	f001 bead 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80090f0:	4b63      	ldr	r3, [pc, #396]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090fc:	d10a      	bne.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	2b08      	cmp	r3, #8
 8009102:	d107      	bne.n	8009114 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009104:	f107 0314 	add.w	r3, r7, #20
 8009108:	4618      	mov	r0, r3
 800910a:	f7ff f87f 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	637b      	str	r3, [r7, #52]	; 0x34
 8009112:	e03d      	b.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	2b10      	cmp	r3, #16
 8009118:	d108      	bne.n	800912c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800911a:	f107 0308 	add.w	r3, r7, #8
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff f9de 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009128:	f001 be8f 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800912c:	4b54      	ldr	r3, [pc, #336]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 0302 	and.w	r3, r3, #2
 8009134:	2b02      	cmp	r3, #2
 8009136:	d10c      	bne.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	2b18      	cmp	r3, #24
 800913c:	d109      	bne.n	8009152 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800913e:	4b50      	ldr	r3, [pc, #320]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	08db      	lsrs	r3, r3, #3
 8009144:	f003 0303 	and.w	r3, r3, #3
 8009148:	4a4e      	ldr	r2, [pc, #312]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800914a:	fa22 f303 	lsr.w	r3, r2, r3
 800914e:	637b      	str	r3, [r7, #52]	; 0x34
 8009150:	e01e      	b.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8009152:	4b4b      	ldr	r3, [pc, #300]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800915a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800915e:	d105      	bne.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	2b20      	cmp	r3, #32
 8009164:	d102      	bne.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8009166:	4b48      	ldr	r3, [pc, #288]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009168:	637b      	str	r3, [r7, #52]	; 0x34
 800916a:	e011      	b.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800916c:	4b44      	ldr	r3, [pc, #272]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800916e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b02      	cmp	r3, #2
 8009178:	d106      	bne.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	2b28      	cmp	r3, #40	; 0x28
 800917e:	d103      	bne.n	8009188 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8009180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009184:	637b      	str	r3, [r7, #52]	; 0x34
 8009186:	e003      	b.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800918c:	f001 be5d 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009190:	f001 be5b 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009194:	4b3a      	ldr	r3, [pc, #232]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009196:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800919a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800919e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80091a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d104      	bne.n	80091b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80091a6:	f7fc fefb 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 80091aa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80091ac:	f001 be4d 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80091b0:	4b33      	ldr	r3, [pc, #204]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091bc:	d10a      	bne.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	2b40      	cmp	r3, #64	; 0x40
 80091c2:	d107      	bne.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091c4:	f107 0314 	add.w	r3, r7, #20
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7ff f81f 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
 80091d2:	e045      	b.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80091d4:	4b2a      	ldr	r3, [pc, #168]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e0:	d10a      	bne.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80091e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e4:	2b80      	cmp	r3, #128	; 0x80
 80091e6:	d107      	bne.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091e8:	f107 0308 	add.w	r3, r7, #8
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7ff f977 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	637b      	str	r3, [r7, #52]	; 0x34
 80091f6:	e033      	b.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80091f8:	4b21      	ldr	r3, [pc, #132]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0302 	and.w	r3, r3, #2
 8009200:	2b02      	cmp	r3, #2
 8009202:	d10c      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8009204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009206:	2bc0      	cmp	r3, #192	; 0xc0
 8009208:	d109      	bne.n	800921e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800920a:	4b1d      	ldr	r3, [pc, #116]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	08db      	lsrs	r3, r3, #3
 8009210:	f003 0303 	and.w	r3, r3, #3
 8009214:	4a1b      	ldr	r2, [pc, #108]	; (8009284 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009216:	fa22 f303 	lsr.w	r3, r2, r3
 800921a:	637b      	str	r3, [r7, #52]	; 0x34
 800921c:	e020      	b.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800921e:	4b18      	ldr	r3, [pc, #96]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009226:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800922a:	d106      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800922c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009232:	d102      	bne.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8009234:	4b14      	ldr	r3, [pc, #80]	; (8009288 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009236:	637b      	str	r3, [r7, #52]	; 0x34
 8009238:	e012      	b.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800923a:	4b11      	ldr	r3, [pc, #68]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800923c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009240:	f003 0302 	and.w	r3, r3, #2
 8009244:	2b02      	cmp	r3, #2
 8009246:	d107      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8009248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800924e:	d103      	bne.n	8009258 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8009250:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009254:	637b      	str	r3, [r7, #52]	; 0x34
 8009256:	e003      	b.n	8009260 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8009258:	2300      	movs	r3, #0
 800925a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800925c:	f001 bdf5 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009260:	f001 bdf3 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009264:	4b06      	ldr	r3, [pc, #24]	; (8009280 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009266:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800926a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800926e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10a      	bne.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009276:	f7fc fe93 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 800927a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800927c:	f001 bde5 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009280:	44020c00 	.word	0x44020c00
 8009284:	03d09000 	.word	0x03d09000
 8009288:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800928c:	4ba0      	ldr	r3, [pc, #640]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009298:	d10b      	bne.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800929a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092a0:	d107      	bne.n	80092b2 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092a2:	f107 0314 	add.w	r3, r7, #20
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fe ffb0 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	637b      	str	r3, [r7, #52]	; 0x34
 80092b0:	e047      	b.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80092b2:	4b97      	ldr	r3, [pc, #604]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092be:	d10b      	bne.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092c6:	d107      	bne.n	80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092c8:	f107 0308 	add.w	r3, r7, #8
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7ff f907 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	637b      	str	r3, [r7, #52]	; 0x34
 80092d6:	e034      	b.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80092d8:	4b8d      	ldr	r3, [pc, #564]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0302 	and.w	r3, r3, #2
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d10d      	bne.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80092ea:	d109      	bne.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092ec:	4b88      	ldr	r3, [pc, #544]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	08db      	lsrs	r3, r3, #3
 80092f2:	f003 0303 	and.w	r3, r3, #3
 80092f6:	4a87      	ldr	r2, [pc, #540]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80092f8:	fa22 f303 	lsr.w	r3, r2, r3
 80092fc:	637b      	str	r3, [r7, #52]	; 0x34
 80092fe:	e020      	b.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8009300:	4b83      	ldr	r3, [pc, #524]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800930c:	d106      	bne.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009314:	d102      	bne.n	800931c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8009316:	4b80      	ldr	r3, [pc, #512]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009318:	637b      	str	r3, [r7, #52]	; 0x34
 800931a:	e012      	b.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800931c:	4b7c      	ldr	r3, [pc, #496]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800931e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009322:	f003 0302 	and.w	r3, r3, #2
 8009326:	2b02      	cmp	r3, #2
 8009328:	d107      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009330:	d103      	bne.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8009332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009336:	637b      	str	r3, [r7, #52]	; 0x34
 8009338:	e003      	b.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800933a:	2300      	movs	r3, #0
 800933c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800933e:	f001 bd84 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009342:	f001 bd82 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009346:	4b72      	ldr	r3, [pc, #456]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009348:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800934c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009350:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009354:	2b00      	cmp	r3, #0
 8009356:	d104      	bne.n	8009362 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009358:	f7fc fe22 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 800935c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800935e:	f001 bd74 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8009362:	4b6b      	ldr	r3, [pc, #428]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800936a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800936e:	d10b      	bne.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8009370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009376:	d107      	bne.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009378:	f107 0314 	add.w	r3, r7, #20
 800937c:	4618      	mov	r0, r3
 800937e:	f7fe ff45 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	637b      	str	r3, [r7, #52]	; 0x34
 8009386:	e047      	b.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8009388:	4b61      	ldr	r3, [pc, #388]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009394:	d10b      	bne.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8009396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800939c:	d107      	bne.n	80093ae <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800939e:	f107 0308 	add.w	r3, r7, #8
 80093a2:	4618      	mov	r0, r3
 80093a4:	f7ff f89c 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	637b      	str	r3, [r7, #52]	; 0x34
 80093ac:	e034      	b.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80093ae:	4b58      	ldr	r3, [pc, #352]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0302 	and.w	r3, r3, #2
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d10d      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093c0:	d109      	bne.n	80093d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093c2:	4b53      	ldr	r3, [pc, #332]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	08db      	lsrs	r3, r3, #3
 80093c8:	f003 0303 	and.w	r3, r3, #3
 80093cc:	4a51      	ldr	r2, [pc, #324]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80093ce:	fa22 f303 	lsr.w	r3, r2, r3
 80093d2:	637b      	str	r3, [r7, #52]	; 0x34
 80093d4:	e020      	b.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80093d6:	4b4e      	ldr	r3, [pc, #312]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e2:	d106      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80093e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093ea:	d102      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80093ec:	4b4a      	ldr	r3, [pc, #296]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80093ee:	637b      	str	r3, [r7, #52]	; 0x34
 80093f0:	e012      	b.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80093f2:	4b47      	ldr	r3, [pc, #284]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80093f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80093f8:	f003 0302 	and.w	r3, r3, #2
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d107      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8009400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009402:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009406:	d103      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8009408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800940c:	637b      	str	r3, [r7, #52]	; 0x34
 800940e:	e003      	b.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8009410:	2300      	movs	r3, #0
 8009412:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009414:	f001 bd19 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009418:	f001 bd17 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800941c:	4b3c      	ldr	r3, [pc, #240]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800941e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009422:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8009426:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	2b00      	cmp	r3, #0
 800942c:	d104      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800942e:	f7fc fdb7 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8009432:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8009434:	f001 bd09 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8009438:	4b35      	ldr	r3, [pc, #212]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009444:	d10b      	bne.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8009446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800944c:	d107      	bne.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800944e:	f107 0314 	add.w	r3, r7, #20
 8009452:	4618      	mov	r0, r3
 8009454:	f7fe feda 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	637b      	str	r3, [r7, #52]	; 0x34
 800945c:	e047      	b.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800945e:	4b2c      	ldr	r3, [pc, #176]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800946a:	d10b      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800946c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009472:	d107      	bne.n	8009484 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009474:	f107 0308 	add.w	r3, r7, #8
 8009478:	4618      	mov	r0, r3
 800947a:	f7ff f831 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	637b      	str	r3, [r7, #52]	; 0x34
 8009482:	e034      	b.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8009484:	4b22      	ldr	r3, [pc, #136]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b02      	cmp	r3, #2
 800948e:	d10d      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8009490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009492:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8009496:	d109      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009498:	4b1d      	ldr	r3, [pc, #116]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	08db      	lsrs	r3, r3, #3
 800949e:	f003 0303 	and.w	r3, r3, #3
 80094a2:	4a1c      	ldr	r2, [pc, #112]	; (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80094a4:	fa22 f303 	lsr.w	r3, r2, r3
 80094a8:	637b      	str	r3, [r7, #52]	; 0x34
 80094aa:	e020      	b.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80094ac:	4b18      	ldr	r3, [pc, #96]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094b8:	d106      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094c0:	d102      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80094c2:	4b15      	ldr	r3, [pc, #84]	; (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80094c4:	637b      	str	r3, [r7, #52]	; 0x34
 80094c6:	e012      	b.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80094c8:	4b11      	ldr	r3, [pc, #68]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80094ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80094ce:	f003 0302 	and.w	r3, r3, #2
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d107      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80094d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80094dc:	d103      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80094de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094e2:	637b      	str	r3, [r7, #52]	; 0x34
 80094e4:	e003      	b.n	80094ee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80094e6:	2300      	movs	r3, #0
 80094e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80094ea:	f001 bcae 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094ee:	f001 bcac 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80094f2:	4b07      	ldr	r3, [pc, #28]	; (8009510 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80094f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80094f8:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 80094fc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80094fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10b      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009504:	f7fc fd4c 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8009508:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800950a:	f001 bc9e 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800950e:	bf00      	nop
 8009510:	44020c00 	.word	0x44020c00
 8009514:	03d09000 	.word	0x03d09000
 8009518:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800951c:	4ba0      	ldr	r3, [pc, #640]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009524:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009528:	d10b      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009530:	d107      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009532:	f107 0314 	add.w	r3, r7, #20
 8009536:	4618      	mov	r0, r3
 8009538:	f7fe fe68 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	637b      	str	r3, [r7, #52]	; 0x34
 8009540:	e047      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8009542:	4b97      	ldr	r3, [pc, #604]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800954a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800954e:	d10b      	bne.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009556:	d107      	bne.n	8009568 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009558:	f107 0308 	add.w	r3, r7, #8
 800955c:	4618      	mov	r0, r3
 800955e:	f7fe ffbf 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	637b      	str	r3, [r7, #52]	; 0x34
 8009566:	e034      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8009568:	4b8d      	ldr	r3, [pc, #564]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 0302 	and.w	r3, r3, #2
 8009570:	2b02      	cmp	r3, #2
 8009572:	d10d      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8009574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009576:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800957a:	d109      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800957c:	4b88      	ldr	r3, [pc, #544]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	08db      	lsrs	r3, r3, #3
 8009582:	f003 0303 	and.w	r3, r3, #3
 8009586:	4a87      	ldr	r2, [pc, #540]	; (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8009588:	fa22 f303 	lsr.w	r3, r2, r3
 800958c:	637b      	str	r3, [r7, #52]	; 0x34
 800958e:	e020      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8009590:	4b83      	ldr	r3, [pc, #524]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800959c:	d106      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095a4:	d102      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80095a6:	4b80      	ldr	r3, [pc, #512]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80095a8:	637b      	str	r3, [r7, #52]	; 0x34
 80095aa:	e012      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80095ac:	4b7c      	ldr	r3, [pc, #496]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80095ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095b2:	f003 0302 	and.w	r3, r3, #2
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d107      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80095ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095bc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80095c0:	d103      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80095c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095c6:	637b      	str	r3, [r7, #52]	; 0x34
 80095c8:	e003      	b.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095ce:	f001 bc3c 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80095d2:	f001 bc3a 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80095d6:	4b72      	ldr	r3, [pc, #456]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80095d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80095dc:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80095e0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d104      	bne.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80095e8:	f7fc fcda 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 80095ec:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80095ee:	f001 bc2c 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80095f2:	4b6b      	ldr	r3, [pc, #428]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095fe:	d10b      	bne.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009606:	d107      	bne.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009608:	f107 0314 	add.w	r3, r7, #20
 800960c:	4618      	mov	r0, r3
 800960e:	f7fe fdfd 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	637b      	str	r3, [r7, #52]	; 0x34
 8009616:	e047      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8009618:	4b61      	ldr	r3, [pc, #388]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009624:	d10b      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800962c:	d107      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800962e:	f107 0308 	add.w	r3, r7, #8
 8009632:	4618      	mov	r0, r3
 8009634:	f7fe ff54 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	637b      	str	r3, [r7, #52]	; 0x34
 800963c:	e034      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800963e:	4b58      	ldr	r3, [pc, #352]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0302 	and.w	r3, r3, #2
 8009646:	2b02      	cmp	r3, #2
 8009648:	d10d      	bne.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009650:	d109      	bne.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009652:	4b53      	ldr	r3, [pc, #332]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	08db      	lsrs	r3, r3, #3
 8009658:	f003 0303 	and.w	r3, r3, #3
 800965c:	4a51      	ldr	r2, [pc, #324]	; (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800965e:	fa22 f303 	lsr.w	r3, r2, r3
 8009662:	637b      	str	r3, [r7, #52]	; 0x34
 8009664:	e020      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8009666:	4b4e      	ldr	r3, [pc, #312]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800966e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009672:	d106      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800967a:	d102      	bne.n	8009682 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800967c:	4b4a      	ldr	r3, [pc, #296]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800967e:	637b      	str	r3, [r7, #52]	; 0x34
 8009680:	e012      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8009682:	4b47      	ldr	r3, [pc, #284]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009688:	f003 0302 	and.w	r3, r3, #2
 800968c:	2b02      	cmp	r3, #2
 800968e:	d107      	bne.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8009690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009692:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009696:	d103      	bne.n	80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8009698:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800969c:	637b      	str	r3, [r7, #52]	; 0x34
 800969e:	e003      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80096a0:	2300      	movs	r3, #0
 80096a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096a4:	f001 bbd1 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80096a8:	f001 bbcf 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80096ac:	4b3c      	ldr	r3, [pc, #240]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80096ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80096b2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80096b6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80096b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d104      	bne.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80096be:	f7fc fc6f 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 80096c2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80096c4:	f001 bbc1 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80096c8:	4b35      	ldr	r3, [pc, #212]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096d4:	d10b      	bne.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80096dc:	d107      	bne.n	80096ee <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096de:	f107 0314 	add.w	r3, r7, #20
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fe fd92 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	637b      	str	r3, [r7, #52]	; 0x34
 80096ec:	e047      	b.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80096ee:	4b2c      	ldr	r3, [pc, #176]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096fa:	d10b      	bne.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80096fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009702:	d107      	bne.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009704:	f107 0308 	add.w	r3, r7, #8
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe fee9 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	637b      	str	r3, [r7, #52]	; 0x34
 8009712:	e034      	b.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8009714:	4b22      	ldr	r3, [pc, #136]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f003 0302 	and.w	r3, r3, #2
 800971c:	2b02      	cmp	r3, #2
 800971e:	d10d      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8009720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009722:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009726:	d109      	bne.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009728:	4b1d      	ldr	r3, [pc, #116]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	08db      	lsrs	r3, r3, #3
 800972e:	f003 0303 	and.w	r3, r3, #3
 8009732:	4a1c      	ldr	r2, [pc, #112]	; (80097a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8009734:	fa22 f303 	lsr.w	r3, r2, r3
 8009738:	637b      	str	r3, [r7, #52]	; 0x34
 800973a:	e020      	b.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800973c:	4b18      	ldr	r3, [pc, #96]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009748:	d106      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800974a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009750:	d102      	bne.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8009752:	4b15      	ldr	r3, [pc, #84]	; (80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8009754:	637b      	str	r3, [r7, #52]	; 0x34
 8009756:	e012      	b.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8009758:	4b11      	ldr	r3, [pc, #68]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800975a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800975e:	f003 0302 	and.w	r3, r3, #2
 8009762:	2b02      	cmp	r3, #2
 8009764:	d107      	bne.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8009766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009768:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800976c:	d103      	bne.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800976e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009772:	637b      	str	r3, [r7, #52]	; 0x34
 8009774:	e003      	b.n	800977e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8009776:	2300      	movs	r3, #0
 8009778:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800977a:	f001 bb66 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800977e:	f001 bb64 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8009782:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009784:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009788:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 800978c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	2b00      	cmp	r3, #0
 8009792:	d10b      	bne.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009794:	f7fc fc04 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8009798:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800979a:	f001 bb56 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800979e:	bf00      	nop
 80097a0:	44020c00 	.word	0x44020c00
 80097a4:	03d09000 	.word	0x03d09000
 80097a8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80097ac:	4ba1      	ldr	r3, [pc, #644]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097b8:	d10b      	bne.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80097ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097c0:	d107      	bne.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097c2:	f107 0314 	add.w	r3, r7, #20
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fe fd20 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	637b      	str	r3, [r7, #52]	; 0x34
 80097d0:	e047      	b.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80097d2:	4b98      	ldr	r3, [pc, #608]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097de:	d10b      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80097e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097e6:	d107      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097e8:	f107 0308 	add.w	r3, r7, #8
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fe fe77 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	637b      	str	r3, [r7, #52]	; 0x34
 80097f6:	e034      	b.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80097f8:	4b8e      	ldr	r3, [pc, #568]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b02      	cmp	r3, #2
 8009802:	d10d      	bne.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8009804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009806:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800980a:	d109      	bne.n	8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800980c:	4b89      	ldr	r3, [pc, #548]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	08db      	lsrs	r3, r3, #3
 8009812:	f003 0303 	and.w	r3, r3, #3
 8009816:	4a88      	ldr	r2, [pc, #544]	; (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009818:	fa22 f303 	lsr.w	r3, r2, r3
 800981c:	637b      	str	r3, [r7, #52]	; 0x34
 800981e:	e020      	b.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8009820:	4b84      	ldr	r3, [pc, #528]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800982c:	d106      	bne.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009834:	d102      	bne.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8009836:	4b81      	ldr	r3, [pc, #516]	; (8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009838:	637b      	str	r3, [r7, #52]	; 0x34
 800983a:	e012      	b.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800983c:	4b7d      	ldr	r3, [pc, #500]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800983e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	2b02      	cmp	r3, #2
 8009848:	d107      	bne.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8009850:	d103      	bne.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8009852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009856:	637b      	str	r3, [r7, #52]	; 0x34
 8009858:	e003      	b.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800985a:	2300      	movs	r3, #0
 800985c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800985e:	f001 baf4 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009862:	f001 baf2 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8009866:	4b73      	ldr	r3, [pc, #460]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009868:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800986c:	f003 0307 	and.w	r3, r3, #7
 8009870:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8009872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009874:	2b00      	cmp	r3, #0
 8009876:	d104      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009878:	f7fc fb92 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 800987c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800987e:	f001 bae4 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8009882:	4b6c      	ldr	r3, [pc, #432]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800988a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800988e:	d10a      	bne.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8009890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009892:	2b01      	cmp	r3, #1
 8009894:	d107      	bne.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009896:	f107 0314 	add.w	r3, r7, #20
 800989a:	4618      	mov	r0, r3
 800989c:	f7fe fcb6 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	637b      	str	r3, [r7, #52]	; 0x34
 80098a4:	e043      	b.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80098a6:	4b63      	ldr	r3, [pc, #396]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098b2:	d10a      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80098b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d107      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098ba:	f107 0308 	add.w	r3, r7, #8
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fe fe0e 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	637b      	str	r3, [r7, #52]	; 0x34
 80098c8:	e031      	b.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80098ca:	4b5a      	ldr	r3, [pc, #360]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0302 	and.w	r3, r3, #2
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d10c      	bne.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	2b03      	cmp	r3, #3
 80098da:	d109      	bne.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80098dc:	4b55      	ldr	r3, [pc, #340]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	08db      	lsrs	r3, r3, #3
 80098e2:	f003 0303 	and.w	r3, r3, #3
 80098e6:	4a54      	ldr	r2, [pc, #336]	; (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80098e8:	fa22 f303 	lsr.w	r3, r2, r3
 80098ec:	637b      	str	r3, [r7, #52]	; 0x34
 80098ee:	e01e      	b.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80098f0:	4b50      	ldr	r3, [pc, #320]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098fc:	d105      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	2b04      	cmp	r3, #4
 8009902:	d102      	bne.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8009904:	4b4d      	ldr	r3, [pc, #308]	; (8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009906:	637b      	str	r3, [r7, #52]	; 0x34
 8009908:	e011      	b.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800990a:	4b4a      	ldr	r3, [pc, #296]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800990c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009910:	f003 0302 	and.w	r3, r3, #2
 8009914:	2b02      	cmp	r3, #2
 8009916:	d106      	bne.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8009918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991a:	2b05      	cmp	r3, #5
 800991c:	d103      	bne.n	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800991e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009922:	637b      	str	r3, [r7, #52]	; 0x34
 8009924:	e003      	b.n	800992e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800992a:	f001 ba8e 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800992e:	f001 ba8c 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8009932:	4b40      	ldr	r3, [pc, #256]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009934:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009938:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800993c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	2b00      	cmp	r3, #0
 8009942:	d104      	bne.n	800994e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009944:	f7fc fb2c 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8009948:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800994a:	f001 ba7e 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800994e:	4b39      	ldr	r3, [pc, #228]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800995a:	d10a      	bne.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800995c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995e:	2b10      	cmp	r3, #16
 8009960:	d107      	bne.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009962:	f107 0314 	add.w	r3, r7, #20
 8009966:	4618      	mov	r0, r3
 8009968:	f7fe fc50 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	637b      	str	r3, [r7, #52]	; 0x34
 8009970:	e043      	b.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8009972:	4b30      	ldr	r3, [pc, #192]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800997a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800997e:	d10a      	bne.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8009980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009982:	2b20      	cmp	r3, #32
 8009984:	d107      	bne.n	8009996 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009986:	f107 0308 	add.w	r3, r7, #8
 800998a:	4618      	mov	r0, r3
 800998c:	f7fe fda8 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	637b      	str	r3, [r7, #52]	; 0x34
 8009994:	e031      	b.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8009996:	4b27      	ldr	r3, [pc, #156]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0302 	and.w	r3, r3, #2
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d10c      	bne.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a4:	2b30      	cmp	r3, #48	; 0x30
 80099a6:	d109      	bne.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80099a8:	4b22      	ldr	r3, [pc, #136]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	08db      	lsrs	r3, r3, #3
 80099ae:	f003 0303 	and.w	r3, r3, #3
 80099b2:	4a21      	ldr	r2, [pc, #132]	; (8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80099b4:	fa22 f303 	lsr.w	r3, r2, r3
 80099b8:	637b      	str	r3, [r7, #52]	; 0x34
 80099ba:	e01e      	b.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80099bc:	4b1d      	ldr	r3, [pc, #116]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099c8:	d105      	bne.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	2b40      	cmp	r3, #64	; 0x40
 80099ce:	d102      	bne.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80099d0:	4b1a      	ldr	r3, [pc, #104]	; (8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80099d2:	637b      	str	r3, [r7, #52]	; 0x34
 80099d4:	e011      	b.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80099d6:	4b17      	ldr	r3, [pc, #92]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80099d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099dc:	f003 0302 	and.w	r3, r3, #2
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d106      	bne.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	2b50      	cmp	r3, #80	; 0x50
 80099e8:	d103      	bne.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80099ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099ee:	637b      	str	r3, [r7, #52]	; 0x34
 80099f0:	e003      	b.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099f6:	f001 ba28 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80099fa:	f001 ba26 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80099fe:	4b0d      	ldr	r3, [pc, #52]	; (8009a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a04:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009a08:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d104      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009a10:	f7fc faf2 	bl	8005ff8 <HAL_RCC_GetPCLK3Freq>
 8009a14:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009a16:	f001 ba18 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8009a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a20:	d10e      	bne.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a22:	f107 0314 	add.w	r3, r7, #20
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7fe fbf0 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a30:	f001 ba0b 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a34:	44020c00 	.word	0x44020c00
 8009a38:	03d09000 	.word	0x03d09000
 8009a3c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8009a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a46:	d108      	bne.n	8009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a48:	f107 0308 	add.w	r3, r7, #8
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fe fd47 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a56:	f001 b9f8 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009a5a:	4ba4      	ldr	r3, [pc, #656]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f003 0302 	and.w	r3, r3, #2
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d10d      	bne.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8009a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a6c:	d109      	bne.n	8009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a6e:	4b9f      	ldr	r3, [pc, #636]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	08db      	lsrs	r3, r3, #3
 8009a74:	f003 0303 	and.w	r3, r3, #3
 8009a78:	4a9d      	ldr	r2, [pc, #628]	; (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a80:	e020      	b.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8009a82:	4b9a      	ldr	r3, [pc, #616]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a8e:	d106      	bne.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8009a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a96:	d102      	bne.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8009a98:	4b96      	ldr	r3, [pc, #600]	; (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a9c:	e012      	b.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009a9e:	4b93      	ldr	r3, [pc, #588]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009aa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009aa4:	f003 0302 	and.w	r3, r3, #2
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d107      	bne.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8009aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aae:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009ab2:	d103      	bne.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8009ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8009aba:	e003      	b.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8009abc:	2300      	movs	r3, #0
 8009abe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009ac0:	f001 b9c3 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009ac4:	f001 b9c1 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8009ac8:	4b88      	ldr	r3, [pc, #544]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009aca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ace:	f003 0307 	and.w	r3, r3, #7
 8009ad2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d104      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8009ada:	f7fc fa45 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8009ade:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8009ae0:	f001 b9b3 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	2b01      	cmp	r3, #1
 8009ae8:	d104      	bne.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8009aea:	f7fc f911 	bl	8005d10 <HAL_RCC_GetSysClockFreq>
 8009aee:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009af0:	f001 b9ab 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d108      	bne.n	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009afa:	f107 0314 	add.w	r3, r7, #20
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fe fb84 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b08:	f001 b99f 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009b0c:	4b77      	ldr	r3, [pc, #476]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b18:	d105      	bne.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	2b03      	cmp	r3, #3
 8009b1e:	d102      	bne.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8009b20:	4b75      	ldr	r3, [pc, #468]	; (8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8009b22:	637b      	str	r3, [r7, #52]	; 0x34
 8009b24:	e023      	b.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009b26:	4b71      	ldr	r3, [pc, #452]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b02      	cmp	r3, #2
 8009b30:	d10c      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	2b04      	cmp	r3, #4
 8009b36:	d109      	bne.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b38:	4b6c      	ldr	r3, [pc, #432]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	08db      	lsrs	r3, r3, #3
 8009b3e:	f003 0303 	and.w	r3, r3, #3
 8009b42:	4a6b      	ldr	r2, [pc, #428]	; (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009b44:	fa22 f303 	lsr.w	r3, r2, r3
 8009b48:	637b      	str	r3, [r7, #52]	; 0x34
 8009b4a:	e010      	b.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8009b4c:	4b67      	ldr	r3, [pc, #412]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b58:	d105      	bne.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5c:	2b05      	cmp	r3, #5
 8009b5e:	d102      	bne.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8009b60:	4b64      	ldr	r3, [pc, #400]	; (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009b62:	637b      	str	r3, [r7, #52]	; 0x34
 8009b64:	e003      	b.n	8009b6e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009b6a:	f001 b96e 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009b6e:	f001 b96c 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8009b72:	4b5e      	ldr	r3, [pc, #376]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b78:	f003 0308 	and.w	r3, r3, #8
 8009b7c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8009b7e:	4b5b      	ldr	r3, [pc, #364]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009b84:	f003 0302 	and.w	r3, r3, #2
 8009b88:	2b02      	cmp	r3, #2
 8009b8a:	d106      	bne.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d103      	bne.n	8009b9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8009b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b96:	637b      	str	r3, [r7, #52]	; 0x34
 8009b98:	e012      	b.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8009b9a:	4b54      	ldr	r3, [pc, #336]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ba8:	d106      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8009baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bac:	2b08      	cmp	r3, #8
 8009bae:	d103      	bne.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8009bb0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8009bb6:	e003      	b.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8009bbc:	f001 b945 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009bc0:	f001 b943 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009bc4:	4b49      	ldr	r3, [pc, #292]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009bc6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009bca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009bce:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d104      	bne.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009bd6:	f7fc f9e3 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8009bda:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009bdc:	f001 b935 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8009be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009be6:	d108      	bne.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009be8:	f107 0308 	add.w	r3, r7, #8
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7fe fc77 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bf6:	f001 b928 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009bfa:	4b3c      	ldr	r3, [pc, #240]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0302 	and.w	r3, r3, #2
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d10d      	bne.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c0c:	d109      	bne.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c0e:	4b37      	ldr	r3, [pc, #220]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	08db      	lsrs	r3, r3, #3
 8009c14:	f003 0303 	and.w	r3, r3, #3
 8009c18:	4a35      	ldr	r2, [pc, #212]	; (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8009c20:	e011      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8009c22:	4b32      	ldr	r3, [pc, #200]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c2e:	d106      	bne.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c36:	d102      	bne.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8009c38:	4b2e      	ldr	r3, [pc, #184]	; (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c3c:	e003      	b.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c42:	f001 b902 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c46:	f001 b900 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009c4a:	4b28      	ldr	r3, [pc, #160]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009c4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009c50:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009c54:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d104      	bne.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009c5c:	f7fc f9a0 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8009c60:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009c62:	f001 b8f2 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8009c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c6c:	d108      	bne.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c6e:	f107 0308 	add.w	r3, r7, #8
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe fc34 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c7c:	f001 b8e5 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009c80:	4b1a      	ldr	r3, [pc, #104]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0302 	and.w	r3, r3, #2
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d10d      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009c92:	d109      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c94:	4b15      	ldr	r3, [pc, #84]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	08db      	lsrs	r3, r3, #3
 8009c9a:	f003 0303 	and.w	r3, r3, #3
 8009c9e:	4a14      	ldr	r2, [pc, #80]	; (8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8009ca6:	e011      	b.n	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8009ca8:	4b10      	ldr	r3, [pc, #64]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cb4:	d106      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8009cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009cbc:	d102      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8009cbe:	4b0d      	ldr	r3, [pc, #52]	; (8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8009cc2:	e003      	b.n	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009cc8:	f001 b8bf 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009ccc:	f001 b8bd 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009cd0:	4b06      	ldr	r3, [pc, #24]	; (8009cec <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009cd2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009cd6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009cda:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10c      	bne.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009ce2:	f7fc f989 	bl	8005ff8 <HAL_RCC_GetPCLK3Freq>
 8009ce6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009ce8:	f001 b8af 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009cec:	44020c00 	.word	0x44020c00
 8009cf0:	03d09000 	.word	0x03d09000
 8009cf4:	003d0900 	.word	0x003d0900
 8009cf8:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d02:	d108      	bne.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d04:	f107 0308 	add.w	r3, r7, #8
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe fbe9 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d12:	f001 b89a 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8009d16:	4b9f      	ldr	r3, [pc, #636]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f003 0302 	and.w	r3, r3, #2
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d10d      	bne.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8009d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d28:	d109      	bne.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d2a:	4b9a      	ldr	r3, [pc, #616]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	08db      	lsrs	r3, r3, #3
 8009d30:	f003 0303 	and.w	r3, r3, #3
 8009d34:	4a98      	ldr	r2, [pc, #608]	; (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009d36:	fa22 f303 	lsr.w	r3, r2, r3
 8009d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d3c:	e011      	b.n	8009d62 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8009d3e:	4b95      	ldr	r3, [pc, #596]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d4a:	d106      	bne.n	8009d5a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d52:	d102      	bne.n	8009d5a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8009d54:	4b91      	ldr	r3, [pc, #580]	; (8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009d56:	637b      	str	r3, [r7, #52]	; 0x34
 8009d58:	e003      	b.n	8009d62 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d5e:	f001 b874 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d62:	f001 b872 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009d66:	4b8b      	ldr	r3, [pc, #556]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009d68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009d6c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009d70:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8009d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d104      	bne.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009d78:	f7fc f93e 	bl	8005ff8 <HAL_RCC_GetPCLK3Freq>
 8009d7c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8009d7e:	f001 b864 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8009d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d88:	d108      	bne.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d8a:	f107 0308 	add.w	r3, r7, #8
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fe fba6 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d98:	f001 b857 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009d9c:	4b7d      	ldr	r3, [pc, #500]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 0302 	and.w	r3, r3, #2
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d10d      	bne.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8009da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009daa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dae:	d109      	bne.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009db0:	4b78      	ldr	r3, [pc, #480]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	08db      	lsrs	r3, r3, #3
 8009db6:	f003 0303 	and.w	r3, r3, #3
 8009dba:	4a77      	ldr	r2, [pc, #476]	; (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8009dc2:	e011      	b.n	8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8009dc4:	4b73      	ldr	r3, [pc, #460]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dd0:	d106      	bne.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009dd8:	d102      	bne.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8009dda:	4b70      	ldr	r3, [pc, #448]	; (8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8009dde:	e003      	b.n	8009de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8009de0:	2300      	movs	r3, #0
 8009de2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009de4:	f001 b831 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009de8:	f001 b82f 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8009dec:	4b69      	ldr	r3, [pc, #420]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009dee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009df2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8009df6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d104      	bne.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009dfe:	f7fc f8cf 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 8009e02:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009e04:	f001 b821 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8009e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e0e:	d108      	bne.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e10:	f107 0308 	add.w	r3, r7, #8
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fe fb63 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e1e:	f001 b814 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8009e22:	4b5c      	ldr	r3, [pc, #368]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f003 0302 	and.w	r3, r3, #2
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d10e      	bne.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8009e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e34:	d10a      	bne.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e36:	4b57      	ldr	r3, [pc, #348]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	08db      	lsrs	r3, r3, #3
 8009e3c:	f003 0303 	and.w	r3, r3, #3
 8009e40:	4a55      	ldr	r2, [pc, #340]	; (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009e42:	fa22 f303 	lsr.w	r3, r2, r3
 8009e46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e48:	f000 bfff 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009e50:	f000 bffb 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009e54:	4b4f      	ldr	r3, [pc, #316]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009e56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009e5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009e66:	d056      	beq.n	8009f16 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8009e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e6a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009e6e:	f200 808b 	bhi.w	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e78:	d03e      	beq.n	8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e80:	f200 8082 	bhi.w	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e8a:	d027      	beq.n	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e92:	d879      	bhi.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e9a:	d017      	beq.n	8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ea2:	d871      	bhi.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d004      	beq.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009eb0:	d004      	beq.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8009eb2:	e069      	b.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009eb4:	f7fc f8a0 	bl	8005ff8 <HAL_RCC_GetPCLK3Freq>
 8009eb8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8009eba:	e068      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ebc:	f107 0314 	add.w	r3, r7, #20
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fe f9a3 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009eca:	e060      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ecc:	f107 0308 	add.w	r3, r7, #8
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7fe fb05 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009eda:	e058      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009edc:	4b2d      	ldr	r3, [pc, #180]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009ede:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ee2:	f003 0302 	and.w	r3, r3, #2
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d103      	bne.n	8009ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8009eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eee:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009ef0:	e04d      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009ef6:	e04a      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009ef8:	4b26      	ldr	r3, [pc, #152]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009efa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f06:	d103      	bne.n	8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8009f08:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009f0c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009f0e:	e03e      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8009f10:	2300      	movs	r3, #0
 8009f12:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009f14:	e03b      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f16:	4b1f      	ldr	r3, [pc, #124]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009f18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f1c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009f20:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f22:	4b1c      	ldr	r3, [pc, #112]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 0302 	and.w	r3, r3, #2
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d10c      	bne.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8009f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d109      	bne.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f34:	4b17      	ldr	r3, [pc, #92]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	08db      	lsrs	r3, r3, #3
 8009f3a:	f003 0303 	and.w	r3, r3, #3
 8009f3e:	4a16      	ldr	r2, [pc, #88]	; (8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009f40:	fa22 f303 	lsr.w	r3, r2, r3
 8009f44:	637b      	str	r3, [r7, #52]	; 0x34
 8009f46:	e01e      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f48:	4b12      	ldr	r3, [pc, #72]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f54:	d106      	bne.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8009f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f5c:	d102      	bne.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009f5e:	4b0f      	ldr	r3, [pc, #60]	; (8009f9c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009f60:	637b      	str	r3, [r7, #52]	; 0x34
 8009f62:	e010      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f64:	4b0b      	ldr	r3, [pc, #44]	; (8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f70:	d106      	bne.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8009f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f78:	d102      	bne.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009f7a:	4b09      	ldr	r3, [pc, #36]	; (8009fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8009f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8009f7e:	e002      	b.n	8009f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009f80:	2300      	movs	r3, #0
 8009f82:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8009f84:	e003      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8009f86:	e002      	b.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8009f8c:	bf00      	nop
          }
        }
        break;
 8009f8e:	f000 bf5c 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f92:	bf00      	nop
 8009f94:	44020c00 	.word	0x44020c00
 8009f98:	03d09000 	.word	0x03d09000
 8009f9c:	003d0900 	.word	0x003d0900
 8009fa0:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009fa4:	4b9e      	ldr	r3, [pc, #632]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009fa6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009faa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009fae:	633b      	str	r3, [r7, #48]	; 0x30
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009fb6:	d056      	beq.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fba:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009fbe:	f200 808b 	bhi.w	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fc8:	d03e      	beq.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8009fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fd0:	f200 8082 	bhi.w	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fda:	d027      	beq.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fe2:	d879      	bhi.n	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fea:	d017      	beq.n	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ff2:	d871      	bhi.n	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d004      	beq.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a000:	d004      	beq.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800a002:	e069      	b.n	800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800a004:	f7fb ffcc 	bl	8005fa0 <HAL_RCC_GetPCLK1Freq>
 800a008:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800a00a:	e068      	b.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a00c:	f107 0314 	add.w	r3, r7, #20
 800a010:	4618      	mov	r0, r3
 800a012:	f7fe f8fb 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a01a:	e060      	b.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a01c:	f107 0308 	add.w	r3, r7, #8
 800a020:	4618      	mov	r0, r3
 800a022:	f7fe fa5d 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a02a:	e058      	b.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a02c:	4b7c      	ldr	r3, [pc, #496]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a02e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a032:	f003 0302 	and.w	r3, r3, #2
 800a036:	2b02      	cmp	r3, #2
 800a038:	d103      	bne.n	800a042 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800a03a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a03e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a040:	e04d      	b.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a046:	e04a      	b.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a048:	4b75      	ldr	r3, [pc, #468]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a04a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a04e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a056:	d103      	bne.n	800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800a058:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a05c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a05e:	e03e      	b.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800a060:	2300      	movs	r3, #0
 800a062:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a064:	e03b      	b.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a066:	4b6e      	ldr	r3, [pc, #440]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a06c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a070:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a072:	4b6b      	ldr	r3, [pc, #428]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0302 	and.w	r3, r3, #2
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d10c      	bne.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a080:	2b00      	cmp	r3, #0
 800a082:	d109      	bne.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a084:	4b66      	ldr	r3, [pc, #408]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	08db      	lsrs	r3, r3, #3
 800a08a:	f003 0303 	and.w	r3, r3, #3
 800a08e:	4a65      	ldr	r2, [pc, #404]	; (800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800a090:	fa22 f303 	lsr.w	r3, r2, r3
 800a094:	637b      	str	r3, [r7, #52]	; 0x34
 800a096:	e01e      	b.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a098:	4b61      	ldr	r3, [pc, #388]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0a4:	d106      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ac:	d102      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a0ae:	4b5e      	ldr	r3, [pc, #376]	; (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800a0b0:	637b      	str	r3, [r7, #52]	; 0x34
 800a0b2:	e010      	b.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0b4:	4b5a      	ldr	r3, [pc, #360]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0c0:	d106      	bne.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800a0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0c8:	d102      	bne.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a0ca:	4b58      	ldr	r3, [pc, #352]	; (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800a0cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a0ce:	e002      	b.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800a0d4:	e003      	b.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800a0d6:	e002      	b.n	800a0de <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a0dc:	bf00      	nop
          }
        }
        break;
 800a0de:	f000 beb4 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800a0e2:	4b4f      	ldr	r3, [pc, #316]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a0e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a0e8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a0ec:	633b      	str	r3, [r7, #48]	; 0x30
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0f4:	d056      	beq.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0fc:	f200 808b 	bhi.w	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a102:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a106:	d03e      	beq.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800a108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a10e:	f200 8082 	bhi.w	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a114:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a118:	d027      	beq.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800a11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a120:	d879      	bhi.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a128:	d017      	beq.n	800a15a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a130:	d871      	bhi.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	2b00      	cmp	r3, #0
 800a136:	d004      	beq.n	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800a138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a13e:	d004      	beq.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800a140:	e069      	b.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a142:	f7fb ff59 	bl	8005ff8 <HAL_RCC_GetPCLK3Freq>
 800a146:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800a148:	e068      	b.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a14a:	f107 0314 	add.w	r3, r7, #20
 800a14e:	4618      	mov	r0, r3
 800a150:	f7fe f85c 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a158:	e060      	b.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a15a:	f107 0308 	add.w	r3, r7, #8
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe f9be 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a168:	e058      	b.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a16a:	4b2d      	ldr	r3, [pc, #180]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a16c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a170:	f003 0302 	and.w	r3, r3, #2
 800a174:	2b02      	cmp	r3, #2
 800a176:	d103      	bne.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800a178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a17c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a17e:	e04d      	b.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800a180:	2300      	movs	r3, #0
 800a182:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a184:	e04a      	b.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a186:	4b26      	ldr	r3, [pc, #152]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a18c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a194:	d103      	bne.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800a196:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a19a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a19c:	e03e      	b.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a1a2:	e03b      	b.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1a4:	4b1e      	ldr	r3, [pc, #120]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a1a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a1aa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a1ae:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1b0:	4b1b      	ldr	r3, [pc, #108]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 0302 	and.w	r3, r3, #2
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d10c      	bne.n	800a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800a1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d109      	bne.n	800a1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a1c2:	4b17      	ldr	r3, [pc, #92]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	08db      	lsrs	r3, r3, #3
 800a1c8:	f003 0303 	and.w	r3, r3, #3
 800a1cc:	4a15      	ldr	r2, [pc, #84]	; (800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800a1ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a1d2:	637b      	str	r3, [r7, #52]	; 0x34
 800a1d4:	e01e      	b.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1d6:	4b12      	ldr	r3, [pc, #72]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1e2:	d106      	bne.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800a1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ea:	d102      	bne.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a1ec:	4b0e      	ldr	r3, [pc, #56]	; (800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800a1ee:	637b      	str	r3, [r7, #52]	; 0x34
 800a1f0:	e010      	b.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1f2:	4b0b      	ldr	r3, [pc, #44]	; (800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a1fe:	d106      	bne.n	800a20e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a206:	d102      	bne.n	800a20e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a208:	4b08      	ldr	r3, [pc, #32]	; (800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800a20a:	637b      	str	r3, [r7, #52]	; 0x34
 800a20c:	e002      	b.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a20e:	2300      	movs	r3, #0
 800a210:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800a212:	e003      	b.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800a214:	e002      	b.n	800a21c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800a216:	2300      	movs	r3, #0
 800a218:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a21a:	bf00      	nop
          }
        }
        break;
 800a21c:	f000 be15 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a220:	44020c00 	.word	0x44020c00
 800a224:	03d09000 	.word	0x03d09000
 800a228:	003d0900 	.word	0x003d0900
 800a22c:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800a230:	4b9e      	ldr	r3, [pc, #632]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a232:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a236:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800a23a:	633b      	str	r3, [r7, #48]	; 0x30
 800a23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800a242:	d056      	beq.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800a244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a246:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800a24a:	f200 808b 	bhi.w	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a254:	d03e      	beq.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a25c:	f200 8082 	bhi.w	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a262:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a266:	d027      	beq.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800a268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a26e:	d879      	bhi.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a276:	d017      	beq.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800a278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a27e:	d871      	bhi.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a282:	2b00      	cmp	r3, #0
 800a284:	d004      	beq.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800a286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a28c:	d004      	beq.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800a28e:	e069      	b.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a290:	f7fb feb2 	bl	8005ff8 <HAL_RCC_GetPCLK3Freq>
 800a294:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800a296:	e068      	b.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a298:	f107 0314 	add.w	r3, r7, #20
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7fd ffb5 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a2a6:	e060      	b.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2a8:	f107 0308 	add.w	r3, r7, #8
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fe f917 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a2b6:	e058      	b.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a2b8:	4b7c      	ldr	r3, [pc, #496]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a2ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a2be:	f003 0302 	and.w	r3, r3, #2
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d103      	bne.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800a2c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ca:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a2cc:	e04d      	b.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a2d2:	e04a      	b.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a2d4:	4b75      	ldr	r3, [pc, #468]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a2d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a2da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2e2:	d103      	bne.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800a2e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a2e8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a2ea:	e03e      	b.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a2f0:	e03b      	b.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2f2:	4b6e      	ldr	r3, [pc, #440]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a2f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a2f8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a2fc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2fe:	4b6b      	ldr	r3, [pc, #428]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 0302 	and.w	r3, r3, #2
 800a306:	2b02      	cmp	r3, #2
 800a308:	d10c      	bne.n	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800a30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d109      	bne.n	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a310:	4b66      	ldr	r3, [pc, #408]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	08db      	lsrs	r3, r3, #3
 800a316:	f003 0303 	and.w	r3, r3, #3
 800a31a:	4a65      	ldr	r2, [pc, #404]	; (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800a31c:	fa22 f303 	lsr.w	r3, r2, r3
 800a320:	637b      	str	r3, [r7, #52]	; 0x34
 800a322:	e01e      	b.n	800a362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a324:	4b61      	ldr	r3, [pc, #388]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a32c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a330:	d106      	bne.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800a332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a338:	d102      	bne.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a33a:	4b5e      	ldr	r3, [pc, #376]	; (800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800a33c:	637b      	str	r3, [r7, #52]	; 0x34
 800a33e:	e010      	b.n	800a362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a340:	4b5a      	ldr	r3, [pc, #360]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a348:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a34c:	d106      	bne.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800a34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a354:	d102      	bne.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a356:	4b58      	ldr	r3, [pc, #352]	; (800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800a358:	637b      	str	r3, [r7, #52]	; 0x34
 800a35a:	e002      	b.n	800a362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a35c:	2300      	movs	r3, #0
 800a35e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800a360:	e003      	b.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800a362:	e002      	b.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800a364:	2300      	movs	r3, #0
 800a366:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a368:	bf00      	nop
          }
        }
        break;
 800a36a:	f000 bd6e 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800a36e:	4b4f      	ldr	r3, [pc, #316]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a370:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a374:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a378:	633b      	str	r3, [r7, #48]	; 0x30
 800a37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a380:	d056      	beq.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800a382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a384:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a388:	f200 808b 	bhi.w	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a392:	d03e      	beq.n	800a412 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800a394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a396:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a39a:	f200 8082 	bhi.w	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a3a4:	d027      	beq.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a3ac:	d879      	bhi.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3b4:	d017      	beq.n	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a3bc:	d871      	bhi.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d004      	beq.n	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a3ca:	d004      	beq.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800a3cc:	e069      	b.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a3ce:	f7fb fe13 	bl	8005ff8 <HAL_RCC_GetPCLK3Freq>
 800a3d2:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800a3d4:	e068      	b.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3d6:	f107 0314 	add.w	r3, r7, #20
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fd ff16 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a3e4:	e060      	b.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3e6:	f107 0308 	add.w	r3, r7, #8
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fe f878 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a3f4:	e058      	b.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a3f6:	4b2d      	ldr	r3, [pc, #180]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a3f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a3fc:	f003 0302 	and.w	r3, r3, #2
 800a400:	2b02      	cmp	r3, #2
 800a402:	d103      	bne.n	800a40c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800a404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a408:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a40a:	e04d      	b.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800a40c:	2300      	movs	r3, #0
 800a40e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a410:	e04a      	b.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a412:	4b26      	ldr	r3, [pc, #152]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a41c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a420:	d103      	bne.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800a422:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a426:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a428:	e03e      	b.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a42e:	e03b      	b.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a430:	4b1e      	ldr	r3, [pc, #120]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a432:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a436:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a43a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a43c:	4b1b      	ldr	r3, [pc, #108]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 0302 	and.w	r3, r3, #2
 800a444:	2b02      	cmp	r3, #2
 800a446:	d10c      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800a448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d109      	bne.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a44e:	4b17      	ldr	r3, [pc, #92]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	08db      	lsrs	r3, r3, #3
 800a454:	f003 0303 	and.w	r3, r3, #3
 800a458:	4a15      	ldr	r2, [pc, #84]	; (800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800a45a:	fa22 f303 	lsr.w	r3, r2, r3
 800a45e:	637b      	str	r3, [r7, #52]	; 0x34
 800a460:	e01e      	b.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a462:	4b12      	ldr	r3, [pc, #72]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a46a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a46e:	d106      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800a470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a476:	d102      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a478:	4b0e      	ldr	r3, [pc, #56]	; (800a4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800a47a:	637b      	str	r3, [r7, #52]	; 0x34
 800a47c:	e010      	b.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a47e:	4b0b      	ldr	r3, [pc, #44]	; (800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a486:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a48a:	d106      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a492:	d102      	bne.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a494:	4b08      	ldr	r3, [pc, #32]	; (800a4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800a496:	637b      	str	r3, [r7, #52]	; 0x34
 800a498:	e002      	b.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800a49e:	e003      	b.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800a4a0:	e002      	b.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a4a6:	bf00      	nop
          }
        }
        break;
 800a4a8:	f000 bccf 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a4ac:	44020c00 	.word	0x44020c00
 800a4b0:	03d09000 	.word	0x03d09000
 800a4b4:	003d0900 	.word	0x003d0900
 800a4b8:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800a4bc:	4b9e      	ldr	r3, [pc, #632]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a4be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a4c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a4c6:	633b      	str	r3, [r7, #48]	; 0x30
 800a4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4ce:	d056      	beq.n	800a57e <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800a4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4d6:	f200 808b 	bhi.w	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4e0:	d03e      	beq.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800a4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4e8:	f200 8082 	bhi.w	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a4f2:	d027      	beq.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a4fa:	d879      	bhi.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a502:	d017      	beq.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800a504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a50a:	d871      	bhi.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d004      	beq.n	800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800a512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a518:	d004      	beq.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800a51a:	e069      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a51c:	f7fb fd6c 	bl	8005ff8 <HAL_RCC_GetPCLK3Freq>
 800a520:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800a522:	e068      	b.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a524:	f107 0314 	add.w	r3, r7, #20
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fd fe6f 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a532:	e060      	b.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a534:	f107 0308 	add.w	r3, r7, #8
 800a538:	4618      	mov	r0, r3
 800a53a:	f7fd ffd1 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a542:	e058      	b.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a544:	4b7c      	ldr	r3, [pc, #496]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a546:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a54a:	f003 0302 	and.w	r3, r3, #2
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d103      	bne.n	800a55a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800a552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a556:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a558:	e04d      	b.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a55e:	e04a      	b.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a560:	4b75      	ldr	r3, [pc, #468]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a56a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a56e:	d103      	bne.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800a570:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a574:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a576:	e03e      	b.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a57c:	e03b      	b.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a57e:	4b6e      	ldr	r3, [pc, #440]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a584:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a588:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a58a:	4b6b      	ldr	r3, [pc, #428]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b02      	cmp	r3, #2
 800a594:	d10c      	bne.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800a596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d109      	bne.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a59c:	4b66      	ldr	r3, [pc, #408]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	08db      	lsrs	r3, r3, #3
 800a5a2:	f003 0303 	and.w	r3, r3, #3
 800a5a6:	4a65      	ldr	r2, [pc, #404]	; (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800a5a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ac:	637b      	str	r3, [r7, #52]	; 0x34
 800a5ae:	e01e      	b.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5b0:	4b61      	ldr	r3, [pc, #388]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a5b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5bc:	d106      	bne.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800a5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5c4:	d102      	bne.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a5c6:	4b5e      	ldr	r3, [pc, #376]	; (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800a5c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a5ca:	e010      	b.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5cc:	4b5a      	ldr	r3, [pc, #360]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5d8:	d106      	bne.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800a5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5e0:	d102      	bne.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a5e2:	4b58      	ldr	r3, [pc, #352]	; (800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800a5e4:	637b      	str	r3, [r7, #52]	; 0x34
 800a5e6:	e002      	b.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800a5ec:	e003      	b.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800a5ee:	e002      	b.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a5f4:	bf00      	nop
          }
        }
        break;
 800a5f6:	f000 bc28 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a5fa:	4b4f      	ldr	r3, [pc, #316]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a5fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a604:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800a606:	4b4c      	ldr	r3, [pc, #304]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a60e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a612:	d106      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800a614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a616:	2b00      	cmp	r3, #0
 800a618:	d103      	bne.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800a61a:	4b4a      	ldr	r3, [pc, #296]	; (800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800a61c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800a61e:	f000 bc14 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800a622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a628:	d108      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a62a:	f107 0320 	add.w	r3, r7, #32
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fd fc82 	bl	8007f38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a638:	f000 bc07 	b.w	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a642:	d107      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a644:	f107 0314 	add.w	r3, r7, #20
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fd fddf 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a652:	e3fa      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a654:	2300      	movs	r3, #0
 800a656:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a658:	e3f7      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800a65a:	4b37      	ldr	r3, [pc, #220]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a65c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a660:	f003 0307 	and.w	r3, r3, #7
 800a664:	633b      	str	r3, [r7, #48]	; 0x30
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	2b04      	cmp	r3, #4
 800a66a:	d861      	bhi.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800a66c:	a201      	add	r2, pc, #4	; (adr r2, 800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800a66e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a672:	bf00      	nop
 800a674:	0800a689 	.word	0x0800a689
 800a678:	0800a699 	.word	0x0800a699
 800a67c:	0800a6a9 	.word	0x0800a6a9
 800a680:	0800a6b9 	.word	0x0800a6b9
 800a684:	0800a6bf 	.word	0x0800a6bf
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a688:	f107 0320 	add.w	r3, r7, #32
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fd fc53 	bl	8007f38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a694:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a696:	e04e      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a698:	f107 0314 	add.w	r3, r7, #20
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7fd fdb5 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a6a6:	e046      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6a8:	f107 0308 	add.w	r3, r7, #8
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7fd ff17 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a6b6:	e03e      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a6b8:	4b23      	ldr	r3, [pc, #140]	; (800a748 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800a6ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a6bc:	e03b      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6be:	4b1e      	ldr	r3, [pc, #120]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a6c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a6c4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a6c8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6ca:	4b1b      	ldr	r3, [pc, #108]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 0302 	and.w	r3, r3, #2
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d10c      	bne.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800a6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d109      	bne.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a6dc:	4b16      	ldr	r3, [pc, #88]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	08db      	lsrs	r3, r3, #3
 800a6e2:	f003 0303 	and.w	r3, r3, #3
 800a6e6:	4a15      	ldr	r2, [pc, #84]	; (800a73c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800a6e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ec:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ee:	e01e      	b.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6f0:	4b11      	ldr	r3, [pc, #68]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6fc:	d106      	bne.n	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800a6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a704:	d102      	bne.n	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a706:	4b0e      	ldr	r3, [pc, #56]	; (800a740 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800a708:	637b      	str	r3, [r7, #52]	; 0x34
 800a70a:	e010      	b.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a70c:	4b0a      	ldr	r3, [pc, #40]	; (800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a714:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a718:	d106      	bne.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800a71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a720:	d102      	bne.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a722:	4b08      	ldr	r3, [pc, #32]	; (800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800a724:	637b      	str	r3, [r7, #52]	; 0x34
 800a726:	e002      	b.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a728:	2300      	movs	r3, #0
 800a72a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800a72c:	e003      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800a72e:	e002      	b.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800a730:	2300      	movs	r3, #0
 800a732:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a734:	bf00      	nop
          }
        }
        break;
 800a736:	e388      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a738:	44020c00 	.word	0x44020c00
 800a73c:	03d09000 	.word	0x03d09000
 800a740:	003d0900 	.word	0x003d0900
 800a744:	007a1200 	.word	0x007a1200
 800a748:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800a74c:	4ba9      	ldr	r3, [pc, #676]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a74e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a756:	633b      	str	r3, [r7, #48]	; 0x30
 800a758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75a:	2b20      	cmp	r3, #32
 800a75c:	f200 809a 	bhi.w	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800a760:	a201      	add	r2, pc, #4	; (adr r2, 800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800a762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a766:	bf00      	nop
 800a768:	0800a7ed 	.word	0x0800a7ed
 800a76c:	0800a895 	.word	0x0800a895
 800a770:	0800a895 	.word	0x0800a895
 800a774:	0800a895 	.word	0x0800a895
 800a778:	0800a895 	.word	0x0800a895
 800a77c:	0800a895 	.word	0x0800a895
 800a780:	0800a895 	.word	0x0800a895
 800a784:	0800a895 	.word	0x0800a895
 800a788:	0800a7fd 	.word	0x0800a7fd
 800a78c:	0800a895 	.word	0x0800a895
 800a790:	0800a895 	.word	0x0800a895
 800a794:	0800a895 	.word	0x0800a895
 800a798:	0800a895 	.word	0x0800a895
 800a79c:	0800a895 	.word	0x0800a895
 800a7a0:	0800a895 	.word	0x0800a895
 800a7a4:	0800a895 	.word	0x0800a895
 800a7a8:	0800a80d 	.word	0x0800a80d
 800a7ac:	0800a895 	.word	0x0800a895
 800a7b0:	0800a895 	.word	0x0800a895
 800a7b4:	0800a895 	.word	0x0800a895
 800a7b8:	0800a895 	.word	0x0800a895
 800a7bc:	0800a895 	.word	0x0800a895
 800a7c0:	0800a895 	.word	0x0800a895
 800a7c4:	0800a895 	.word	0x0800a895
 800a7c8:	0800a81d 	.word	0x0800a81d
 800a7cc:	0800a895 	.word	0x0800a895
 800a7d0:	0800a895 	.word	0x0800a895
 800a7d4:	0800a895 	.word	0x0800a895
 800a7d8:	0800a895 	.word	0x0800a895
 800a7dc:	0800a895 	.word	0x0800a895
 800a7e0:	0800a895 	.word	0x0800a895
 800a7e4:	0800a895 	.word	0x0800a895
 800a7e8:	0800a823 	.word	0x0800a823
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7ec:	f107 0320 	add.w	r3, r7, #32
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7fd fba1 	bl	8007f38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a7fa:	e04e      	b.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7fc:	f107 0314 	add.w	r3, r7, #20
 800a800:	4618      	mov	r0, r3
 800a802:	f7fd fd03 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a80a:	e046      	b.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a80c:	f107 0308 	add.w	r3, r7, #8
 800a810:	4618      	mov	r0, r3
 800a812:	f7fd fe65 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a81a:	e03e      	b.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a81c:	4b76      	ldr	r3, [pc, #472]	; (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a81e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a820:	e03b      	b.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a822:	4b74      	ldr	r3, [pc, #464]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a828:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a82c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a82e:	4b71      	ldr	r3, [pc, #452]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0302 	and.w	r3, r3, #2
 800a836:	2b02      	cmp	r3, #2
 800a838:	d10c      	bne.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800a83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d109      	bne.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a840:	4b6c      	ldr	r3, [pc, #432]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	08db      	lsrs	r3, r3, #3
 800a846:	f003 0303 	and.w	r3, r3, #3
 800a84a:	4a6c      	ldr	r2, [pc, #432]	; (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a84c:	fa22 f303 	lsr.w	r3, r2, r3
 800a850:	637b      	str	r3, [r7, #52]	; 0x34
 800a852:	e01e      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a854:	4b67      	ldr	r3, [pc, #412]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a85c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a860:	d106      	bne.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800a862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a868:	d102      	bne.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a86a:	4b65      	ldr	r3, [pc, #404]	; (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a86c:	637b      	str	r3, [r7, #52]	; 0x34
 800a86e:	e010      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a870:	4b60      	ldr	r3, [pc, #384]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a87c:	d106      	bne.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800a87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a884:	d102      	bne.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a886:	4b5f      	ldr	r3, [pc, #380]	; (800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a888:	637b      	str	r3, [r7, #52]	; 0x34
 800a88a:	e002      	b.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800a890:	e003      	b.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800a892:	e002      	b.n	800a89a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800a894:	2300      	movs	r3, #0
 800a896:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a898:	bf00      	nop
          }
        }
        break;
 800a89a:	e2d6      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a89c:	4b55      	ldr	r3, [pc, #340]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a89e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a8a2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a8a6:	633b      	str	r3, [r7, #48]	; 0x30
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ae:	d031      	beq.n	800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800a8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8b6:	d866      	bhi.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ba:	2bc0      	cmp	r3, #192	; 0xc0
 800a8bc:	d027      	beq.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800a8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c0:	2bc0      	cmp	r3, #192	; 0xc0
 800a8c2:	d860      	bhi.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c6:	2b80      	cmp	r3, #128	; 0x80
 800a8c8:	d019      	beq.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8cc:	2b80      	cmp	r3, #128	; 0x80
 800a8ce:	d85a      	bhi.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d003      	beq.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d8:	2b40      	cmp	r3, #64	; 0x40
 800a8da:	d008      	beq.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800a8dc:	e053      	b.n	800a986 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8de:	f107 0320 	add.w	r3, r7, #32
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fd fb28 	bl	8007f38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a8ec:	e04e      	b.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ee:	f107 0314 	add.w	r3, r7, #20
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fd fc8a 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a8fc:	e046      	b.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8fe:	f107 0308 	add.w	r3, r7, #8
 800a902:	4618      	mov	r0, r3
 800a904:	f7fd fdec 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a90c:	e03e      	b.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a90e:	4b3a      	ldr	r3, [pc, #232]	; (800a9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a910:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a912:	e03b      	b.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a914:	4b37      	ldr	r3, [pc, #220]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a91a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a91e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a920:	4b34      	ldr	r3, [pc, #208]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 0302 	and.w	r3, r3, #2
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d10c      	bne.n	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800a92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d109      	bne.n	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a932:	4b30      	ldr	r3, [pc, #192]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	08db      	lsrs	r3, r3, #3
 800a938:	f003 0303 	and.w	r3, r3, #3
 800a93c:	4a2f      	ldr	r2, [pc, #188]	; (800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a93e:	fa22 f303 	lsr.w	r3, r2, r3
 800a942:	637b      	str	r3, [r7, #52]	; 0x34
 800a944:	e01e      	b.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a946:	4b2b      	ldr	r3, [pc, #172]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a94e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a952:	d106      	bne.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800a954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a95a:	d102      	bne.n	800a962 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a95c:	4b28      	ldr	r3, [pc, #160]	; (800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a95e:	637b      	str	r3, [r7, #52]	; 0x34
 800a960:	e010      	b.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a962:	4b24      	ldr	r3, [pc, #144]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a96a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a96e:	d106      	bne.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a976:	d102      	bne.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a978:	4b22      	ldr	r3, [pc, #136]	; (800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a97a:	637b      	str	r3, [r7, #52]	; 0x34
 800a97c:	e002      	b.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a97e:	2300      	movs	r3, #0
 800a980:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800a982:	e003      	b.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800a984:	e002      	b.n	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800a986:	2300      	movs	r3, #0
 800a988:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a98a:	bf00      	nop
          }
        }
        break;
 800a98c:	e25d      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800a98e:	4b19      	ldr	r3, [pc, #100]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a994:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800a998:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d103      	bne.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a9a0:	f7fb fb14 	bl	8005fcc <HAL_RCC_GetPCLK2Freq>
 800a9a4:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a9a6:	e250      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800a9a8:	4b12      	ldr	r3, [pc, #72]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9b4:	d10b      	bne.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9bc:	d107      	bne.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9be:	f107 0314 	add.w	r3, r7, #20
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7fd fc22 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a9cc:	e04f      	b.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800a9ce:	4b09      	ldr	r3, [pc, #36]	; (800a9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9da:	d115      	bne.n	800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9e2:	d111      	bne.n	800aa08 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9e4:	f107 0308 	add.w	r3, r7, #8
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fd fd79 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a9f2:	e03c      	b.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800a9f4:	44020c00 	.word	0x44020c00
 800a9f8:	00bb8000 	.word	0x00bb8000
 800a9fc:	03d09000 	.word	0x03d09000
 800aa00:	003d0900 	.word	0x003d0900
 800aa04:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800aa08:	4b94      	ldr	r3, [pc, #592]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 0302 	and.w	r3, r3, #2
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d10d      	bne.n	800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800aa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa16:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800aa1a:	d109      	bne.n	800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa1c:	4b8f      	ldr	r3, [pc, #572]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	08db      	lsrs	r3, r3, #3
 800aa22:	f003 0303 	and.w	r3, r3, #3
 800aa26:	4a8e      	ldr	r2, [pc, #568]	; (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800aa28:	fa22 f303 	lsr.w	r3, r2, r3
 800aa2c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa2e:	e01e      	b.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800aa30:	4b8a      	ldr	r3, [pc, #552]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa3c:	d106      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa44:	d102      	bne.n	800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800aa46:	4b87      	ldr	r3, [pc, #540]	; (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800aa48:	637b      	str	r3, [r7, #52]	; 0x34
 800aa4a:	e010      	b.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800aa4c:	4b83      	ldr	r3, [pc, #524]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa58:	d106      	bne.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800aa60:	d102      	bne.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800aa62:	4b81      	ldr	r3, [pc, #516]	; (800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800aa64:	637b      	str	r3, [r7, #52]	; 0x34
 800aa66:	e002      	b.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aa6c:	e1ed      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aa6e:	e1ec      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800aa70:	4b7a      	ldr	r3, [pc, #488]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aa72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa76:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aa7a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d103      	bne.n	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800aa82:	f7fb fab9 	bl	8005ff8 <HAL_RCC_GetPCLK3Freq>
 800aa86:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800aa88:	e1df      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800aa8a:	4b74      	ldr	r3, [pc, #464]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa96:	d10b      	bne.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800aa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa9e:	d107      	bne.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaa0:	f107 0314 	add.w	r3, r7, #20
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fd fbb1 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	637b      	str	r3, [r7, #52]	; 0x34
 800aaae:	e045      	b.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800aab0:	4b6a      	ldr	r3, [pc, #424]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aabc:	d10b      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aac4:	d107      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aac6:	f107 0308 	add.w	r3, r7, #8
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7fd fd08 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	637b      	str	r3, [r7, #52]	; 0x34
 800aad4:	e032      	b.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800aad6:	4b61      	ldr	r3, [pc, #388]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 0302 	and.w	r3, r3, #2
 800aade:	2b02      	cmp	r3, #2
 800aae0:	d10d      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800aae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aae8:	d109      	bne.n	800aafe <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aaea:	4b5c      	ldr	r3, [pc, #368]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	08db      	lsrs	r3, r3, #3
 800aaf0:	f003 0303 	and.w	r3, r3, #3
 800aaf4:	4a5a      	ldr	r2, [pc, #360]	; (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800aaf6:	fa22 f303 	lsr.w	r3, r2, r3
 800aafa:	637b      	str	r3, [r7, #52]	; 0x34
 800aafc:	e01e      	b.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800aafe:	4b57      	ldr	r3, [pc, #348]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab0a:	d106      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800ab0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab12:	d102      	bne.n	800ab1a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800ab14:	4b53      	ldr	r3, [pc, #332]	; (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800ab16:	637b      	str	r3, [r7, #52]	; 0x34
 800ab18:	e010      	b.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800ab1a:	4b50      	ldr	r3, [pc, #320]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab26:	d106      	bne.n	800ab36 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800ab28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800ab2e:	d102      	bne.n	800ab36 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800ab30:	4b4d      	ldr	r3, [pc, #308]	; (800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800ab32:	637b      	str	r3, [r7, #52]	; 0x34
 800ab34:	e002      	b.n	800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800ab36:	2300      	movs	r3, #0
 800ab38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ab3a:	e186      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ab3c:	e185      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ab3e:	4b47      	ldr	r3, [pc, #284]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ab40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab44:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800ab48:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d103      	bne.n	800ab58 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800ab50:	f7fb fa3c 	bl	8005fcc <HAL_RCC_GetPCLK2Freq>
 800ab54:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800ab56:	e178      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800ab58:	4b40      	ldr	r3, [pc, #256]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab64:	d10b      	bne.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800ab66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab6c:	d107      	bne.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab6e:	f107 0314 	add.w	r3, r7, #20
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7fd fb4a 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	637b      	str	r3, [r7, #52]	; 0x34
 800ab7c:	e045      	b.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800ab7e:	4b37      	ldr	r3, [pc, #220]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab8a:	d10b      	bne.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab92:	d107      	bne.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab94:	f107 0308 	add.w	r3, r7, #8
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7fd fca1 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	637b      	str	r3, [r7, #52]	; 0x34
 800aba2:	e032      	b.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800aba4:	4b2d      	ldr	r3, [pc, #180]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 0302 	and.w	r3, r3, #2
 800abac:	2b02      	cmp	r3, #2
 800abae:	d10d      	bne.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800abb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb2:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800abb6:	d109      	bne.n	800abcc <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800abb8:	4b28      	ldr	r3, [pc, #160]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	08db      	lsrs	r3, r3, #3
 800abbe:	f003 0303 	and.w	r3, r3, #3
 800abc2:	4a27      	ldr	r2, [pc, #156]	; (800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800abc4:	fa22 f303 	lsr.w	r3, r2, r3
 800abc8:	637b      	str	r3, [r7, #52]	; 0x34
 800abca:	e01e      	b.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800abcc:	4b23      	ldr	r3, [pc, #140]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800abd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abd8:	d106      	bne.n	800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abe0:	d102      	bne.n	800abe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800abe2:	4b20      	ldr	r3, [pc, #128]	; (800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800abe4:	637b      	str	r3, [r7, #52]	; 0x34
 800abe6:	e010      	b.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800abe8:	4b1c      	ldr	r3, [pc, #112]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abf4:	d106      	bne.n	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800abf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800abfc:	d102      	bne.n	800ac04 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800abfe:	4b1a      	ldr	r3, [pc, #104]	; (800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800ac00:	637b      	str	r3, [r7, #52]	; 0x34
 800ac02:	e002      	b.n	800ac0a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800ac04:	2300      	movs	r3, #0
 800ac06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ac08:	e11f      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ac0a:	e11e      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800ac0c:	4b13      	ldr	r3, [pc, #76]	; (800ac5c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800ac0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ac12:	f003 0303 	and.w	r3, r3, #3
 800ac16:	633b      	str	r3, [r7, #48]	; 0x30
 800ac18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1a:	2b03      	cmp	r3, #3
 800ac1c:	d85f      	bhi.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800ac1e:	a201      	add	r2, pc, #4	; (adr r2, 800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800ac20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac24:	0800ac35 	.word	0x0800ac35
 800ac28:	0800ac3d 	.word	0x0800ac3d
 800ac2c:	0800ac4d 	.word	0x0800ac4d
 800ac30:	0800ac6d 	.word	0x0800ac6d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800ac34:	f7fb f998 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 800ac38:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800ac3a:	e053      	b.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac3c:	f107 0320 	add.w	r3, r7, #32
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fd f979 	bl	8007f38 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac48:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ac4a:	e04b      	b.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac4c:	f107 0314 	add.w	r3, r7, #20
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fd fadb 	bl	800820c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ac5a:	e043      	b.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800ac5c:	44020c00 	.word	0x44020c00
 800ac60:	03d09000 	.word	0x03d09000
 800ac64:	003d0900 	.word	0x003d0900
 800ac68:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac6c:	4b79      	ldr	r3, [pc, #484]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ac6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ac72:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ac76:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac78:	4b76      	ldr	r3, [pc, #472]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 0302 	and.w	r3, r3, #2
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d10c      	bne.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800ac84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d109      	bne.n	800ac9e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac8a:	4b72      	ldr	r3, [pc, #456]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	08db      	lsrs	r3, r3, #3
 800ac90:	f003 0303 	and.w	r3, r3, #3
 800ac94:	4a70      	ldr	r2, [pc, #448]	; (800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800ac96:	fa22 f303 	lsr.w	r3, r2, r3
 800ac9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac9c:	e01e      	b.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac9e:	4b6d      	ldr	r3, [pc, #436]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acaa:	d106      	bne.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800acac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acb2:	d102      	bne.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800acb4:	4b69      	ldr	r3, [pc, #420]	; (800ae5c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800acb6:	637b      	str	r3, [r7, #52]	; 0x34
 800acb8:	e010      	b.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acba:	4b66      	ldr	r3, [pc, #408]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acc6:	d106      	bne.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800acc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acce:	d102      	bne.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800acd0:	4b63      	ldr	r3, [pc, #396]	; (800ae60 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800acd2:	637b      	str	r3, [r7, #52]	; 0x34
 800acd4:	e002      	b.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800acd6:	2300      	movs	r3, #0
 800acd8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800acda:	e003      	b.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800acdc:	e002      	b.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800acde:	2300      	movs	r3, #0
 800ace0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800ace2:	bf00      	nop
          }
        }
        break;
 800ace4:	e0b1      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800ace6:	4b5b      	ldr	r3, [pc, #364]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ace8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800acec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800acf0:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800acf2:	4b58      	ldr	r3, [pc, #352]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800acf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800acf8:	f003 0302 	and.w	r3, r3, #2
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d106      	bne.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800ad00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d103      	bne.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800ad06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad0c:	e01f      	b.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800ad0e:	4b51      	ldr	r3, [pc, #324]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ad10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ad14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad1c:	d106      	bne.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800ad1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad20:	2b40      	cmp	r3, #64	; 0x40
 800ad22:	d103      	bne.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800ad24:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800ad28:	637b      	str	r3, [r7, #52]	; 0x34
 800ad2a:	e010      	b.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800ad2c:	4b49      	ldr	r3, [pc, #292]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad38:	d106      	bne.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	2b80      	cmp	r3, #128	; 0x80
 800ad3e:	d103      	bne.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800ad40:	f248 0312 	movw	r3, #32786	; 0x8012
 800ad44:	637b      	str	r3, [r7, #52]	; 0x34
 800ad46:	e002      	b.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800ad4c:	e07d      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ad4e:	e07c      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800ad50:	4b40      	ldr	r3, [pc, #256]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ad52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ad56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ad5a:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800ad5c:	4b3d      	ldr	r3, [pc, #244]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad68:	d105      	bne.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d102      	bne.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800ad70:	4b3c      	ldr	r3, [pc, #240]	; (800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800ad72:	637b      	str	r3, [r7, #52]	; 0x34
 800ad74:	e031      	b.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800ad76:	4b37      	ldr	r3, [pc, #220]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad82:	d10a      	bne.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	2b10      	cmp	r3, #16
 800ad88:	d107      	bne.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad8a:	f107 0320 	add.w	r3, r7, #32
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fd f8d2 	bl	8007f38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	637b      	str	r3, [r7, #52]	; 0x34
 800ad98:	e01f      	b.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800ad9a:	4b2e      	ldr	r3, [pc, #184]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ad9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ada0:	f003 0302 	and.w	r3, r3, #2
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	d106      	bne.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800ada8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adaa:	2b20      	cmp	r3, #32
 800adac:	d103      	bne.n	800adb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800adae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adb2:	637b      	str	r3, [r7, #52]	; 0x34
 800adb4:	e011      	b.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800adb6:	4b27      	ldr	r3, [pc, #156]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800adb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800adbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800adc4:	d106      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	2b30      	cmp	r3, #48	; 0x30
 800adca:	d103      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800adcc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800add0:	637b      	str	r3, [r7, #52]	; 0x34
 800add2:	e002      	b.n	800adda <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800add4:	2300      	movs	r3, #0
 800add6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800add8:	e037      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800adda:	e036      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800addc:	4b1d      	ldr	r3, [pc, #116]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800adde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ade2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ade6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adea:	2b10      	cmp	r3, #16
 800adec:	d107      	bne.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adee:	f107 0320 	add.w	r3, r7, #32
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fd f8a0 	bl	8007f38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800adfc:	e025      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800adfe:	4b15      	ldr	r3, [pc, #84]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae0a:	d10a      	bne.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800ae0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0e:	2b20      	cmp	r3, #32
 800ae10:	d107      	bne.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae12:	f107 0308 	add.w	r3, r7, #8
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7fd fb62 	bl	80084e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	637b      	str	r3, [r7, #52]	; 0x34
 800ae20:	e00f      	b.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800ae22:	4b0c      	ldr	r3, [pc, #48]	; (800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae2e:	d105      	bne.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800ae30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae32:	2b30      	cmp	r3, #48	; 0x30
 800ae34:	d102      	bne.n	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800ae36:	4b0b      	ldr	r3, [pc, #44]	; (800ae64 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800ae38:	637b      	str	r3, [r7, #52]	; 0x34
 800ae3a:	e002      	b.n	800ae42 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 800ae40:	e003      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ae42:	e002      	b.n	800ae4a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800ae44:	2300      	movs	r3, #0
 800ae46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae48:	bf00      	nop
    }
  }

  return (frequency);
 800ae4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	373c      	adds	r7, #60	; 0x3c
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd90      	pop	{r4, r7, pc}
 800ae54:	44020c00 	.word	0x44020c00
 800ae58:	03d09000 	.word	0x03d09000
 800ae5c:	003d0900 	.word	0x003d0900
 800ae60:	007a1200 	.word	0x007a1200
 800ae64:	02dc6c00 	.word	0x02dc6c00

0800ae68 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800ae70:	4b48      	ldr	r3, [pc, #288]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a47      	ldr	r2, [pc, #284]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800ae76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ae7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ae7c:	f7f7 fc2e 	bl	80026dc <HAL_GetTick>
 800ae80:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae82:	e008      	b.n	800ae96 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae84:	f7f7 fc2a 	bl	80026dc <HAL_GetTick>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	1ad3      	subs	r3, r2, r3
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d901      	bls.n	800ae96 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ae92:	2303      	movs	r3, #3
 800ae94:	e07a      	b.n	800af8c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae96:	4b3f      	ldr	r3, [pc, #252]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1f0      	bne.n	800ae84 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800aea2:	4b3c      	ldr	r3, [pc, #240]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800aea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aeaa:	f023 0303 	bic.w	r3, r3, #3
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	6811      	ldr	r1, [r2, #0]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	6852      	ldr	r2, [r2, #4]
 800aeb6:	0212      	lsls	r2, r2, #8
 800aeb8:	430a      	orrs	r2, r1
 800aeba:	4936      	ldr	r1, [pc, #216]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800aebc:	4313      	orrs	r3, r2
 800aebe:	62cb      	str	r3, [r1, #44]	; 0x2c
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	3b01      	subs	r3, #1
 800aed0:	025b      	lsls	r3, r3, #9
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	431a      	orrs	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	691b      	ldr	r3, [r3, #16]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	041b      	lsls	r3, r3, #16
 800aede:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aee2:	431a      	orrs	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	695b      	ldr	r3, [r3, #20]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	061b      	lsls	r3, r3, #24
 800aeec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aef0:	4928      	ldr	r1, [pc, #160]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800aef2:	4313      	orrs	r3, r2
 800aef4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800aef6:	4b27      	ldr	r3, [pc, #156]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800aef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefa:	f023 020c 	bic.w	r2, r3, #12
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	699b      	ldr	r3, [r3, #24]
 800af02:	4924      	ldr	r1, [pc, #144]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800af04:	4313      	orrs	r3, r2
 800af06:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800af08:	4b22      	ldr	r3, [pc, #136]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800af0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0c:	f023 0220 	bic.w	r2, r3, #32
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	69db      	ldr	r3, [r3, #28]
 800af14:	491f      	ldr	r1, [pc, #124]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800af16:	4313      	orrs	r3, r2
 800af18:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800af1a:	4b1e      	ldr	r3, [pc, #120]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800af1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af22:	491c      	ldr	r1, [pc, #112]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800af24:	4313      	orrs	r3, r2
 800af26:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800af28:	4b1a      	ldr	r3, [pc, #104]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800af2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2c:	4a19      	ldr	r2, [pc, #100]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800af2e:	f023 0310 	bic.w	r3, r3, #16
 800af32:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800af34:	4b17      	ldr	r3, [pc, #92]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800af36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af3c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	6a12      	ldr	r2, [r2, #32]
 800af44:	00d2      	lsls	r2, r2, #3
 800af46:	4913      	ldr	r1, [pc, #76]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800af48:	4313      	orrs	r3, r2
 800af4a:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800af4c:	4b11      	ldr	r3, [pc, #68]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	4a10      	ldr	r2, [pc, #64]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800af52:	f043 0310 	orr.w	r3, r3, #16
 800af56:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800af58:	4b0e      	ldr	r3, [pc, #56]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a0d      	ldr	r2, [pc, #52]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800af5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af62:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800af64:	f7f7 fbba 	bl	80026dc <HAL_GetTick>
 800af68:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af6a:	e008      	b.n	800af7e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af6c:	f7f7 fbb6 	bl	80026dc <HAL_GetTick>
 800af70:	4602      	mov	r2, r0
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	2b02      	cmp	r3, #2
 800af78:	d901      	bls.n	800af7e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e006      	b.n	800af8c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af7e:	4b05      	ldr	r3, [pc, #20]	; (800af94 <RCCEx_PLL2_Config+0x12c>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af86:	2b00      	cmp	r3, #0
 800af88:	d0f0      	beq.n	800af6c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800af8a:	2300      	movs	r3, #0

}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	44020c00 	.word	0x44020c00

0800af98 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800afa0:	4b48      	ldr	r3, [pc, #288]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a47      	ldr	r2, [pc, #284]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800afa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afaa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800afac:	f7f7 fb96 	bl	80026dc <HAL_GetTick>
 800afb0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800afb2:	e008      	b.n	800afc6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800afb4:	f7f7 fb92 	bl	80026dc <HAL_GetTick>
 800afb8:	4602      	mov	r2, r0
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d901      	bls.n	800afc6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e07a      	b.n	800b0bc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800afc6:	4b3f      	ldr	r3, [pc, #252]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1f0      	bne.n	800afb4 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800afd2:	4b3c      	ldr	r3, [pc, #240]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800afd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800afda:	f023 0303 	bic.w	r3, r3, #3
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	6811      	ldr	r1, [r2, #0]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	6852      	ldr	r2, [r2, #4]
 800afe6:	0212      	lsls	r2, r2, #8
 800afe8:	430a      	orrs	r2, r1
 800afea:	4936      	ldr	r1, [pc, #216]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800afec:	4313      	orrs	r3, r2
 800afee:	630b      	str	r3, [r1, #48]	; 0x30
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	3b01      	subs	r3, #1
 800aff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	3b01      	subs	r3, #1
 800b000:	025b      	lsls	r3, r3, #9
 800b002:	b29b      	uxth	r3, r3
 800b004:	431a      	orrs	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	3b01      	subs	r3, #1
 800b00c:	041b      	lsls	r3, r3, #16
 800b00e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b012:	431a      	orrs	r2, r3
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	3b01      	subs	r3, #1
 800b01a:	061b      	lsls	r3, r3, #24
 800b01c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b020:	4928      	ldr	r1, [pc, #160]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b022:	4313      	orrs	r3, r2
 800b024:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b026:	4b27      	ldr	r3, [pc, #156]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02a:	f023 020c 	bic.w	r2, r3, #12
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	4924      	ldr	r1, [pc, #144]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b034:	4313      	orrs	r3, r2
 800b036:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800b038:	4b22      	ldr	r3, [pc, #136]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b03c:	f023 0220 	bic.w	r2, r3, #32
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	69db      	ldr	r3, [r3, #28]
 800b044:	491f      	ldr	r1, [pc, #124]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b046:	4313      	orrs	r3, r2
 800b048:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b04a:	4b1e      	ldr	r3, [pc, #120]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b04c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b052:	491c      	ldr	r1, [pc, #112]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b054:	4313      	orrs	r3, r2
 800b056:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800b058:	4b1a      	ldr	r3, [pc, #104]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05c:	4a19      	ldr	r2, [pc, #100]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b05e:	f023 0310 	bic.w	r3, r3, #16
 800b062:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800b064:	4b17      	ldr	r3, [pc, #92]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b068:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b06c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	6a12      	ldr	r2, [r2, #32]
 800b074:	00d2      	lsls	r2, r2, #3
 800b076:	4913      	ldr	r1, [pc, #76]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b078:	4313      	orrs	r3, r2
 800b07a:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800b07c:	4b11      	ldr	r3, [pc, #68]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b080:	4a10      	ldr	r2, [pc, #64]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b082:	f043 0310 	orr.w	r3, r3, #16
 800b086:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800b088:	4b0e      	ldr	r3, [pc, #56]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a0d      	ldr	r2, [pc, #52]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b08e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b092:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b094:	f7f7 fb22 	bl	80026dc <HAL_GetTick>
 800b098:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b09a:	e008      	b.n	800b0ae <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b09c:	f7f7 fb1e 	bl	80026dc <HAL_GetTick>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d901      	bls.n	800b0ae <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	e006      	b.n	800b0bc <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b0ae:	4b05      	ldr	r3, [pc, #20]	; (800b0c4 <RCCEx_PLL3_Config+0x12c>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d0f0      	beq.n	800b09c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	44020c00 	.word	0x44020c00

0800b0c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d101      	bne.n	800b0da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e042      	b.n	800b160 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d106      	bne.n	800b0f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f7f7 f899 	bl	8002224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2224      	movs	r2, #36	; 0x24
 800b0f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f022 0201 	bic.w	r2, r2, #1
 800b108:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d002      	beq.n	800b118 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fa16 	bl	800b544 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 f825 	bl	800b168 <UART_SetConfig>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b01      	cmp	r3, #1
 800b122:	d101      	bne.n	800b128 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	e01b      	b.n	800b160 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	685a      	ldr	r2, [r3, #4]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	689a      	ldr	r2, [r3, #8]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f042 0201 	orr.w	r2, r2, #1
 800b156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f000 fa95 	bl	800b688 <UART_CheckIdleState>
 800b15e:	4603      	mov	r3, r0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b16c:	b094      	sub	sp, #80	; 0x50
 800b16e:	af00      	add	r7, sp, #0
 800b170:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b172:	2300      	movs	r3, #0
 800b174:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	4b78      	ldr	r3, [pc, #480]	; (800b360 <UART_SetConfig+0x1f8>)
 800b17e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b182:	689a      	ldr	r2, [r3, #8]
 800b184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b186:	691b      	ldr	r3, [r3, #16]
 800b188:	431a      	orrs	r2, r3
 800b18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	431a      	orrs	r2, r3
 800b190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b192:	69db      	ldr	r3, [r3, #28]
 800b194:	4313      	orrs	r3, r2
 800b196:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4971      	ldr	r1, [pc, #452]	; (800b364 <UART_SetConfig+0x1fc>)
 800b1a0:	4019      	ands	r1, r3
 800b1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a8:	430b      	orrs	r3, r1
 800b1aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b8:	68d9      	ldr	r1, [r3, #12]
 800b1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	ea40 0301 	orr.w	r3, r0, r1
 800b1c2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	4b64      	ldr	r3, [pc, #400]	; (800b360 <UART_SetConfig+0x1f8>)
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d009      	beq.n	800b1e8 <UART_SetConfig+0x80>
 800b1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d6:	681a      	ldr	r2, [r3, #0]
 800b1d8:	4b63      	ldr	r3, [pc, #396]	; (800b368 <UART_SetConfig+0x200>)
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d004      	beq.n	800b1e8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e0:	6a1a      	ldr	r2, [r3, #32]
 800b1e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800b1f2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800b1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1fc:	430b      	orrs	r3, r1
 800b1fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b206:	f023 000f 	bic.w	r0, r3, #15
 800b20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	ea40 0301 	orr.w	r3, r0, r1
 800b216:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	4b53      	ldr	r3, [pc, #332]	; (800b36c <UART_SetConfig+0x204>)
 800b21e:	429a      	cmp	r2, r3
 800b220:	d102      	bne.n	800b228 <UART_SetConfig+0xc0>
 800b222:	2301      	movs	r3, #1
 800b224:	64bb      	str	r3, [r7, #72]	; 0x48
 800b226:	e066      	b.n	800b2f6 <UART_SetConfig+0x18e>
 800b228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	4b50      	ldr	r3, [pc, #320]	; (800b370 <UART_SetConfig+0x208>)
 800b22e:	429a      	cmp	r2, r3
 800b230:	d102      	bne.n	800b238 <UART_SetConfig+0xd0>
 800b232:	2302      	movs	r3, #2
 800b234:	64bb      	str	r3, [r7, #72]	; 0x48
 800b236:	e05e      	b.n	800b2f6 <UART_SetConfig+0x18e>
 800b238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	4b4d      	ldr	r3, [pc, #308]	; (800b374 <UART_SetConfig+0x20c>)
 800b23e:	429a      	cmp	r2, r3
 800b240:	d102      	bne.n	800b248 <UART_SetConfig+0xe0>
 800b242:	2304      	movs	r3, #4
 800b244:	64bb      	str	r3, [r7, #72]	; 0x48
 800b246:	e056      	b.n	800b2f6 <UART_SetConfig+0x18e>
 800b248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	4b4a      	ldr	r3, [pc, #296]	; (800b378 <UART_SetConfig+0x210>)
 800b24e:	429a      	cmp	r2, r3
 800b250:	d102      	bne.n	800b258 <UART_SetConfig+0xf0>
 800b252:	2308      	movs	r3, #8
 800b254:	64bb      	str	r3, [r7, #72]	; 0x48
 800b256:	e04e      	b.n	800b2f6 <UART_SetConfig+0x18e>
 800b258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25a:	681a      	ldr	r2, [r3, #0]
 800b25c:	4b47      	ldr	r3, [pc, #284]	; (800b37c <UART_SetConfig+0x214>)
 800b25e:	429a      	cmp	r2, r3
 800b260:	d102      	bne.n	800b268 <UART_SetConfig+0x100>
 800b262:	2310      	movs	r3, #16
 800b264:	64bb      	str	r3, [r7, #72]	; 0x48
 800b266:	e046      	b.n	800b2f6 <UART_SetConfig+0x18e>
 800b268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	4b44      	ldr	r3, [pc, #272]	; (800b380 <UART_SetConfig+0x218>)
 800b26e:	429a      	cmp	r2, r3
 800b270:	d102      	bne.n	800b278 <UART_SetConfig+0x110>
 800b272:	2320      	movs	r3, #32
 800b274:	64bb      	str	r3, [r7, #72]	; 0x48
 800b276:	e03e      	b.n	800b2f6 <UART_SetConfig+0x18e>
 800b278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	4b41      	ldr	r3, [pc, #260]	; (800b384 <UART_SetConfig+0x21c>)
 800b27e:	429a      	cmp	r2, r3
 800b280:	d102      	bne.n	800b288 <UART_SetConfig+0x120>
 800b282:	2340      	movs	r3, #64	; 0x40
 800b284:	64bb      	str	r3, [r7, #72]	; 0x48
 800b286:	e036      	b.n	800b2f6 <UART_SetConfig+0x18e>
 800b288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	4b3e      	ldr	r3, [pc, #248]	; (800b388 <UART_SetConfig+0x220>)
 800b28e:	429a      	cmp	r2, r3
 800b290:	d102      	bne.n	800b298 <UART_SetConfig+0x130>
 800b292:	2380      	movs	r3, #128	; 0x80
 800b294:	64bb      	str	r3, [r7, #72]	; 0x48
 800b296:	e02e      	b.n	800b2f6 <UART_SetConfig+0x18e>
 800b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	4b3b      	ldr	r3, [pc, #236]	; (800b38c <UART_SetConfig+0x224>)
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d103      	bne.n	800b2aa <UART_SetConfig+0x142>
 800b2a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2a6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2a8:	e025      	b.n	800b2f6 <UART_SetConfig+0x18e>
 800b2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	4b38      	ldr	r3, [pc, #224]	; (800b390 <UART_SetConfig+0x228>)
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d103      	bne.n	800b2bc <UART_SetConfig+0x154>
 800b2b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2ba:	e01c      	b.n	800b2f6 <UART_SetConfig+0x18e>
 800b2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	4b34      	ldr	r3, [pc, #208]	; (800b394 <UART_SetConfig+0x22c>)
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d103      	bne.n	800b2ce <UART_SetConfig+0x166>
 800b2c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2cc:	e013      	b.n	800b2f6 <UART_SetConfig+0x18e>
 800b2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	4b31      	ldr	r3, [pc, #196]	; (800b398 <UART_SetConfig+0x230>)
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d103      	bne.n	800b2e0 <UART_SetConfig+0x178>
 800b2d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2de:	e00a      	b.n	800b2f6 <UART_SetConfig+0x18e>
 800b2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	4b1e      	ldr	r3, [pc, #120]	; (800b360 <UART_SetConfig+0x1f8>)
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d103      	bne.n	800b2f2 <UART_SetConfig+0x18a>
 800b2ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800b2f0:	e001      	b.n	800b2f6 <UART_SetConfig+0x18e>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	4b19      	ldr	r3, [pc, #100]	; (800b360 <UART_SetConfig+0x1f8>)
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d005      	beq.n	800b30c <UART_SetConfig+0x1a4>
 800b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	4b18      	ldr	r3, [pc, #96]	; (800b368 <UART_SetConfig+0x200>)
 800b306:	429a      	cmp	r2, r3
 800b308:	f040 8094 	bne.w	800b434 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b30c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b30e:	2200      	movs	r2, #0
 800b310:	623b      	str	r3, [r7, #32]
 800b312:	627a      	str	r2, [r7, #36]	; 0x24
 800b314:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b318:	f7fd fa4c 	bl	80087b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b31c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b31e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 80f7 	beq.w	800b514 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32a:	4a1c      	ldr	r2, [pc, #112]	; (800b39c <UART_SetConfig+0x234>)
 800b32c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b330:	461a      	mov	r2, r3
 800b332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b334:	fbb3 f3f2 	udiv	r3, r3, r2
 800b338:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	685a      	ldr	r2, [r3, #4]
 800b33e:	4613      	mov	r3, r2
 800b340:	005b      	lsls	r3, r3, #1
 800b342:	4413      	add	r3, r2
 800b344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b346:	429a      	cmp	r2, r3
 800b348:	d305      	bcc.n	800b356 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b352:	429a      	cmp	r2, r3
 800b354:	d924      	bls.n	800b3a0 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b35c:	e069      	b.n	800b432 <UART_SetConfig+0x2ca>
 800b35e:	bf00      	nop
 800b360:	44002400 	.word	0x44002400
 800b364:	cfff69f3 	.word	0xcfff69f3
 800b368:	54002400 	.word	0x54002400
 800b36c:	40013800 	.word	0x40013800
 800b370:	40004400 	.word	0x40004400
 800b374:	40004800 	.word	0x40004800
 800b378:	40004c00 	.word	0x40004c00
 800b37c:	40005000 	.word	0x40005000
 800b380:	40006400 	.word	0x40006400
 800b384:	40007800 	.word	0x40007800
 800b388:	40007c00 	.word	0x40007c00
 800b38c:	40008000 	.word	0x40008000
 800b390:	40006800 	.word	0x40006800
 800b394:	40006c00 	.word	0x40006c00
 800b398:	40008400 	.word	0x40008400
 800b39c:	0800cee4 	.word	0x0800cee4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	61bb      	str	r3, [r7, #24]
 800b3a6:	61fa      	str	r2, [r7, #28]
 800b3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ac:	4a64      	ldr	r2, [pc, #400]	; (800b540 <UART_SetConfig+0x3d8>)
 800b3ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	613b      	str	r3, [r7, #16]
 800b3b8:	617a      	str	r2, [r7, #20]
 800b3ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b3be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b3c2:	f7f5 fc69 	bl	8000c98 <__aeabi_uldivmod>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	4610      	mov	r0, r2
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	f04f 0200 	mov.w	r2, #0
 800b3d2:	f04f 0300 	mov.w	r3, #0
 800b3d6:	020b      	lsls	r3, r1, #8
 800b3d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b3dc:	0202      	lsls	r2, r0, #8
 800b3de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3e0:	6849      	ldr	r1, [r1, #4]
 800b3e2:	0849      	lsrs	r1, r1, #1
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	eb12 0804 	adds.w	r8, r2, r4
 800b3ee:	eb43 0905 	adc.w	r9, r3, r5
 800b3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	60bb      	str	r3, [r7, #8]
 800b3fa:	60fa      	str	r2, [r7, #12]
 800b3fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b400:	4640      	mov	r0, r8
 800b402:	4649      	mov	r1, r9
 800b404:	f7f5 fc48 	bl	8000c98 <__aeabi_uldivmod>
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	4613      	mov	r3, r2
 800b40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b416:	d308      	bcc.n	800b42a <UART_SetConfig+0x2c2>
 800b418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b41a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b41e:	d204      	bcs.n	800b42a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800b420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b426:	60da      	str	r2, [r3, #12]
 800b428:	e003      	b.n	800b432 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800b42a:	2301      	movs	r3, #1
 800b42c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800b430:	e070      	b.n	800b514 <UART_SetConfig+0x3ac>
 800b432:	e06f      	b.n	800b514 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b436:	69db      	ldr	r3, [r3, #28]
 800b438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b43c:	d13c      	bne.n	800b4b8 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b43e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b440:	2200      	movs	r2, #0
 800b442:	603b      	str	r3, [r7, #0]
 800b444:	607a      	str	r2, [r7, #4]
 800b446:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b44a:	f7fd f9b3 	bl	80087b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b44e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b452:	2b00      	cmp	r3, #0
 800b454:	d05e      	beq.n	800b514 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45a:	4a39      	ldr	r2, [pc, #228]	; (800b540 <UART_SetConfig+0x3d8>)
 800b45c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b460:	461a      	mov	r2, r3
 800b462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b464:	fbb3 f3f2 	udiv	r3, r3, r2
 800b468:	005a      	lsls	r2, r3, #1
 800b46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	085b      	lsrs	r3, r3, #1
 800b470:	441a      	add	r2, r3
 800b472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	fbb2 f3f3 	udiv	r3, r2, r3
 800b47a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b47e:	2b0f      	cmp	r3, #15
 800b480:	d916      	bls.n	800b4b0 <UART_SetConfig+0x348>
 800b482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b488:	d212      	bcs.n	800b4b0 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	f023 030f 	bic.w	r3, r3, #15
 800b492:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b496:	085b      	lsrs	r3, r3, #1
 800b498:	b29b      	uxth	r3, r3
 800b49a:	f003 0307 	and.w	r3, r3, #7
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800b4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b4ac:	60da      	str	r2, [r3, #12]
 800b4ae:	e031      	b.n	800b514 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b4b6:	e02d      	b.n	800b514 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b4b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	469a      	mov	sl, r3
 800b4be:	4693      	mov	fp, r2
 800b4c0:	4650      	mov	r0, sl
 800b4c2:	4659      	mov	r1, fp
 800b4c4:	f7fd f976 	bl	80087b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b4c8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800b4ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d021      	beq.n	800b514 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4d4:	4a1a      	ldr	r2, [pc, #104]	; (800b540 <UART_SetConfig+0x3d8>)
 800b4d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4de:	fbb3 f2f2 	udiv	r2, r3, r2
 800b4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	085b      	lsrs	r3, r3, #1
 800b4e8:	441a      	add	r2, r3
 800b4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4f6:	2b0f      	cmp	r3, #15
 800b4f8:	d909      	bls.n	800b50e <UART_SetConfig+0x3a6>
 800b4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b500:	d205      	bcs.n	800b50e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b504:	b29a      	uxth	r2, r3
 800b506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	60da      	str	r2, [r3, #12]
 800b50c:	e002      	b.n	800b514 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b516:	2201      	movs	r2, #1
 800b518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51e:	2201      	movs	r2, #1
 800b520:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b526:	2200      	movs	r2, #0
 800b528:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52c:	2200      	movs	r2, #0
 800b52e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b530:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b534:	4618      	mov	r0, r3
 800b536:	3750      	adds	r7, #80	; 0x50
 800b538:	46bd      	mov	sp, r7
 800b53a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b53e:	bf00      	nop
 800b540:	0800cee4 	.word	0x0800cee4

0800b544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b550:	f003 0308 	and.w	r3, r3, #8
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00a      	beq.n	800b56e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	430a      	orrs	r2, r1
 800b56c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b572:	f003 0301 	and.w	r3, r3, #1
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00a      	beq.n	800b590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	430a      	orrs	r2, r1
 800b58e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b594:	f003 0302 	and.w	r3, r3, #2
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00a      	beq.n	800b5b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	430a      	orrs	r2, r1
 800b5b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b6:	f003 0304 	and.w	r3, r3, #4
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	430a      	orrs	r2, r1
 800b5d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d8:	f003 0310 	and.w	r3, r3, #16
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00a      	beq.n	800b5f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	430a      	orrs	r2, r1
 800b5f4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fa:	f003 0320 	and.w	r3, r3, #32
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00a      	beq.n	800b618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	430a      	orrs	r2, r1
 800b616:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b620:	2b00      	cmp	r3, #0
 800b622:	d01a      	beq.n	800b65a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	430a      	orrs	r2, r1
 800b638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b63e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b642:	d10a      	bne.n	800b65a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	430a      	orrs	r2, r1
 800b658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00a      	beq.n	800b67c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	430a      	orrs	r2, r1
 800b67a:	605a      	str	r2, [r3, #4]
  }
}
 800b67c:	bf00      	nop
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b098      	sub	sp, #96	; 0x60
 800b68c:	af02      	add	r7, sp, #8
 800b68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b698:	f7f7 f820 	bl	80026dc <HAL_GetTick>
 800b69c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0308 	and.w	r3, r3, #8
 800b6a8:	2b08      	cmp	r3, #8
 800b6aa:	d12f      	bne.n	800b70c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f88e 	bl	800b7dc <UART_WaitOnFlagUntilTimeout>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d022      	beq.n	800b70c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ce:	e853 3f00 	ldrex	r3, [r3]
 800b6d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6da:	653b      	str	r3, [r7, #80]	; 0x50
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6e4:	647b      	str	r3, [r7, #68]	; 0x44
 800b6e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b6ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6ec:	e841 2300 	strex	r3, r2, [r1]
 800b6f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d1e6      	bne.n	800b6c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2220      	movs	r2, #32
 800b6fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b708:	2303      	movs	r3, #3
 800b70a:	e063      	b.n	800b7d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 0304 	and.w	r3, r3, #4
 800b716:	2b04      	cmp	r3, #4
 800b718:	d149      	bne.n	800b7ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b71a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b722:	2200      	movs	r2, #0
 800b724:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f857 	bl	800b7dc <UART_WaitOnFlagUntilTimeout>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d03c      	beq.n	800b7ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73c:	e853 3f00 	ldrex	r3, [r3]
 800b740:	623b      	str	r3, [r7, #32]
   return(result);
 800b742:	6a3b      	ldr	r3, [r7, #32]
 800b744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	461a      	mov	r2, r3
 800b750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b752:	633b      	str	r3, [r7, #48]	; 0x30
 800b754:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b75a:	e841 2300 	strex	r3, r2, [r1]
 800b75e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1e6      	bne.n	800b734 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	3308      	adds	r3, #8
 800b76c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	e853 3f00 	ldrex	r3, [r3]
 800b774:	60fb      	str	r3, [r7, #12]
   return(result);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f023 0301 	bic.w	r3, r3, #1
 800b77c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3308      	adds	r3, #8
 800b784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b786:	61fa      	str	r2, [r7, #28]
 800b788:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78a:	69b9      	ldr	r1, [r7, #24]
 800b78c:	69fa      	ldr	r2, [r7, #28]
 800b78e:	e841 2300 	strex	r3, r2, [r1]
 800b792:	617b      	str	r3, [r7, #20]
   return(result);
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1e5      	bne.n	800b766 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2220      	movs	r2, #32
 800b79e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	e012      	b.n	800b7d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2220      	movs	r2, #32
 800b7b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2220      	movs	r2, #32
 800b7ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3758      	adds	r7, #88	; 0x58
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	603b      	str	r3, [r7, #0]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7ec:	e049      	b.n	800b882 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f4:	d045      	beq.n	800b882 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7f6:	f7f6 ff71 	bl	80026dc <HAL_GetTick>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	69ba      	ldr	r2, [r7, #24]
 800b802:	429a      	cmp	r2, r3
 800b804:	d302      	bcc.n	800b80c <UART_WaitOnFlagUntilTimeout+0x30>
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d101      	bne.n	800b810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b80c:	2303      	movs	r3, #3
 800b80e:	e048      	b.n	800b8a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 0304 	and.w	r3, r3, #4
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d031      	beq.n	800b882 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	69db      	ldr	r3, [r3, #28]
 800b824:	f003 0308 	and.w	r3, r3, #8
 800b828:	2b08      	cmp	r3, #8
 800b82a:	d110      	bne.n	800b84e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2208      	movs	r2, #8
 800b832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f000 f838 	bl	800b8aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2208      	movs	r2, #8
 800b83e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2200      	movs	r2, #0
 800b846:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	e029      	b.n	800b8a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	69db      	ldr	r3, [r3, #28]
 800b854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b85c:	d111      	bne.n	800b882 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f000 f81e 	bl	800b8aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2220      	movs	r2, #32
 800b872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2200      	movs	r2, #0
 800b87a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b87e:	2303      	movs	r3, #3
 800b880:	e00f      	b.n	800b8a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	69da      	ldr	r2, [r3, #28]
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	4013      	ands	r3, r2
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	429a      	cmp	r2, r3
 800b890:	bf0c      	ite	eq
 800b892:	2301      	moveq	r3, #1
 800b894:	2300      	movne	r3, #0
 800b896:	b2db      	uxtb	r3, r3
 800b898:	461a      	mov	r2, r3
 800b89a:	79fb      	ldrb	r3, [r7, #7]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d0a6      	beq.n	800b7ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	b095      	sub	sp, #84	; 0x54
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ba:	e853 3f00 	ldrex	r3, [r3]
 800b8be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b8c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8d0:	643b      	str	r3, [r7, #64]	; 0x40
 800b8d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b8d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8d8:	e841 2300 	strex	r3, r2, [r1]
 800b8dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1e6      	bne.n	800b8b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ec:	6a3b      	ldr	r3, [r7, #32]
 800b8ee:	e853 3f00 	ldrex	r3, [r3]
 800b8f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8fa:	f023 0301 	bic.w	r3, r3, #1
 800b8fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	3308      	adds	r3, #8
 800b906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b908:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b90a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b90e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b910:	e841 2300 	strex	r3, r2, [r1]
 800b914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1e3      	bne.n	800b8e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b920:	2b01      	cmp	r3, #1
 800b922:	d118      	bne.n	800b956 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	e853 3f00 	ldrex	r3, [r3]
 800b930:	60bb      	str	r3, [r7, #8]
   return(result);
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	f023 0310 	bic.w	r3, r3, #16
 800b938:	647b      	str	r3, [r7, #68]	; 0x44
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	461a      	mov	r2, r3
 800b940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b942:	61bb      	str	r3, [r7, #24]
 800b944:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b946:	6979      	ldr	r1, [r7, #20]
 800b948:	69ba      	ldr	r2, [r7, #24]
 800b94a:	e841 2300 	strex	r3, r2, [r1]
 800b94e:	613b      	str	r3, [r7, #16]
   return(result);
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1e6      	bne.n	800b924 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2220      	movs	r2, #32
 800b95a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b96a:	bf00      	nop
 800b96c:	3754      	adds	r7, #84	; 0x54
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b976:	b480      	push	{r7}
 800b978:	b085      	sub	sp, #20
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b984:	2b01      	cmp	r3, #1
 800b986:	d101      	bne.n	800b98c <HAL_UARTEx_DisableFifoMode+0x16>
 800b988:	2302      	movs	r3, #2
 800b98a:	e027      	b.n	800b9dc <HAL_UARTEx_DisableFifoMode+0x66>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2224      	movs	r2, #36	; 0x24
 800b998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f022 0201 	bic.w	r2, r2, #1
 800b9b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b9ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2220      	movs	r2, #32
 800b9ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d101      	bne.n	800ba00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	e02d      	b.n	800ba5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2224      	movs	r2, #36	; 0x24
 800ba0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f022 0201 	bic.w	r2, r2, #1
 800ba26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	683a      	ldr	r2, [r7, #0]
 800ba38:	430a      	orrs	r2, r1
 800ba3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 f84f 	bl	800bae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2220      	movs	r2, #32
 800ba4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3710      	adds	r7, #16
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d101      	bne.n	800ba7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba78:	2302      	movs	r3, #2
 800ba7a:	e02d      	b.n	800bad8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2224      	movs	r2, #36	; 0x24
 800ba88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f022 0201 	bic.w	r2, r2, #1
 800baa2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	689b      	ldr	r3, [r3, #8]
 800baaa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	430a      	orrs	r2, r1
 800bab6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 f811 	bl	800bae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2220      	movs	r2, #32
 800baca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baec:	2b00      	cmp	r3, #0
 800baee:	d108      	bne.n	800bb02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2201      	movs	r2, #1
 800baf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bb00:	e031      	b.n	800bb66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bb02:	2308      	movs	r3, #8
 800bb04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bb06:	2308      	movs	r3, #8
 800bb08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	0e5b      	lsrs	r3, r3, #25
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	f003 0307 	and.w	r3, r3, #7
 800bb18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	0f5b      	lsrs	r3, r3, #29
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	f003 0307 	and.w	r3, r3, #7
 800bb28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb2a:	7bbb      	ldrb	r3, [r7, #14]
 800bb2c:	7b3a      	ldrb	r2, [r7, #12]
 800bb2e:	4911      	ldr	r1, [pc, #68]	; (800bb74 <UARTEx_SetNbDataToProcess+0x94>)
 800bb30:	5c8a      	ldrb	r2, [r1, r2]
 800bb32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb36:	7b3a      	ldrb	r2, [r7, #12]
 800bb38:	490f      	ldr	r1, [pc, #60]	; (800bb78 <UARTEx_SetNbDataToProcess+0x98>)
 800bb3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb48:	7bfb      	ldrb	r3, [r7, #15]
 800bb4a:	7b7a      	ldrb	r2, [r7, #13]
 800bb4c:	4909      	ldr	r1, [pc, #36]	; (800bb74 <UARTEx_SetNbDataToProcess+0x94>)
 800bb4e:	5c8a      	ldrb	r2, [r1, r2]
 800bb50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb54:	7b7a      	ldrb	r2, [r7, #13]
 800bb56:	4908      	ldr	r1, [pc, #32]	; (800bb78 <UARTEx_SetNbDataToProcess+0x98>)
 800bb58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb5a:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bb66:	bf00      	nop
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	0800cefc 	.word	0x0800cefc
 800bb78:	0800cf04 	.word	0x0800cf04

0800bb7c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b08b      	sub	sp, #44	; 0x2c
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	fa93 f3a3 	rbit	r3, r3
 800bb96:	613b      	str	r3, [r7, #16]
  return result;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d101      	bne.n	800bba6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800bba2:	2320      	movs	r3, #32
 800bba4:	e003      	b.n	800bbae <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	fab3 f383 	clz	r3, r3
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	005b      	lsls	r3, r3, #1
 800bbb0:	2103      	movs	r1, #3
 800bbb2:	fa01 f303 	lsl.w	r3, r1, r3
 800bbb6:	43db      	mvns	r3, r3
 800bbb8:	401a      	ands	r2, r3
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbbe:	6a3b      	ldr	r3, [r7, #32]
 800bbc0:	fa93 f3a3 	rbit	r3, r3
 800bbc4:	61fb      	str	r3, [r7, #28]
  return result;
 800bbc6:	69fb      	ldr	r3, [r7, #28]
 800bbc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800bbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d101      	bne.n	800bbd4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800bbd0:	2320      	movs	r3, #32
 800bbd2:	e003      	b.n	800bbdc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd6:	fab3 f383 	clz	r3, r3
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	005b      	lsls	r3, r3, #1
 800bbde:	6879      	ldr	r1, [r7, #4]
 800bbe0:	fa01 f303 	lsl.w	r3, r1, r3
 800bbe4:	431a      	orrs	r2, r3
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	601a      	str	r2, [r3, #0]
}
 800bbea:	bf00      	nop
 800bbec:	372c      	adds	r7, #44	; 0x2c
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b085      	sub	sp, #20
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	60f8      	str	r0, [r7, #12]
 800bbfe:	60b9      	str	r1, [r7, #8]
 800bc00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	685a      	ldr	r2, [r3, #4]
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	43db      	mvns	r3, r3
 800bc0a:	401a      	ands	r2, r3
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	6879      	ldr	r1, [r7, #4]
 800bc10:	fb01 f303 	mul.w	r3, r1, r3
 800bc14:	431a      	orrs	r2, r3
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	605a      	str	r2, [r3, #4]
}
 800bc1a:	bf00      	nop
 800bc1c:	3714      	adds	r7, #20
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr

0800bc26 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800bc26:	b480      	push	{r7}
 800bc28:	b08b      	sub	sp, #44	; 0x2c
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	60f8      	str	r0, [r7, #12]
 800bc2e:	60b9      	str	r1, [r7, #8]
 800bc30:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	689a      	ldr	r2, [r3, #8]
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	fa93 f3a3 	rbit	r3, r3
 800bc40:	613b      	str	r3, [r7, #16]
  return result;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800bc4c:	2320      	movs	r3, #32
 800bc4e:	e003      	b.n	800bc58 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	fab3 f383 	clz	r3, r3
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	005b      	lsls	r3, r3, #1
 800bc5a:	2103      	movs	r1, #3
 800bc5c:	fa01 f303 	lsl.w	r3, r1, r3
 800bc60:	43db      	mvns	r3, r3
 800bc62:	401a      	ands	r2, r3
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc68:	6a3b      	ldr	r3, [r7, #32]
 800bc6a:	fa93 f3a3 	rbit	r3, r3
 800bc6e:	61fb      	str	r3, [r7, #28]
  return result;
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d101      	bne.n	800bc7e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800bc7a:	2320      	movs	r3, #32
 800bc7c:	e003      	b.n	800bc86 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800bc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc80:	fab3 f383 	clz	r3, r3
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	005b      	lsls	r3, r3, #1
 800bc88:	6879      	ldr	r1, [r7, #4]
 800bc8a:	fa01 f303 	lsl.w	r3, r1, r3
 800bc8e:	431a      	orrs	r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800bc94:	bf00      	nop
 800bc96:	372c      	adds	r7, #44	; 0x2c
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b08b      	sub	sp, #44	; 0x2c
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	68da      	ldr	r2, [r3, #12]
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	fa93 f3a3 	rbit	r3, r3
 800bcba:	613b      	str	r3, [r7, #16]
  return result;
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800bcc6:	2320      	movs	r3, #32
 800bcc8:	e003      	b.n	800bcd2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	fab3 f383 	clz	r3, r3
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	005b      	lsls	r3, r3, #1
 800bcd4:	2103      	movs	r1, #3
 800bcd6:	fa01 f303 	lsl.w	r3, r1, r3
 800bcda:	43db      	mvns	r3, r3
 800bcdc:	401a      	ands	r2, r3
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bce2:	6a3b      	ldr	r3, [r7, #32]
 800bce4:	fa93 f3a3 	rbit	r3, r3
 800bce8:	61fb      	str	r3, [r7, #28]
  return result;
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800bcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d101      	bne.n	800bcf8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800bcf4:	2320      	movs	r3, #32
 800bcf6:	e003      	b.n	800bd00 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfa:	fab3 f383 	clz	r3, r3
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	005b      	lsls	r3, r3, #1
 800bd02:	6879      	ldr	r1, [r7, #4]
 800bd04:	fa01 f303 	lsl.w	r3, r1, r3
 800bd08:	431a      	orrs	r2, r3
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	60da      	str	r2, [r3, #12]
}
 800bd0e:	bf00      	nop
 800bd10:	372c      	adds	r7, #44	; 0x2c
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b08b      	sub	sp, #44	; 0x2c
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	60f8      	str	r0, [r7, #12]
 800bd22:	60b9      	str	r1, [r7, #8]
 800bd24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6a1a      	ldr	r2, [r3, #32]
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	fa93 f3a3 	rbit	r3, r3
 800bd34:	613b      	str	r3, [r7, #16]
  return result;
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d101      	bne.n	800bd44 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800bd40:	2320      	movs	r3, #32
 800bd42:	e003      	b.n	800bd4c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800bd44:	69bb      	ldr	r3, [r7, #24]
 800bd46:	fab3 f383 	clz	r3, r3
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	210f      	movs	r1, #15
 800bd50:	fa01 f303 	lsl.w	r3, r1, r3
 800bd54:	43db      	mvns	r3, r3
 800bd56:	401a      	ands	r2, r3
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd5c:	6a3b      	ldr	r3, [r7, #32]
 800bd5e:	fa93 f3a3 	rbit	r3, r3
 800bd62:	61fb      	str	r3, [r7, #28]
  return result;
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800bd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d101      	bne.n	800bd72 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800bd6e:	2320      	movs	r3, #32
 800bd70:	e003      	b.n	800bd7a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800bd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd74:	fab3 f383 	clz	r3, r3
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	6879      	ldr	r1, [r7, #4]
 800bd7e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd82:	431a      	orrs	r2, r3
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800bd88:	bf00      	nop
 800bd8a:	372c      	adds	r7, #44	; 0x2c
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr

0800bd94 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b08b      	sub	sp, #44	; 0x2c
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	0a1b      	lsrs	r3, r3, #8
 800bda8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	fa93 f3a3 	rbit	r3, r3
 800bdb0:	613b      	str	r3, [r7, #16]
  return result;
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d101      	bne.n	800bdc0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800bdbc:	2320      	movs	r3, #32
 800bdbe:	e003      	b.n	800bdc8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	fab3 f383 	clz	r3, r3
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	210f      	movs	r1, #15
 800bdcc:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd0:	43db      	mvns	r3, r3
 800bdd2:	401a      	ands	r2, r3
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	0a1b      	lsrs	r3, r3, #8
 800bdd8:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	fa93 f3a3 	rbit	r3, r3
 800bde0:	61fb      	str	r3, [r7, #28]
  return result;
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800bde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d101      	bne.n	800bdf0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800bdec:	2320      	movs	r3, #32
 800bdee:	e003      	b.n	800bdf8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf2:	fab3 f383 	clz	r3, r3
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	6879      	ldr	r1, [r7, #4]
 800bdfc:	fa01 f303 	lsl.w	r3, r1, r3
 800be00:	431a      	orrs	r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800be06:	bf00      	nop
 800be08:	372c      	adds	r7, #44	; 0x2c
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b08a      	sub	sp, #40	; 0x28
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	fa93 f3a3 	rbit	r3, r3
 800be28:	617b      	str	r3, [r7, #20]
  return result;
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d101      	bne.n	800be38 <LL_GPIO_Init+0x26>
    return 32U;
 800be34:	2320      	movs	r3, #32
 800be36:	e003      	b.n	800be40 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	fab3 f383 	clz	r3, r3
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800be42:	e058      	b.n	800bef6 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	2101      	movs	r1, #1
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	fa01 f303 	lsl.w	r3, r1, r3
 800be50:	4013      	ands	r3, r2
 800be52:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800be54:	6a3b      	ldr	r3, [r7, #32]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d04a      	beq.n	800bef0 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d003      	beq.n	800be6a <LL_GPIO_Init+0x58>
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	2b02      	cmp	r3, #2
 800be68:	d10e      	bne.n	800be88 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	461a      	mov	r2, r3
 800be70:	6a39      	ldr	r1, [r7, #32]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f7ff fed7 	bl	800bc26 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	6819      	ldr	r1, [r3, #0]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	461a      	mov	r2, r3
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f7ff feb7 	bl	800bbf6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	461a      	mov	r2, r3
 800be8e:	6a39      	ldr	r1, [r7, #32]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f7ff ff05 	bl	800bca0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	2b02      	cmp	r3, #2
 800be9c:	d121      	bne.n	800bee2 <LL_GPIO_Init+0xd0>
 800be9e:	6a3b      	ldr	r3, [r7, #32]
 800bea0:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	fa93 f3a3 	rbit	r3, r3
 800bea8:	60bb      	str	r3, [r7, #8]
  return result;
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d101      	bne.n	800beb8 <LL_GPIO_Init+0xa6>
    return 32U;
 800beb4:	2320      	movs	r3, #32
 800beb6:	e003      	b.n	800bec0 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	fab3 f383 	clz	r3, r3
 800bebe:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800bec0:	2b07      	cmp	r3, #7
 800bec2:	d807      	bhi.n	800bed4 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	695b      	ldr	r3, [r3, #20]
 800bec8:	461a      	mov	r2, r3
 800beca:	6a39      	ldr	r1, [r7, #32]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff ff24 	bl	800bd1a <LL_GPIO_SetAFPin_0_7>
 800bed2:	e006      	b.n	800bee2 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	695b      	ldr	r3, [r3, #20]
 800bed8:	461a      	mov	r2, r3
 800beda:	6a39      	ldr	r1, [r7, #32]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f7ff ff59 	bl	800bd94 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	461a      	mov	r2, r3
 800bee8:	6a39      	ldr	r1, [r7, #32]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f7ff fe46 	bl	800bb7c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	3301      	adds	r3, #1
 800bef4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	fa22 f303 	lsr.w	r3, r2, r3
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d19f      	bne.n	800be44 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3728      	adds	r7, #40	; 0x28
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bf0e:	b480      	push	{r7}
 800bf10:	b085      	sub	sp, #20
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bf16:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800bf1a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	43db      	mvns	r3, r3
 800bf24:	401a      	ands	r2, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3714      	adds	r7, #20
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	460b      	mov	r3, r1
 800bf42:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800bf44:	78fb      	ldrb	r3, [r7, #3]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d106      	bne.n	800bf58 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	641a      	str	r2, [r3, #64]	; 0x40
 800bf56:	e00b      	b.n	800bf70 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800bf58:	78fb      	ldrb	r3, [r7, #3]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d106      	bne.n	800bf6c <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf62:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	641a      	str	r2, [r3, #64]	; 0x40
 800bf6a:	e001      	b.n	800bf70 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e000      	b.n	800bf72 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	370c      	adds	r7, #12
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr

0800bf7e <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800bf7e:	b084      	sub	sp, #16
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	f107 001c 	add.w	r0, r7, #28
 800bf8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9a:	f023 0201 	bic.w	r2, r3, #1
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f7ff ffc7 	bl	800bf38 <USB_SetCurrentMode>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 800bfb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3710      	adds	r7, #16
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bfc0:	b004      	add	sp, #16
 800bfc2:	4770      	bx	lr

0800bfc4 <memset>:
 800bfc4:	4402      	add	r2, r0
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d100      	bne.n	800bfce <memset+0xa>
 800bfcc:	4770      	bx	lr
 800bfce:	f803 1b01 	strb.w	r1, [r3], #1
 800bfd2:	e7f9      	b.n	800bfc8 <memset+0x4>

0800bfd4 <__errno>:
 800bfd4:	4b01      	ldr	r3, [pc, #4]	; (800bfdc <__errno+0x8>)
 800bfd6:	6818      	ldr	r0, [r3, #0]
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	20000058 	.word	0x20000058

0800bfe0 <__libc_init_array>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	4d0d      	ldr	r5, [pc, #52]	; (800c018 <__libc_init_array+0x38>)
 800bfe4:	2600      	movs	r6, #0
 800bfe6:	4c0d      	ldr	r4, [pc, #52]	; (800c01c <__libc_init_array+0x3c>)
 800bfe8:	1b64      	subs	r4, r4, r5
 800bfea:	10a4      	asrs	r4, r4, #2
 800bfec:	42a6      	cmp	r6, r4
 800bfee:	d109      	bne.n	800c004 <__libc_init_array+0x24>
 800bff0:	4d0b      	ldr	r5, [pc, #44]	; (800c020 <__libc_init_array+0x40>)
 800bff2:	2600      	movs	r6, #0
 800bff4:	4c0b      	ldr	r4, [pc, #44]	; (800c024 <__libc_init_array+0x44>)
 800bff6:	f000 ff59 	bl	800ceac <_init>
 800bffa:	1b64      	subs	r4, r4, r5
 800bffc:	10a4      	asrs	r4, r4, #2
 800bffe:	42a6      	cmp	r6, r4
 800c000:	d105      	bne.n	800c00e <__libc_init_array+0x2e>
 800c002:	bd70      	pop	{r4, r5, r6, pc}
 800c004:	f855 3b04 	ldr.w	r3, [r5], #4
 800c008:	3601      	adds	r6, #1
 800c00a:	4798      	blx	r3
 800c00c:	e7ee      	b.n	800bfec <__libc_init_array+0xc>
 800c00e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c012:	3601      	adds	r6, #1
 800c014:	4798      	blx	r3
 800c016:	e7f2      	b.n	800bffe <__libc_init_array+0x1e>
 800c018:	0800cf48 	.word	0x0800cf48
 800c01c:	0800cf48 	.word	0x0800cf48
 800c020:	0800cf48 	.word	0x0800cf48
 800c024:	0800cf4c 	.word	0x0800cf4c

0800c028 <pow>:
 800c028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02a:	ec55 4b11 	vmov	r4, r5, d1
 800c02e:	ed2d 8b02 	vpush	{d8}
 800c032:	eeb0 8a40 	vmov.f32	s16, s0
 800c036:	eef0 8a60 	vmov.f32	s17, s1
 800c03a:	f000 f871 	bl	800c120 <__ieee754_pow>
 800c03e:	4622      	mov	r2, r4
 800c040:	462b      	mov	r3, r5
 800c042:	4620      	mov	r0, r4
 800c044:	4629      	mov	r1, r5
 800c046:	ec57 6b10 	vmov	r6, r7, d0
 800c04a:	f7f4 fd77 	bl	8000b3c <__aeabi_dcmpun>
 800c04e:	2800      	cmp	r0, #0
 800c050:	d13b      	bne.n	800c0ca <pow+0xa2>
 800c052:	2200      	movs	r2, #0
 800c054:	2300      	movs	r3, #0
 800c056:	ec51 0b18 	vmov	r0, r1, d8
 800c05a:	f7f4 fd3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c05e:	b1b8      	cbz	r0, 800c090 <pow+0x68>
 800c060:	2200      	movs	r2, #0
 800c062:	2300      	movs	r3, #0
 800c064:	4620      	mov	r0, r4
 800c066:	4629      	mov	r1, r5
 800c068:	f7f4 fd36 	bl	8000ad8 <__aeabi_dcmpeq>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	d146      	bne.n	800c0fe <pow+0xd6>
 800c070:	ec45 4b10 	vmov	d0, r4, r5
 800c074:	f000 f848 	bl	800c108 <finite>
 800c078:	b338      	cbz	r0, 800c0ca <pow+0xa2>
 800c07a:	2200      	movs	r2, #0
 800c07c:	2300      	movs	r3, #0
 800c07e:	4620      	mov	r0, r4
 800c080:	4629      	mov	r1, r5
 800c082:	f7f4 fd33 	bl	8000aec <__aeabi_dcmplt>
 800c086:	b300      	cbz	r0, 800c0ca <pow+0xa2>
 800c088:	f7ff ffa4 	bl	800bfd4 <__errno>
 800c08c:	2322      	movs	r3, #34	; 0x22
 800c08e:	e01b      	b.n	800c0c8 <pow+0xa0>
 800c090:	ec47 6b10 	vmov	d0, r6, r7
 800c094:	f000 f838 	bl	800c108 <finite>
 800c098:	b9e0      	cbnz	r0, 800c0d4 <pow+0xac>
 800c09a:	eeb0 0a48 	vmov.f32	s0, s16
 800c09e:	eef0 0a68 	vmov.f32	s1, s17
 800c0a2:	f000 f831 	bl	800c108 <finite>
 800c0a6:	b1a8      	cbz	r0, 800c0d4 <pow+0xac>
 800c0a8:	ec45 4b10 	vmov	d0, r4, r5
 800c0ac:	f000 f82c 	bl	800c108 <finite>
 800c0b0:	b180      	cbz	r0, 800c0d4 <pow+0xac>
 800c0b2:	4632      	mov	r2, r6
 800c0b4:	463b      	mov	r3, r7
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	4639      	mov	r1, r7
 800c0ba:	f7f4 fd3f 	bl	8000b3c <__aeabi_dcmpun>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d0e2      	beq.n	800c088 <pow+0x60>
 800c0c2:	f7ff ff87 	bl	800bfd4 <__errno>
 800c0c6:	2321      	movs	r3, #33	; 0x21
 800c0c8:	6003      	str	r3, [r0, #0]
 800c0ca:	ecbd 8b02 	vpop	{d8}
 800c0ce:	ec47 6b10 	vmov	d0, r6, r7
 800c0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	4630      	mov	r0, r6
 800c0da:	4639      	mov	r1, r7
 800c0dc:	f7f4 fcfc 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d0f2      	beq.n	800c0ca <pow+0xa2>
 800c0e4:	eeb0 0a48 	vmov.f32	s0, s16
 800c0e8:	eef0 0a68 	vmov.f32	s1, s17
 800c0ec:	f000 f80c 	bl	800c108 <finite>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	d0ea      	beq.n	800c0ca <pow+0xa2>
 800c0f4:	ec45 4b10 	vmov	d0, r4, r5
 800c0f8:	f000 f806 	bl	800c108 <finite>
 800c0fc:	e7c3      	b.n	800c086 <pow+0x5e>
 800c0fe:	2600      	movs	r6, #0
 800c100:	4f00      	ldr	r7, [pc, #0]	; (800c104 <pow+0xdc>)
 800c102:	e7e2      	b.n	800c0ca <pow+0xa2>
 800c104:	3ff00000 	.word	0x3ff00000

0800c108 <finite>:
 800c108:	b082      	sub	sp, #8
 800c10a:	ed8d 0b00 	vstr	d0, [sp]
 800c10e:	9801      	ldr	r0, [sp, #4]
 800c110:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c114:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c118:	0fc0      	lsrs	r0, r0, #31
 800c11a:	b002      	add	sp, #8
 800c11c:	4770      	bx	lr
	...

0800c120 <__ieee754_pow>:
 800c120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c124:	ed2d 8b06 	vpush	{d8-d10}
 800c128:	b089      	sub	sp, #36	; 0x24
 800c12a:	ed8d 1b00 	vstr	d1, [sp]
 800c12e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c132:	ec57 6b10 	vmov	r6, r7, d0
 800c136:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c13a:	ea58 0102 	orrs.w	r1, r8, r2
 800c13e:	d115      	bne.n	800c16c <__ieee754_pow+0x4c>
 800c140:	19b3      	adds	r3, r6, r6
 800c142:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c146:	4152      	adcs	r2, r2
 800c148:	4299      	cmp	r1, r3
 800c14a:	4b89      	ldr	r3, [pc, #548]	; (800c370 <__ieee754_pow+0x250>)
 800c14c:	4193      	sbcs	r3, r2
 800c14e:	f080 84d2 	bcs.w	800caf6 <__ieee754_pow+0x9d6>
 800c152:	4630      	mov	r0, r6
 800c154:	4639      	mov	r1, r7
 800c156:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c15a:	f7f4 f89f 	bl	800029c <__adddf3>
 800c15e:	ec41 0b10 	vmov	d0, r0, r1
 800c162:	b009      	add	sp, #36	; 0x24
 800c164:	ecbd 8b06 	vpop	{d8-d10}
 800c168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c16c:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c170:	4b80      	ldr	r3, [pc, #512]	; (800c374 <__ieee754_pow+0x254>)
 800c172:	463d      	mov	r5, r7
 800c174:	ee10 aa10 	vmov	sl, s0
 800c178:	429c      	cmp	r4, r3
 800c17a:	dc06      	bgt.n	800c18a <__ieee754_pow+0x6a>
 800c17c:	d101      	bne.n	800c182 <__ieee754_pow+0x62>
 800c17e:	2e00      	cmp	r6, #0
 800c180:	d1e7      	bne.n	800c152 <__ieee754_pow+0x32>
 800c182:	4598      	cmp	r8, r3
 800c184:	dc01      	bgt.n	800c18a <__ieee754_pow+0x6a>
 800c186:	d10f      	bne.n	800c1a8 <__ieee754_pow+0x88>
 800c188:	b172      	cbz	r2, 800c1a8 <__ieee754_pow+0x88>
 800c18a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c18e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c192:	ea55 050a 	orrs.w	r5, r5, sl
 800c196:	d1dc      	bne.n	800c152 <__ieee754_pow+0x32>
 800c198:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c19c:	18db      	adds	r3, r3, r3
 800c19e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c1a2:	4152      	adcs	r2, r2
 800c1a4:	429d      	cmp	r5, r3
 800c1a6:	e7d0      	b.n	800c14a <__ieee754_pow+0x2a>
 800c1a8:	2d00      	cmp	r5, #0
 800c1aa:	da3b      	bge.n	800c224 <__ieee754_pow+0x104>
 800c1ac:	4b72      	ldr	r3, [pc, #456]	; (800c378 <__ieee754_pow+0x258>)
 800c1ae:	4598      	cmp	r8, r3
 800c1b0:	dc51      	bgt.n	800c256 <__ieee754_pow+0x136>
 800c1b2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c1b6:	4598      	cmp	r8, r3
 800c1b8:	f340 84ac 	ble.w	800cb14 <__ieee754_pow+0x9f4>
 800c1bc:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c1c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c1c4:	2b14      	cmp	r3, #20
 800c1c6:	dd0f      	ble.n	800c1e8 <__ieee754_pow+0xc8>
 800c1c8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c1cc:	fa22 f103 	lsr.w	r1, r2, r3
 800c1d0:	fa01 f303 	lsl.w	r3, r1, r3
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	f040 849d 	bne.w	800cb14 <__ieee754_pow+0x9f4>
 800c1da:	f001 0101 	and.w	r1, r1, #1
 800c1de:	f1c1 0302 	rsb	r3, r1, #2
 800c1e2:	9304      	str	r3, [sp, #16]
 800c1e4:	b182      	cbz	r2, 800c208 <__ieee754_pow+0xe8>
 800c1e6:	e05f      	b.n	800c2a8 <__ieee754_pow+0x188>
 800c1e8:	2a00      	cmp	r2, #0
 800c1ea:	d15b      	bne.n	800c2a4 <__ieee754_pow+0x184>
 800c1ec:	f1c3 0314 	rsb	r3, r3, #20
 800c1f0:	fa48 f103 	asr.w	r1, r8, r3
 800c1f4:	fa01 f303 	lsl.w	r3, r1, r3
 800c1f8:	4543      	cmp	r3, r8
 800c1fa:	f040 8488 	bne.w	800cb0e <__ieee754_pow+0x9ee>
 800c1fe:	f001 0101 	and.w	r1, r1, #1
 800c202:	f1c1 0302 	rsb	r3, r1, #2
 800c206:	9304      	str	r3, [sp, #16]
 800c208:	4b5c      	ldr	r3, [pc, #368]	; (800c37c <__ieee754_pow+0x25c>)
 800c20a:	4598      	cmp	r8, r3
 800c20c:	d132      	bne.n	800c274 <__ieee754_pow+0x154>
 800c20e:	f1b9 0f00 	cmp.w	r9, #0
 800c212:	f280 8478 	bge.w	800cb06 <__ieee754_pow+0x9e6>
 800c216:	4632      	mov	r2, r6
 800c218:	463b      	mov	r3, r7
 800c21a:	2000      	movs	r0, #0
 800c21c:	4957      	ldr	r1, [pc, #348]	; (800c37c <__ieee754_pow+0x25c>)
 800c21e:	f7f4 fb1d 	bl	800085c <__aeabi_ddiv>
 800c222:	e79c      	b.n	800c15e <__ieee754_pow+0x3e>
 800c224:	2300      	movs	r3, #0
 800c226:	9304      	str	r3, [sp, #16]
 800c228:	2a00      	cmp	r2, #0
 800c22a:	d13d      	bne.n	800c2a8 <__ieee754_pow+0x188>
 800c22c:	4b51      	ldr	r3, [pc, #324]	; (800c374 <__ieee754_pow+0x254>)
 800c22e:	4598      	cmp	r8, r3
 800c230:	d1ea      	bne.n	800c208 <__ieee754_pow+0xe8>
 800c232:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c236:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c23a:	ea53 030a 	orrs.w	r3, r3, sl
 800c23e:	f000 845a 	beq.w	800caf6 <__ieee754_pow+0x9d6>
 800c242:	4b4f      	ldr	r3, [pc, #316]	; (800c380 <__ieee754_pow+0x260>)
 800c244:	429c      	cmp	r4, r3
 800c246:	dd08      	ble.n	800c25a <__ieee754_pow+0x13a>
 800c248:	f1b9 0f00 	cmp.w	r9, #0
 800c24c:	f2c0 8457 	blt.w	800cafe <__ieee754_pow+0x9de>
 800c250:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c254:	e783      	b.n	800c15e <__ieee754_pow+0x3e>
 800c256:	2302      	movs	r3, #2
 800c258:	e7e5      	b.n	800c226 <__ieee754_pow+0x106>
 800c25a:	f1b9 0f00 	cmp.w	r9, #0
 800c25e:	f04f 0000 	mov.w	r0, #0
 800c262:	f04f 0100 	mov.w	r1, #0
 800c266:	f6bf af7a 	bge.w	800c15e <__ieee754_pow+0x3e>
 800c26a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c26e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c272:	e774      	b.n	800c15e <__ieee754_pow+0x3e>
 800c274:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c278:	d106      	bne.n	800c288 <__ieee754_pow+0x168>
 800c27a:	4632      	mov	r2, r6
 800c27c:	463b      	mov	r3, r7
 800c27e:	4630      	mov	r0, r6
 800c280:	4639      	mov	r1, r7
 800c282:	f7f4 f9c1 	bl	8000608 <__aeabi_dmul>
 800c286:	e76a      	b.n	800c15e <__ieee754_pow+0x3e>
 800c288:	4b3e      	ldr	r3, [pc, #248]	; (800c384 <__ieee754_pow+0x264>)
 800c28a:	4599      	cmp	r9, r3
 800c28c:	d10c      	bne.n	800c2a8 <__ieee754_pow+0x188>
 800c28e:	2d00      	cmp	r5, #0
 800c290:	db0a      	blt.n	800c2a8 <__ieee754_pow+0x188>
 800c292:	ec47 6b10 	vmov	d0, r6, r7
 800c296:	b009      	add	sp, #36	; 0x24
 800c298:	ecbd 8b06 	vpop	{d8-d10}
 800c29c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a0:	f000 bd24 	b.w	800ccec <__ieee754_sqrt>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	9304      	str	r3, [sp, #16]
 800c2a8:	ec47 6b10 	vmov	d0, r6, r7
 800c2ac:	f000 fc66 	bl	800cb7c <fabs>
 800c2b0:	ec51 0b10 	vmov	r0, r1, d0
 800c2b4:	f1ba 0f00 	cmp.w	sl, #0
 800c2b8:	d129      	bne.n	800c30e <__ieee754_pow+0x1ee>
 800c2ba:	b124      	cbz	r4, 800c2c6 <__ieee754_pow+0x1a6>
 800c2bc:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c2c0:	4b2e      	ldr	r3, [pc, #184]	; (800c37c <__ieee754_pow+0x25c>)
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d123      	bne.n	800c30e <__ieee754_pow+0x1ee>
 800c2c6:	f1b9 0f00 	cmp.w	r9, #0
 800c2ca:	da05      	bge.n	800c2d8 <__ieee754_pow+0x1b8>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	492a      	ldr	r1, [pc, #168]	; (800c37c <__ieee754_pow+0x25c>)
 800c2d4:	f7f4 fac2 	bl	800085c <__aeabi_ddiv>
 800c2d8:	2d00      	cmp	r5, #0
 800c2da:	f6bf af40 	bge.w	800c15e <__ieee754_pow+0x3e>
 800c2de:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c2e2:	9b04      	ldr	r3, [sp, #16]
 800c2e4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c2e8:	431c      	orrs	r4, r3
 800c2ea:	d108      	bne.n	800c2fe <__ieee754_pow+0x1de>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	f7f3 ffd0 	bl	8000298 <__aeabi_dsub>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	e78f      	b.n	800c21e <__ieee754_pow+0xfe>
 800c2fe:	9b04      	ldr	r3, [sp, #16]
 800c300:	2b01      	cmp	r3, #1
 800c302:	f47f af2c 	bne.w	800c15e <__ieee754_pow+0x3e>
 800c306:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c30a:	4619      	mov	r1, r3
 800c30c:	e727      	b.n	800c15e <__ieee754_pow+0x3e>
 800c30e:	0feb      	lsrs	r3, r5, #31
 800c310:	3b01      	subs	r3, #1
 800c312:	9306      	str	r3, [sp, #24]
 800c314:	9a06      	ldr	r2, [sp, #24]
 800c316:	9b04      	ldr	r3, [sp, #16]
 800c318:	4313      	orrs	r3, r2
 800c31a:	d102      	bne.n	800c322 <__ieee754_pow+0x202>
 800c31c:	4632      	mov	r2, r6
 800c31e:	463b      	mov	r3, r7
 800c320:	e7e6      	b.n	800c2f0 <__ieee754_pow+0x1d0>
 800c322:	4b19      	ldr	r3, [pc, #100]	; (800c388 <__ieee754_pow+0x268>)
 800c324:	4598      	cmp	r8, r3
 800c326:	f340 80fb 	ble.w	800c520 <__ieee754_pow+0x400>
 800c32a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c32e:	4598      	cmp	r8, r3
 800c330:	4b13      	ldr	r3, [pc, #76]	; (800c380 <__ieee754_pow+0x260>)
 800c332:	dd0c      	ble.n	800c34e <__ieee754_pow+0x22e>
 800c334:	429c      	cmp	r4, r3
 800c336:	dc0f      	bgt.n	800c358 <__ieee754_pow+0x238>
 800c338:	f1b9 0f00 	cmp.w	r9, #0
 800c33c:	da0f      	bge.n	800c35e <__ieee754_pow+0x23e>
 800c33e:	2000      	movs	r0, #0
 800c340:	b009      	add	sp, #36	; 0x24
 800c342:	ecbd 8b06 	vpop	{d8-d10}
 800c346:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34a:	f000 bcc6 	b.w	800ccda <__math_oflow>
 800c34e:	429c      	cmp	r4, r3
 800c350:	dbf2      	blt.n	800c338 <__ieee754_pow+0x218>
 800c352:	4b0a      	ldr	r3, [pc, #40]	; (800c37c <__ieee754_pow+0x25c>)
 800c354:	429c      	cmp	r4, r3
 800c356:	dd19      	ble.n	800c38c <__ieee754_pow+0x26c>
 800c358:	f1b9 0f00 	cmp.w	r9, #0
 800c35c:	dcef      	bgt.n	800c33e <__ieee754_pow+0x21e>
 800c35e:	2000      	movs	r0, #0
 800c360:	b009      	add	sp, #36	; 0x24
 800c362:	ecbd 8b06 	vpop	{d8-d10}
 800c366:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c36a:	f000 bcad 	b.w	800ccc8 <__math_uflow>
 800c36e:	bf00      	nop
 800c370:	fff00000 	.word	0xfff00000
 800c374:	7ff00000 	.word	0x7ff00000
 800c378:	433fffff 	.word	0x433fffff
 800c37c:	3ff00000 	.word	0x3ff00000
 800c380:	3fefffff 	.word	0x3fefffff
 800c384:	3fe00000 	.word	0x3fe00000
 800c388:	41e00000 	.word	0x41e00000
 800c38c:	2200      	movs	r2, #0
 800c38e:	4b60      	ldr	r3, [pc, #384]	; (800c510 <__ieee754_pow+0x3f0>)
 800c390:	f7f3 ff82 	bl	8000298 <__aeabi_dsub>
 800c394:	4604      	mov	r4, r0
 800c396:	460d      	mov	r5, r1
 800c398:	a353      	add	r3, pc, #332	; (adr r3, 800c4e8 <__ieee754_pow+0x3c8>)
 800c39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39e:	f7f4 f933 	bl	8000608 <__aeabi_dmul>
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	460f      	mov	r7, r1
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	a351      	add	r3, pc, #324	; (adr r3, 800c4f0 <__ieee754_pow+0x3d0>)
 800c3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b0:	f7f4 f92a 	bl	8000608 <__aeabi_dmul>
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	4682      	mov	sl, r0
 800c3b8:	468b      	mov	fp, r1
 800c3ba:	4b56      	ldr	r3, [pc, #344]	; (800c514 <__ieee754_pow+0x3f4>)
 800c3bc:	4620      	mov	r0, r4
 800c3be:	4629      	mov	r1, r5
 800c3c0:	f7f4 f922 	bl	8000608 <__aeabi_dmul>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	a14b      	add	r1, pc, #300	; (adr r1, 800c4f8 <__ieee754_pow+0x3d8>)
 800c3ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ce:	f7f3 ff63 	bl	8000298 <__aeabi_dsub>
 800c3d2:	4622      	mov	r2, r4
 800c3d4:	462b      	mov	r3, r5
 800c3d6:	f7f4 f917 	bl	8000608 <__aeabi_dmul>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	2000      	movs	r0, #0
 800c3e0:	494d      	ldr	r1, [pc, #308]	; (800c518 <__ieee754_pow+0x3f8>)
 800c3e2:	f7f3 ff59 	bl	8000298 <__aeabi_dsub>
 800c3e6:	4680      	mov	r8, r0
 800c3e8:	4689      	mov	r9, r1
 800c3ea:	4622      	mov	r2, r4
 800c3ec:	462b      	mov	r3, r5
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	f7f4 f909 	bl	8000608 <__aeabi_dmul>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4640      	mov	r0, r8
 800c3fc:	4649      	mov	r1, r9
 800c3fe:	f7f4 f903 	bl	8000608 <__aeabi_dmul>
 800c402:	a33f      	add	r3, pc, #252	; (adr r3, 800c500 <__ieee754_pow+0x3e0>)
 800c404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c408:	f7f4 f8fe 	bl	8000608 <__aeabi_dmul>
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	4650      	mov	r0, sl
 800c412:	4659      	mov	r1, fp
 800c414:	f7f3 ff40 	bl	8000298 <__aeabi_dsub>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	4680      	mov	r8, r0
 800c41e:	4689      	mov	r9, r1
 800c420:	4630      	mov	r0, r6
 800c422:	4639      	mov	r1, r7
 800c424:	f7f3 ff3a 	bl	800029c <__adddf3>
 800c428:	2000      	movs	r0, #0
 800c42a:	4632      	mov	r2, r6
 800c42c:	463b      	mov	r3, r7
 800c42e:	4604      	mov	r4, r0
 800c430:	460d      	mov	r5, r1
 800c432:	f7f3 ff31 	bl	8000298 <__aeabi_dsub>
 800c436:	4602      	mov	r2, r0
 800c438:	460b      	mov	r3, r1
 800c43a:	4640      	mov	r0, r8
 800c43c:	4649      	mov	r1, r9
 800c43e:	f7f3 ff2b 	bl	8000298 <__aeabi_dsub>
 800c442:	9b04      	ldr	r3, [sp, #16]
 800c444:	9a06      	ldr	r2, [sp, #24]
 800c446:	4682      	mov	sl, r0
 800c448:	3b01      	subs	r3, #1
 800c44a:	468b      	mov	fp, r1
 800c44c:	4313      	orrs	r3, r2
 800c44e:	f040 81e7 	bne.w	800c820 <__ieee754_pow+0x700>
 800c452:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c508 <__ieee754_pow+0x3e8>
 800c456:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c45a:	2600      	movs	r6, #0
 800c45c:	eeb0 8a47 	vmov.f32	s16, s14
 800c460:	eef0 8a67 	vmov.f32	s17, s15
 800c464:	463b      	mov	r3, r7
 800c466:	4632      	mov	r2, r6
 800c468:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c46c:	f7f3 ff14 	bl	8000298 <__aeabi_dsub>
 800c470:	4622      	mov	r2, r4
 800c472:	462b      	mov	r3, r5
 800c474:	f7f4 f8c8 	bl	8000608 <__aeabi_dmul>
 800c478:	4680      	mov	r8, r0
 800c47a:	4689      	mov	r9, r1
 800c47c:	4650      	mov	r0, sl
 800c47e:	4659      	mov	r1, fp
 800c480:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c484:	f7f4 f8c0 	bl	8000608 <__aeabi_dmul>
 800c488:	4602      	mov	r2, r0
 800c48a:	460b      	mov	r3, r1
 800c48c:	4640      	mov	r0, r8
 800c48e:	4649      	mov	r1, r9
 800c490:	f7f3 ff04 	bl	800029c <__adddf3>
 800c494:	4680      	mov	r8, r0
 800c496:	4689      	mov	r9, r1
 800c498:	4632      	mov	r2, r6
 800c49a:	463b      	mov	r3, r7
 800c49c:	4620      	mov	r0, r4
 800c49e:	4629      	mov	r1, r5
 800c4a0:	f7f4 f8b2 	bl	8000608 <__aeabi_dmul>
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	460d      	mov	r5, r1
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	4649      	mov	r1, r9
 800c4ae:	4640      	mov	r0, r8
 800c4b0:	f7f3 fef4 	bl	800029c <__adddf3>
 800c4b4:	4b19      	ldr	r3, [pc, #100]	; (800c51c <__ieee754_pow+0x3fc>)
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	460f      	mov	r7, r1
 800c4ba:	4299      	cmp	r1, r3
 800c4bc:	468b      	mov	fp, r1
 800c4be:	ec45 4b19 	vmov	d9, r4, r5
 800c4c2:	f340 82f1 	ble.w	800caa8 <__ieee754_pow+0x988>
 800c4c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c4ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c4ce:	4303      	orrs	r3, r0
 800c4d0:	f000 81e4 	beq.w	800c89c <__ieee754_pow+0x77c>
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	ec51 0b18 	vmov	r0, r1, d8
 800c4dc:	f7f4 fb06 	bl	8000aec <__aeabi_dcmplt>
 800c4e0:	3800      	subs	r0, #0
 800c4e2:	bf18      	it	ne
 800c4e4:	2001      	movne	r0, #1
 800c4e6:	e72b      	b.n	800c340 <__ieee754_pow+0x220>
 800c4e8:	60000000 	.word	0x60000000
 800c4ec:	3ff71547 	.word	0x3ff71547
 800c4f0:	f85ddf44 	.word	0xf85ddf44
 800c4f4:	3e54ae0b 	.word	0x3e54ae0b
 800c4f8:	55555555 	.word	0x55555555
 800c4fc:	3fd55555 	.word	0x3fd55555
 800c500:	652b82fe 	.word	0x652b82fe
 800c504:	3ff71547 	.word	0x3ff71547
 800c508:	00000000 	.word	0x00000000
 800c50c:	bff00000 	.word	0xbff00000
 800c510:	3ff00000 	.word	0x3ff00000
 800c514:	3fd00000 	.word	0x3fd00000
 800c518:	3fe00000 	.word	0x3fe00000
 800c51c:	408fffff 	.word	0x408fffff
 800c520:	4bd5      	ldr	r3, [pc, #852]	; (800c878 <__ieee754_pow+0x758>)
 800c522:	2200      	movs	r2, #0
 800c524:	402b      	ands	r3, r5
 800c526:	b92b      	cbnz	r3, 800c534 <__ieee754_pow+0x414>
 800c528:	4bd4      	ldr	r3, [pc, #848]	; (800c87c <__ieee754_pow+0x75c>)
 800c52a:	f7f4 f86d 	bl	8000608 <__aeabi_dmul>
 800c52e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c532:	460c      	mov	r4, r1
 800c534:	1523      	asrs	r3, r4, #20
 800c536:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c53a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c53e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c542:	4413      	add	r3, r2
 800c544:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c548:	9305      	str	r3, [sp, #20]
 800c54a:	4bcd      	ldr	r3, [pc, #820]	; (800c880 <__ieee754_pow+0x760>)
 800c54c:	429c      	cmp	r4, r3
 800c54e:	dd08      	ble.n	800c562 <__ieee754_pow+0x442>
 800c550:	4bcc      	ldr	r3, [pc, #816]	; (800c884 <__ieee754_pow+0x764>)
 800c552:	429c      	cmp	r4, r3
 800c554:	f340 8162 	ble.w	800c81c <__ieee754_pow+0x6fc>
 800c558:	9b05      	ldr	r3, [sp, #20]
 800c55a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c55e:	3301      	adds	r3, #1
 800c560:	9305      	str	r3, [sp, #20]
 800c562:	2400      	movs	r4, #0
 800c564:	00e3      	lsls	r3, r4, #3
 800c566:	4682      	mov	sl, r0
 800c568:	4629      	mov	r1, r5
 800c56a:	46ab      	mov	fp, r5
 800c56c:	9307      	str	r3, [sp, #28]
 800c56e:	4bc6      	ldr	r3, [pc, #792]	; (800c888 <__ieee754_pow+0x768>)
 800c570:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c574:	ed93 7b00 	vldr	d7, [r3]
 800c578:	eeb0 9a47 	vmov.f32	s18, s14
 800c57c:	eef0 9a67 	vmov.f32	s19, s15
 800c580:	ec53 2b17 	vmov	r2, r3, d7
 800c584:	f7f3 fe88 	bl	8000298 <__aeabi_dsub>
 800c588:	4652      	mov	r2, sl
 800c58a:	4606      	mov	r6, r0
 800c58c:	460f      	mov	r7, r1
 800c58e:	462b      	mov	r3, r5
 800c590:	106d      	asrs	r5, r5, #1
 800c592:	ec51 0b19 	vmov	r0, r1, d9
 800c596:	f7f3 fe81 	bl	800029c <__adddf3>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	2000      	movs	r0, #0
 800c5a0:	49ba      	ldr	r1, [pc, #744]	; (800c88c <__ieee754_pow+0x76c>)
 800c5a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c5a6:	f7f4 f959 	bl	800085c <__aeabi_ddiv>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c5b2:	ec41 0b1a 	vmov	d10, r0, r1
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	4639      	mov	r1, r7
 800c5ba:	f7f4 f825 	bl	8000608 <__aeabi_dmul>
 800c5be:	2300      	movs	r3, #0
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5c6:	9302      	str	r3, [sp, #8]
 800c5c8:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800c5cc:	4614      	mov	r4, r2
 800c5ce:	461d      	mov	r5, r3
 800c5d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c5d4:	ec41 0b18 	vmov	d8, r0, r1
 800c5d8:	4640      	mov	r0, r8
 800c5da:	4649      	mov	r1, r9
 800c5dc:	f7f4 f814 	bl	8000608 <__aeabi_dmul>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	4639      	mov	r1, r7
 800c5e8:	f7f3 fe56 	bl	8000298 <__aeabi_dsub>
 800c5ec:	4606      	mov	r6, r0
 800c5ee:	460f      	mov	r7, r1
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	ec53 2b19 	vmov	r2, r3, d9
 800c5f8:	f7f3 fe4e 	bl	8000298 <__aeabi_dsub>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	460b      	mov	r3, r1
 800c600:	4650      	mov	r0, sl
 800c602:	4659      	mov	r1, fp
 800c604:	f7f3 fe48 	bl	8000298 <__aeabi_dsub>
 800c608:	4642      	mov	r2, r8
 800c60a:	464b      	mov	r3, r9
 800c60c:	f7f3 fffc 	bl	8000608 <__aeabi_dmul>
 800c610:	4602      	mov	r2, r0
 800c612:	460b      	mov	r3, r1
 800c614:	4630      	mov	r0, r6
 800c616:	4639      	mov	r1, r7
 800c618:	f7f3 fe3e 	bl	8000298 <__aeabi_dsub>
 800c61c:	ec53 2b1a 	vmov	r2, r3, d10
 800c620:	f7f3 fff2 	bl	8000608 <__aeabi_dmul>
 800c624:	ec53 2b18 	vmov	r2, r3, d8
 800c628:	ec41 0b19 	vmov	d9, r0, r1
 800c62c:	ec51 0b18 	vmov	r0, r1, d8
 800c630:	f7f3 ffea 	bl	8000608 <__aeabi_dmul>
 800c634:	4604      	mov	r4, r0
 800c636:	460d      	mov	r5, r1
 800c638:	a37b      	add	r3, pc, #492	; (adr r3, 800c828 <__ieee754_pow+0x708>)
 800c63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63e:	f7f3 ffe3 	bl	8000608 <__aeabi_dmul>
 800c642:	a37b      	add	r3, pc, #492	; (adr r3, 800c830 <__ieee754_pow+0x710>)
 800c644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c648:	f7f3 fe28 	bl	800029c <__adddf3>
 800c64c:	4622      	mov	r2, r4
 800c64e:	462b      	mov	r3, r5
 800c650:	f7f3 ffda 	bl	8000608 <__aeabi_dmul>
 800c654:	a378      	add	r3, pc, #480	; (adr r3, 800c838 <__ieee754_pow+0x718>)
 800c656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65a:	f7f3 fe1f 	bl	800029c <__adddf3>
 800c65e:	4622      	mov	r2, r4
 800c660:	462b      	mov	r3, r5
 800c662:	f7f3 ffd1 	bl	8000608 <__aeabi_dmul>
 800c666:	a376      	add	r3, pc, #472	; (adr r3, 800c840 <__ieee754_pow+0x720>)
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	f7f3 fe16 	bl	800029c <__adddf3>
 800c670:	4622      	mov	r2, r4
 800c672:	462b      	mov	r3, r5
 800c674:	f7f3 ffc8 	bl	8000608 <__aeabi_dmul>
 800c678:	a373      	add	r3, pc, #460	; (adr r3, 800c848 <__ieee754_pow+0x728>)
 800c67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67e:	f7f3 fe0d 	bl	800029c <__adddf3>
 800c682:	4622      	mov	r2, r4
 800c684:	462b      	mov	r3, r5
 800c686:	f7f3 ffbf 	bl	8000608 <__aeabi_dmul>
 800c68a:	a371      	add	r3, pc, #452	; (adr r3, 800c850 <__ieee754_pow+0x730>)
 800c68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c690:	f7f3 fe04 	bl	800029c <__adddf3>
 800c694:	4606      	mov	r6, r0
 800c696:	460f      	mov	r7, r1
 800c698:	4622      	mov	r2, r4
 800c69a:	462b      	mov	r3, r5
 800c69c:	4620      	mov	r0, r4
 800c69e:	4629      	mov	r1, r5
 800c6a0:	f7f3 ffb2 	bl	8000608 <__aeabi_dmul>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	4639      	mov	r1, r7
 800c6ac:	f7f3 ffac 	bl	8000608 <__aeabi_dmul>
 800c6b0:	4642      	mov	r2, r8
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	460d      	mov	r5, r1
 800c6b6:	464b      	mov	r3, r9
 800c6b8:	ec51 0b18 	vmov	r0, r1, d8
 800c6bc:	f7f3 fdee 	bl	800029c <__adddf3>
 800c6c0:	ec53 2b19 	vmov	r2, r3, d9
 800c6c4:	f7f3 ffa0 	bl	8000608 <__aeabi_dmul>
 800c6c8:	4622      	mov	r2, r4
 800c6ca:	462b      	mov	r3, r5
 800c6cc:	f7f3 fde6 	bl	800029c <__adddf3>
 800c6d0:	4642      	mov	r2, r8
 800c6d2:	4682      	mov	sl, r0
 800c6d4:	468b      	mov	fp, r1
 800c6d6:	464b      	mov	r3, r9
 800c6d8:	4640      	mov	r0, r8
 800c6da:	4649      	mov	r1, r9
 800c6dc:	f7f3 ff94 	bl	8000608 <__aeabi_dmul>
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	4b6b      	ldr	r3, [pc, #428]	; (800c890 <__ieee754_pow+0x770>)
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	460f      	mov	r7, r1
 800c6e8:	f7f3 fdd8 	bl	800029c <__adddf3>
 800c6ec:	4652      	mov	r2, sl
 800c6ee:	465b      	mov	r3, fp
 800c6f0:	f7f3 fdd4 	bl	800029c <__adddf3>
 800c6f4:	2000      	movs	r0, #0
 800c6f6:	460d      	mov	r5, r1
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	4604      	mov	r4, r0
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	4649      	mov	r1, r9
 800c700:	4640      	mov	r0, r8
 800c702:	f7f3 ff81 	bl	8000608 <__aeabi_dmul>
 800c706:	2200      	movs	r2, #0
 800c708:	4680      	mov	r8, r0
 800c70a:	4689      	mov	r9, r1
 800c70c:	4b60      	ldr	r3, [pc, #384]	; (800c890 <__ieee754_pow+0x770>)
 800c70e:	4620      	mov	r0, r4
 800c710:	4629      	mov	r1, r5
 800c712:	f7f3 fdc1 	bl	8000298 <__aeabi_dsub>
 800c716:	4632      	mov	r2, r6
 800c718:	463b      	mov	r3, r7
 800c71a:	f7f3 fdbd 	bl	8000298 <__aeabi_dsub>
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	4650      	mov	r0, sl
 800c724:	4659      	mov	r1, fp
 800c726:	f7f3 fdb7 	bl	8000298 <__aeabi_dsub>
 800c72a:	ec53 2b18 	vmov	r2, r3, d8
 800c72e:	f7f3 ff6b 	bl	8000608 <__aeabi_dmul>
 800c732:	4606      	mov	r6, r0
 800c734:	460f      	mov	r7, r1
 800c736:	4622      	mov	r2, r4
 800c738:	462b      	mov	r3, r5
 800c73a:	ec51 0b19 	vmov	r0, r1, d9
 800c73e:	f7f3 ff63 	bl	8000608 <__aeabi_dmul>
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	4630      	mov	r0, r6
 800c748:	4639      	mov	r1, r7
 800c74a:	f7f3 fda7 	bl	800029c <__adddf3>
 800c74e:	4606      	mov	r6, r0
 800c750:	460f      	mov	r7, r1
 800c752:	4602      	mov	r2, r0
 800c754:	460b      	mov	r3, r1
 800c756:	4640      	mov	r0, r8
 800c758:	4649      	mov	r1, r9
 800c75a:	f7f3 fd9f 	bl	800029c <__adddf3>
 800c75e:	2000      	movs	r0, #0
 800c760:	460d      	mov	r5, r1
 800c762:	4604      	mov	r4, r0
 800c764:	a33c      	add	r3, pc, #240	; (adr r3, 800c858 <__ieee754_pow+0x738>)
 800c766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76a:	f7f3 ff4d 	bl	8000608 <__aeabi_dmul>
 800c76e:	4642      	mov	r2, r8
 800c770:	464b      	mov	r3, r9
 800c772:	ec41 0b18 	vmov	d8, r0, r1
 800c776:	4620      	mov	r0, r4
 800c778:	4629      	mov	r1, r5
 800c77a:	f7f3 fd8d 	bl	8000298 <__aeabi_dsub>
 800c77e:	4602      	mov	r2, r0
 800c780:	460b      	mov	r3, r1
 800c782:	4630      	mov	r0, r6
 800c784:	4639      	mov	r1, r7
 800c786:	f7f3 fd87 	bl	8000298 <__aeabi_dsub>
 800c78a:	a335      	add	r3, pc, #212	; (adr r3, 800c860 <__ieee754_pow+0x740>)
 800c78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c790:	f7f3 ff3a 	bl	8000608 <__aeabi_dmul>
 800c794:	4606      	mov	r6, r0
 800c796:	460f      	mov	r7, r1
 800c798:	4620      	mov	r0, r4
 800c79a:	4629      	mov	r1, r5
 800c79c:	a332      	add	r3, pc, #200	; (adr r3, 800c868 <__ieee754_pow+0x748>)
 800c79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a2:	f7f3 ff31 	bl	8000608 <__aeabi_dmul>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	4639      	mov	r1, r7
 800c7ae:	f7f3 fd75 	bl	800029c <__adddf3>
 800c7b2:	9a07      	ldr	r2, [sp, #28]
 800c7b4:	4b37      	ldr	r3, [pc, #220]	; (800c894 <__ieee754_pow+0x774>)
 800c7b6:	4413      	add	r3, r2
 800c7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7bc:	f7f3 fd6e 	bl	800029c <__adddf3>
 800c7c0:	4682      	mov	sl, r0
 800c7c2:	9805      	ldr	r0, [sp, #20]
 800c7c4:	468b      	mov	fp, r1
 800c7c6:	f7f3 feb5 	bl	8000534 <__aeabi_i2d>
 800c7ca:	9a07      	ldr	r2, [sp, #28]
 800c7cc:	4b32      	ldr	r3, [pc, #200]	; (800c898 <__ieee754_pow+0x778>)
 800c7ce:	4606      	mov	r6, r0
 800c7d0:	460f      	mov	r7, r1
 800c7d2:	4413      	add	r3, r2
 800c7d4:	4652      	mov	r2, sl
 800c7d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7da:	ec51 0b18 	vmov	r0, r1, d8
 800c7de:	465b      	mov	r3, fp
 800c7e0:	f7f3 fd5c 	bl	800029c <__adddf3>
 800c7e4:	4642      	mov	r2, r8
 800c7e6:	464b      	mov	r3, r9
 800c7e8:	f7f3 fd58 	bl	800029c <__adddf3>
 800c7ec:	4632      	mov	r2, r6
 800c7ee:	463b      	mov	r3, r7
 800c7f0:	f7f3 fd54 	bl	800029c <__adddf3>
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	4632      	mov	r2, r6
 800c7f8:	463b      	mov	r3, r7
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	460d      	mov	r5, r1
 800c7fe:	f7f3 fd4b 	bl	8000298 <__aeabi_dsub>
 800c802:	4642      	mov	r2, r8
 800c804:	464b      	mov	r3, r9
 800c806:	f7f3 fd47 	bl	8000298 <__aeabi_dsub>
 800c80a:	ec53 2b18 	vmov	r2, r3, d8
 800c80e:	f7f3 fd43 	bl	8000298 <__aeabi_dsub>
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	4650      	mov	r0, sl
 800c818:	4659      	mov	r1, fp
 800c81a:	e610      	b.n	800c43e <__ieee754_pow+0x31e>
 800c81c:	2401      	movs	r4, #1
 800c81e:	e6a1      	b.n	800c564 <__ieee754_pow+0x444>
 800c820:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c870 <__ieee754_pow+0x750>
 800c824:	e617      	b.n	800c456 <__ieee754_pow+0x336>
 800c826:	bf00      	nop
 800c828:	4a454eef 	.word	0x4a454eef
 800c82c:	3fca7e28 	.word	0x3fca7e28
 800c830:	93c9db65 	.word	0x93c9db65
 800c834:	3fcd864a 	.word	0x3fcd864a
 800c838:	a91d4101 	.word	0xa91d4101
 800c83c:	3fd17460 	.word	0x3fd17460
 800c840:	518f264d 	.word	0x518f264d
 800c844:	3fd55555 	.word	0x3fd55555
 800c848:	db6fabff 	.word	0xdb6fabff
 800c84c:	3fdb6db6 	.word	0x3fdb6db6
 800c850:	33333303 	.word	0x33333303
 800c854:	3fe33333 	.word	0x3fe33333
 800c858:	e0000000 	.word	0xe0000000
 800c85c:	3feec709 	.word	0x3feec709
 800c860:	dc3a03fd 	.word	0xdc3a03fd
 800c864:	3feec709 	.word	0x3feec709
 800c868:	145b01f5 	.word	0x145b01f5
 800c86c:	be3e2fe0 	.word	0xbe3e2fe0
 800c870:	00000000 	.word	0x00000000
 800c874:	3ff00000 	.word	0x3ff00000
 800c878:	7ff00000 	.word	0x7ff00000
 800c87c:	43400000 	.word	0x43400000
 800c880:	0003988e 	.word	0x0003988e
 800c884:	000bb679 	.word	0x000bb679
 800c888:	0800cf10 	.word	0x0800cf10
 800c88c:	3ff00000 	.word	0x3ff00000
 800c890:	40080000 	.word	0x40080000
 800c894:	0800cf30 	.word	0x0800cf30
 800c898:	0800cf20 	.word	0x0800cf20
 800c89c:	a3b5      	add	r3, pc, #724	; (adr r3, 800cb74 <__ieee754_pow+0xa54>)
 800c89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a2:	4640      	mov	r0, r8
 800c8a4:	4649      	mov	r1, r9
 800c8a6:	f7f3 fcf9 	bl	800029c <__adddf3>
 800c8aa:	4622      	mov	r2, r4
 800c8ac:	462b      	mov	r3, r5
 800c8ae:	ec41 0b1a 	vmov	d10, r0, r1
 800c8b2:	4630      	mov	r0, r6
 800c8b4:	4639      	mov	r1, r7
 800c8b6:	f7f3 fcef 	bl	8000298 <__aeabi_dsub>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	460b      	mov	r3, r1
 800c8be:	ec51 0b1a 	vmov	r0, r1, d10
 800c8c2:	f7f4 f931 	bl	8000b28 <__aeabi_dcmpgt>
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	f47f ae04 	bne.w	800c4d4 <__ieee754_pow+0x3b4>
 800c8cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c8d0:	4aa3      	ldr	r2, [pc, #652]	; (800cb60 <__ieee754_pow+0xa40>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	f340 8108 	ble.w	800cae8 <__ieee754_pow+0x9c8>
 800c8d8:	151b      	asrs	r3, r3, #20
 800c8da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c8de:	48a1      	ldr	r0, [pc, #644]	; (800cb64 <__ieee754_pow+0xa44>)
 800c8e0:	f1bb 0f00 	cmp.w	fp, #0
 800c8e4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c8e8:	f04f 0200 	mov.w	r2, #0
 800c8ec:	fa4a fa03 	asr.w	sl, sl, r3
 800c8f0:	44da      	add	sl, fp
 800c8f2:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c8f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c8fa:	fa40 f001 	asr.w	r0, r0, r1
 800c8fe:	f1c1 0114 	rsb	r1, r1, #20
 800c902:	ea00 030a 	and.w	r3, r0, sl
 800c906:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c90a:	4620      	mov	r0, r4
 800c90c:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c910:	fa4a fa01 	asr.w	sl, sl, r1
 800c914:	4629      	mov	r1, r5
 800c916:	bfb8      	it	lt
 800c918:	f1ca 0a00 	rsblt	sl, sl, #0
 800c91c:	f7f3 fcbc 	bl	8000298 <__aeabi_dsub>
 800c920:	ec41 0b19 	vmov	d9, r0, r1
 800c924:	4642      	mov	r2, r8
 800c926:	464b      	mov	r3, r9
 800c928:	ec51 0b19 	vmov	r0, r1, d9
 800c92c:	f7f3 fcb6 	bl	800029c <__adddf3>
 800c930:	2000      	movs	r0, #0
 800c932:	460d      	mov	r5, r1
 800c934:	4604      	mov	r4, r0
 800c936:	a37a      	add	r3, pc, #488	; (adr r3, 800cb20 <__ieee754_pow+0xa00>)
 800c938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93c:	f7f3 fe64 	bl	8000608 <__aeabi_dmul>
 800c940:	4606      	mov	r6, r0
 800c942:	460f      	mov	r7, r1
 800c944:	4620      	mov	r0, r4
 800c946:	4629      	mov	r1, r5
 800c948:	ec53 2b19 	vmov	r2, r3, d9
 800c94c:	f7f3 fca4 	bl	8000298 <__aeabi_dsub>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	4640      	mov	r0, r8
 800c956:	4649      	mov	r1, r9
 800c958:	f7f3 fc9e 	bl	8000298 <__aeabi_dsub>
 800c95c:	a372      	add	r3, pc, #456	; (adr r3, 800cb28 <__ieee754_pow+0xa08>)
 800c95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c962:	f7f3 fe51 	bl	8000608 <__aeabi_dmul>
 800c966:	4680      	mov	r8, r0
 800c968:	4689      	mov	r9, r1
 800c96a:	4620      	mov	r0, r4
 800c96c:	4629      	mov	r1, r5
 800c96e:	a370      	add	r3, pc, #448	; (adr r3, 800cb30 <__ieee754_pow+0xa10>)
 800c970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c974:	f7f3 fe48 	bl	8000608 <__aeabi_dmul>
 800c978:	4602      	mov	r2, r0
 800c97a:	460b      	mov	r3, r1
 800c97c:	4640      	mov	r0, r8
 800c97e:	4649      	mov	r1, r9
 800c980:	f7f3 fc8c 	bl	800029c <__adddf3>
 800c984:	4604      	mov	r4, r0
 800c986:	460d      	mov	r5, r1
 800c988:	4602      	mov	r2, r0
 800c98a:	460b      	mov	r3, r1
 800c98c:	4630      	mov	r0, r6
 800c98e:	4639      	mov	r1, r7
 800c990:	f7f3 fc84 	bl	800029c <__adddf3>
 800c994:	4632      	mov	r2, r6
 800c996:	4680      	mov	r8, r0
 800c998:	4689      	mov	r9, r1
 800c99a:	463b      	mov	r3, r7
 800c99c:	f7f3 fc7c 	bl	8000298 <__aeabi_dsub>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	4629      	mov	r1, r5
 800c9a8:	f7f3 fc76 	bl	8000298 <__aeabi_dsub>
 800c9ac:	4642      	mov	r2, r8
 800c9ae:	4606      	mov	r6, r0
 800c9b0:	460f      	mov	r7, r1
 800c9b2:	464b      	mov	r3, r9
 800c9b4:	4640      	mov	r0, r8
 800c9b6:	4649      	mov	r1, r9
 800c9b8:	f7f3 fe26 	bl	8000608 <__aeabi_dmul>
 800c9bc:	4604      	mov	r4, r0
 800c9be:	460d      	mov	r5, r1
 800c9c0:	a35d      	add	r3, pc, #372	; (adr r3, 800cb38 <__ieee754_pow+0xa18>)
 800c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c6:	f7f3 fe1f 	bl	8000608 <__aeabi_dmul>
 800c9ca:	a35d      	add	r3, pc, #372	; (adr r3, 800cb40 <__ieee754_pow+0xa20>)
 800c9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d0:	f7f3 fc62 	bl	8000298 <__aeabi_dsub>
 800c9d4:	4622      	mov	r2, r4
 800c9d6:	462b      	mov	r3, r5
 800c9d8:	f7f3 fe16 	bl	8000608 <__aeabi_dmul>
 800c9dc:	a35a      	add	r3, pc, #360	; (adr r3, 800cb48 <__ieee754_pow+0xa28>)
 800c9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e2:	f7f3 fc5b 	bl	800029c <__adddf3>
 800c9e6:	4622      	mov	r2, r4
 800c9e8:	462b      	mov	r3, r5
 800c9ea:	f7f3 fe0d 	bl	8000608 <__aeabi_dmul>
 800c9ee:	a358      	add	r3, pc, #352	; (adr r3, 800cb50 <__ieee754_pow+0xa30>)
 800c9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f4:	f7f3 fc50 	bl	8000298 <__aeabi_dsub>
 800c9f8:	4622      	mov	r2, r4
 800c9fa:	462b      	mov	r3, r5
 800c9fc:	f7f3 fe04 	bl	8000608 <__aeabi_dmul>
 800ca00:	a355      	add	r3, pc, #340	; (adr r3, 800cb58 <__ieee754_pow+0xa38>)
 800ca02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca06:	f7f3 fc49 	bl	800029c <__adddf3>
 800ca0a:	4622      	mov	r2, r4
 800ca0c:	462b      	mov	r3, r5
 800ca0e:	f7f3 fdfb 	bl	8000608 <__aeabi_dmul>
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	4640      	mov	r0, r8
 800ca18:	4649      	mov	r1, r9
 800ca1a:	f7f3 fc3d 	bl	8000298 <__aeabi_dsub>
 800ca1e:	4604      	mov	r4, r0
 800ca20:	460d      	mov	r5, r1
 800ca22:	4602      	mov	r2, r0
 800ca24:	460b      	mov	r3, r1
 800ca26:	4640      	mov	r0, r8
 800ca28:	4649      	mov	r1, r9
 800ca2a:	f7f3 fded 	bl	8000608 <__aeabi_dmul>
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca34:	ec41 0b19 	vmov	d9, r0, r1
 800ca38:	4620      	mov	r0, r4
 800ca3a:	4629      	mov	r1, r5
 800ca3c:	f7f3 fc2c 	bl	8000298 <__aeabi_dsub>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	ec51 0b19 	vmov	r0, r1, d9
 800ca48:	f7f3 ff08 	bl	800085c <__aeabi_ddiv>
 800ca4c:	4632      	mov	r2, r6
 800ca4e:	4604      	mov	r4, r0
 800ca50:	460d      	mov	r5, r1
 800ca52:	463b      	mov	r3, r7
 800ca54:	4640      	mov	r0, r8
 800ca56:	4649      	mov	r1, r9
 800ca58:	f7f3 fdd6 	bl	8000608 <__aeabi_dmul>
 800ca5c:	4632      	mov	r2, r6
 800ca5e:	463b      	mov	r3, r7
 800ca60:	f7f3 fc1c 	bl	800029c <__adddf3>
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
 800ca68:	4620      	mov	r0, r4
 800ca6a:	4629      	mov	r1, r5
 800ca6c:	f7f3 fc14 	bl	8000298 <__aeabi_dsub>
 800ca70:	4642      	mov	r2, r8
 800ca72:	464b      	mov	r3, r9
 800ca74:	f7f3 fc10 	bl	8000298 <__aeabi_dsub>
 800ca78:	460b      	mov	r3, r1
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	493a      	ldr	r1, [pc, #232]	; (800cb68 <__ieee754_pow+0xa48>)
 800ca7e:	2000      	movs	r0, #0
 800ca80:	f7f3 fc0a 	bl	8000298 <__aeabi_dsub>
 800ca84:	ec41 0b10 	vmov	d0, r0, r1
 800ca88:	ee10 3a90 	vmov	r3, s1
 800ca8c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ca90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca94:	da2b      	bge.n	800caee <__ieee754_pow+0x9ce>
 800ca96:	4650      	mov	r0, sl
 800ca98:	f000 f87a 	bl	800cb90 <scalbn>
 800ca9c:	ec51 0b10 	vmov	r0, r1, d0
 800caa0:	ec53 2b18 	vmov	r2, r3, d8
 800caa4:	f7ff bbed 	b.w	800c282 <__ieee754_pow+0x162>
 800caa8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800caac:	4b2f      	ldr	r3, [pc, #188]	; (800cb6c <__ieee754_pow+0xa4c>)
 800caae:	429e      	cmp	r6, r3
 800cab0:	f77f af0c 	ble.w	800c8cc <__ieee754_pow+0x7ac>
 800cab4:	4b2e      	ldr	r3, [pc, #184]	; (800cb70 <__ieee754_pow+0xa50>)
 800cab6:	440b      	add	r3, r1
 800cab8:	4303      	orrs	r3, r0
 800caba:	d009      	beq.n	800cad0 <__ieee754_pow+0x9b0>
 800cabc:	2200      	movs	r2, #0
 800cabe:	2300      	movs	r3, #0
 800cac0:	ec51 0b18 	vmov	r0, r1, d8
 800cac4:	f7f4 f812 	bl	8000aec <__aeabi_dcmplt>
 800cac8:	3800      	subs	r0, #0
 800caca:	bf18      	it	ne
 800cacc:	2001      	movne	r0, #1
 800cace:	e447      	b.n	800c360 <__ieee754_pow+0x240>
 800cad0:	4622      	mov	r2, r4
 800cad2:	462b      	mov	r3, r5
 800cad4:	f7f3 fbe0 	bl	8000298 <__aeabi_dsub>
 800cad8:	4642      	mov	r2, r8
 800cada:	464b      	mov	r3, r9
 800cadc:	f7f4 f81a 	bl	8000b14 <__aeabi_dcmpge>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	f43f aef3 	beq.w	800c8cc <__ieee754_pow+0x7ac>
 800cae6:	e7e9      	b.n	800cabc <__ieee754_pow+0x99c>
 800cae8:	f04f 0a00 	mov.w	sl, #0
 800caec:	e71a      	b.n	800c924 <__ieee754_pow+0x804>
 800caee:	ec51 0b10 	vmov	r0, r1, d0
 800caf2:	4619      	mov	r1, r3
 800caf4:	e7d4      	b.n	800caa0 <__ieee754_pow+0x980>
 800caf6:	2000      	movs	r0, #0
 800caf8:	491b      	ldr	r1, [pc, #108]	; (800cb68 <__ieee754_pow+0xa48>)
 800cafa:	f7ff bb30 	b.w	800c15e <__ieee754_pow+0x3e>
 800cafe:	2000      	movs	r0, #0
 800cb00:	2100      	movs	r1, #0
 800cb02:	f7ff bb2c 	b.w	800c15e <__ieee754_pow+0x3e>
 800cb06:	4630      	mov	r0, r6
 800cb08:	4639      	mov	r1, r7
 800cb0a:	f7ff bb28 	b.w	800c15e <__ieee754_pow+0x3e>
 800cb0e:	9204      	str	r2, [sp, #16]
 800cb10:	f7ff bb7a 	b.w	800c208 <__ieee754_pow+0xe8>
 800cb14:	2300      	movs	r3, #0
 800cb16:	f7ff bb64 	b.w	800c1e2 <__ieee754_pow+0xc2>
 800cb1a:	bf00      	nop
 800cb1c:	f3af 8000 	nop.w
 800cb20:	00000000 	.word	0x00000000
 800cb24:	3fe62e43 	.word	0x3fe62e43
 800cb28:	fefa39ef 	.word	0xfefa39ef
 800cb2c:	3fe62e42 	.word	0x3fe62e42
 800cb30:	0ca86c39 	.word	0x0ca86c39
 800cb34:	be205c61 	.word	0xbe205c61
 800cb38:	72bea4d0 	.word	0x72bea4d0
 800cb3c:	3e663769 	.word	0x3e663769
 800cb40:	c5d26bf1 	.word	0xc5d26bf1
 800cb44:	3ebbbd41 	.word	0x3ebbbd41
 800cb48:	af25de2c 	.word	0xaf25de2c
 800cb4c:	3f11566a 	.word	0x3f11566a
 800cb50:	16bebd93 	.word	0x16bebd93
 800cb54:	3f66c16c 	.word	0x3f66c16c
 800cb58:	5555553e 	.word	0x5555553e
 800cb5c:	3fc55555 	.word	0x3fc55555
 800cb60:	3fe00000 	.word	0x3fe00000
 800cb64:	fff00000 	.word	0xfff00000
 800cb68:	3ff00000 	.word	0x3ff00000
 800cb6c:	4090cbff 	.word	0x4090cbff
 800cb70:	3f6f3400 	.word	0x3f6f3400
 800cb74:	652b82fe 	.word	0x652b82fe
 800cb78:	3c971547 	.word	0x3c971547

0800cb7c <fabs>:
 800cb7c:	ec51 0b10 	vmov	r0, r1, d0
 800cb80:	ee10 2a10 	vmov	r2, s0
 800cb84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb88:	ec43 2b10 	vmov	d0, r2, r3
 800cb8c:	4770      	bx	lr
	...

0800cb90 <scalbn>:
 800cb90:	b570      	push	{r4, r5, r6, lr}
 800cb92:	ec55 4b10 	vmov	r4, r5, d0
 800cb96:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cb9a:	4606      	mov	r6, r0
 800cb9c:	462b      	mov	r3, r5
 800cb9e:	b999      	cbnz	r1, 800cbc8 <scalbn+0x38>
 800cba0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cba4:	4323      	orrs	r3, r4
 800cba6:	d03f      	beq.n	800cc28 <scalbn+0x98>
 800cba8:	4b35      	ldr	r3, [pc, #212]	; (800cc80 <scalbn+0xf0>)
 800cbaa:	4629      	mov	r1, r5
 800cbac:	2200      	movs	r2, #0
 800cbae:	ee10 0a10 	vmov	r0, s0
 800cbb2:	f7f3 fd29 	bl	8000608 <__aeabi_dmul>
 800cbb6:	4b33      	ldr	r3, [pc, #204]	; (800cc84 <scalbn+0xf4>)
 800cbb8:	4604      	mov	r4, r0
 800cbba:	460d      	mov	r5, r1
 800cbbc:	429e      	cmp	r6, r3
 800cbbe:	da10      	bge.n	800cbe2 <scalbn+0x52>
 800cbc0:	a327      	add	r3, pc, #156	; (adr r3, 800cc60 <scalbn+0xd0>)
 800cbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc6:	e01f      	b.n	800cc08 <scalbn+0x78>
 800cbc8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cbcc:	4291      	cmp	r1, r2
 800cbce:	d10c      	bne.n	800cbea <scalbn+0x5a>
 800cbd0:	ee10 2a10 	vmov	r2, s0
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	4629      	mov	r1, r5
 800cbd8:	f7f3 fb60 	bl	800029c <__adddf3>
 800cbdc:	4604      	mov	r4, r0
 800cbde:	460d      	mov	r5, r1
 800cbe0:	e022      	b.n	800cc28 <scalbn+0x98>
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cbe8:	3936      	subs	r1, #54	; 0x36
 800cbea:	f24c 3250 	movw	r2, #50000	; 0xc350
 800cbee:	4296      	cmp	r6, r2
 800cbf0:	dd0d      	ble.n	800cc0e <scalbn+0x7e>
 800cbf2:	2d00      	cmp	r5, #0
 800cbf4:	a11c      	add	r1, pc, #112	; (adr r1, 800cc68 <scalbn+0xd8>)
 800cbf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbfa:	da02      	bge.n	800cc02 <scalbn+0x72>
 800cbfc:	a11c      	add	r1, pc, #112	; (adr r1, 800cc70 <scalbn+0xe0>)
 800cbfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc02:	a319      	add	r3, pc, #100	; (adr r3, 800cc68 <scalbn+0xd8>)
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	f7f3 fcfe 	bl	8000608 <__aeabi_dmul>
 800cc0c:	e7e6      	b.n	800cbdc <scalbn+0x4c>
 800cc0e:	1872      	adds	r2, r6, r1
 800cc10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cc14:	428a      	cmp	r2, r1
 800cc16:	dcec      	bgt.n	800cbf2 <scalbn+0x62>
 800cc18:	2a00      	cmp	r2, #0
 800cc1a:	dd08      	ble.n	800cc2e <scalbn+0x9e>
 800cc1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cc28:	ec45 4b10 	vmov	d0, r4, r5
 800cc2c:	bd70      	pop	{r4, r5, r6, pc}
 800cc2e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cc32:	da08      	bge.n	800cc46 <scalbn+0xb6>
 800cc34:	2d00      	cmp	r5, #0
 800cc36:	a10a      	add	r1, pc, #40	; (adr r1, 800cc60 <scalbn+0xd0>)
 800cc38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc3c:	dac0      	bge.n	800cbc0 <scalbn+0x30>
 800cc3e:	a10e      	add	r1, pc, #56	; (adr r1, 800cc78 <scalbn+0xe8>)
 800cc40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc44:	e7bc      	b.n	800cbc0 <scalbn+0x30>
 800cc46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc4a:	3236      	adds	r2, #54	; 0x36
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc52:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cc56:	2200      	movs	r2, #0
 800cc58:	4b0b      	ldr	r3, [pc, #44]	; (800cc88 <scalbn+0xf8>)
 800cc5a:	e7d5      	b.n	800cc08 <scalbn+0x78>
 800cc5c:	f3af 8000 	nop.w
 800cc60:	c2f8f359 	.word	0xc2f8f359
 800cc64:	01a56e1f 	.word	0x01a56e1f
 800cc68:	8800759c 	.word	0x8800759c
 800cc6c:	7e37e43c 	.word	0x7e37e43c
 800cc70:	8800759c 	.word	0x8800759c
 800cc74:	fe37e43c 	.word	0xfe37e43c
 800cc78:	c2f8f359 	.word	0xc2f8f359
 800cc7c:	81a56e1f 	.word	0x81a56e1f
 800cc80:	43500000 	.word	0x43500000
 800cc84:	ffff3cb0 	.word	0xffff3cb0
 800cc88:	3c900000 	.word	0x3c900000

0800cc8c <with_errno>:
 800cc8c:	b570      	push	{r4, r5, r6, lr}
 800cc8e:	4604      	mov	r4, r0
 800cc90:	460d      	mov	r5, r1
 800cc92:	4616      	mov	r6, r2
 800cc94:	f7ff f99e 	bl	800bfd4 <__errno>
 800cc98:	4629      	mov	r1, r5
 800cc9a:	6006      	str	r6, [r0, #0]
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	bd70      	pop	{r4, r5, r6, pc}

0800cca0 <xflow>:
 800cca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cca2:	4614      	mov	r4, r2
 800cca4:	461d      	mov	r5, r3
 800cca6:	b108      	cbz	r0, 800ccac <xflow+0xc>
 800cca8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ccac:	4620      	mov	r0, r4
 800ccae:	4629      	mov	r1, r5
 800ccb0:	e9cd 2300 	strd	r2, r3, [sp]
 800ccb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccb8:	f7f3 fca6 	bl	8000608 <__aeabi_dmul>
 800ccbc:	2222      	movs	r2, #34	; 0x22
 800ccbe:	b003      	add	sp, #12
 800ccc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccc4:	f7ff bfe2 	b.w	800cc8c <with_errno>

0800ccc8 <__math_uflow>:
 800ccc8:	b508      	push	{r3, lr}
 800ccca:	2200      	movs	r2, #0
 800cccc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ccd0:	f7ff ffe6 	bl	800cca0 <xflow>
 800ccd4:	ec41 0b10 	vmov	d0, r0, r1
 800ccd8:	bd08      	pop	{r3, pc}

0800ccda <__math_oflow>:
 800ccda:	b508      	push	{r3, lr}
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800cce2:	f7ff ffdd 	bl	800cca0 <xflow>
 800cce6:	ec41 0b10 	vmov	d0, r0, r1
 800ccea:	bd08      	pop	{r3, pc}

0800ccec <__ieee754_sqrt>:
 800ccec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf0:	4e6b      	ldr	r6, [pc, #428]	; (800cea0 <__ieee754_sqrt+0x1b4>)
 800ccf2:	ee10 0a10 	vmov	r0, s0
 800ccf6:	ee10 2a10 	vmov	r2, s0
 800ccfa:	ec55 4b10 	vmov	r4, r5, d0
 800ccfe:	43ae      	bics	r6, r5
 800cd00:	4629      	mov	r1, r5
 800cd02:	462b      	mov	r3, r5
 800cd04:	d10d      	bne.n	800cd22 <__ieee754_sqrt+0x36>
 800cd06:	f7f3 fc7f 	bl	8000608 <__aeabi_dmul>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	4620      	mov	r0, r4
 800cd10:	4629      	mov	r1, r5
 800cd12:	f7f3 fac3 	bl	800029c <__adddf3>
 800cd16:	4604      	mov	r4, r0
 800cd18:	460d      	mov	r5, r1
 800cd1a:	ec45 4b10 	vmov	d0, r4, r5
 800cd1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd22:	2d00      	cmp	r5, #0
 800cd24:	dc0b      	bgt.n	800cd3e <__ieee754_sqrt+0x52>
 800cd26:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd2a:	4326      	orrs	r6, r4
 800cd2c:	d0f5      	beq.n	800cd1a <__ieee754_sqrt+0x2e>
 800cd2e:	b135      	cbz	r5, 800cd3e <__ieee754_sqrt+0x52>
 800cd30:	f7f3 fab2 	bl	8000298 <__aeabi_dsub>
 800cd34:	4602      	mov	r2, r0
 800cd36:	460b      	mov	r3, r1
 800cd38:	f7f3 fd90 	bl	800085c <__aeabi_ddiv>
 800cd3c:	e7eb      	b.n	800cd16 <__ieee754_sqrt+0x2a>
 800cd3e:	1509      	asrs	r1, r1, #20
 800cd40:	f000 8091 	beq.w	800ce66 <__ieee754_sqrt+0x17a>
 800cd44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd48:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800cd4c:	07c9      	lsls	r1, r1, #31
 800cd4e:	f04f 0500 	mov.w	r5, #0
 800cd52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd56:	ea4f 0666 	mov.w	r6, r6, asr #1
 800cd5a:	f04f 0e16 	mov.w	lr, #22
 800cd5e:	46ac      	mov	ip, r5
 800cd60:	bf58      	it	pl
 800cd62:	005b      	lslpl	r3, r3, #1
 800cd64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd68:	bf5c      	itt	pl
 800cd6a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800cd6e:	0052      	lslpl	r2, r2, #1
 800cd70:	005b      	lsls	r3, r3, #1
 800cd72:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cd76:	0052      	lsls	r2, r2, #1
 800cd78:	eb0c 0001 	add.w	r0, ip, r1
 800cd7c:	4298      	cmp	r0, r3
 800cd7e:	bfde      	ittt	le
 800cd80:	1a1b      	suble	r3, r3, r0
 800cd82:	eb00 0c01 	addle.w	ip, r0, r1
 800cd86:	186d      	addle	r5, r5, r1
 800cd88:	f1be 0e01 	subs.w	lr, lr, #1
 800cd8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd90:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cd94:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cd98:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cd9c:	d1ec      	bne.n	800cd78 <__ieee754_sqrt+0x8c>
 800cd9e:	4674      	mov	r4, lr
 800cda0:	2720      	movs	r7, #32
 800cda2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800cda6:	4563      	cmp	r3, ip
 800cda8:	eb01 000e 	add.w	r0, r1, lr
 800cdac:	dc02      	bgt.n	800cdb4 <__ieee754_sqrt+0xc8>
 800cdae:	d114      	bne.n	800cdda <__ieee754_sqrt+0xee>
 800cdb0:	4290      	cmp	r0, r2
 800cdb2:	d812      	bhi.n	800cdda <__ieee754_sqrt+0xee>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	eb00 0e01 	add.w	lr, r0, r1
 800cdba:	da59      	bge.n	800ce70 <__ieee754_sqrt+0x184>
 800cdbc:	f1be 0f00 	cmp.w	lr, #0
 800cdc0:	db56      	blt.n	800ce70 <__ieee754_sqrt+0x184>
 800cdc2:	f10c 0801 	add.w	r8, ip, #1
 800cdc6:	eba3 030c 	sub.w	r3, r3, ip
 800cdca:	4290      	cmp	r0, r2
 800cdcc:	440c      	add	r4, r1
 800cdce:	eba2 0200 	sub.w	r2, r2, r0
 800cdd2:	bf88      	it	hi
 800cdd4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cdd8:	46c4      	mov	ip, r8
 800cdda:	005b      	lsls	r3, r3, #1
 800cddc:	3f01      	subs	r7, #1
 800cdde:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cde2:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800cde6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800cdea:	d1dc      	bne.n	800cda6 <__ieee754_sqrt+0xba>
 800cdec:	4313      	orrs	r3, r2
 800cdee:	d01b      	beq.n	800ce28 <__ieee754_sqrt+0x13c>
 800cdf0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 800cea4 <__ieee754_sqrt+0x1b8>
 800cdf4:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800cea8 <__ieee754_sqrt+0x1bc>
 800cdf8:	e9da 0100 	ldrd	r0, r1, [sl]
 800cdfc:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce00:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce04:	f7f3 fa48 	bl	8000298 <__aeabi_dsub>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	4640      	mov	r0, r8
 800ce0e:	4649      	mov	r1, r9
 800ce10:	f7f3 fe76 	bl	8000b00 <__aeabi_dcmple>
 800ce14:	b140      	cbz	r0, 800ce28 <__ieee754_sqrt+0x13c>
 800ce16:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ce1a:	e9da 0100 	ldrd	r0, r1, [sl]
 800ce1e:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce22:	d127      	bne.n	800ce74 <__ieee754_sqrt+0x188>
 800ce24:	3501      	adds	r5, #1
 800ce26:	463c      	mov	r4, r7
 800ce28:	106a      	asrs	r2, r5, #1
 800ce2a:	07e9      	lsls	r1, r5, #31
 800ce2c:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800ce30:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ce34:	bf48      	it	mi
 800ce36:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ce3a:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ce3e:	461c      	mov	r4, r3
 800ce40:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ce44:	e769      	b.n	800cd1a <__ieee754_sqrt+0x2e>
 800ce46:	0ad3      	lsrs	r3, r2, #11
 800ce48:	3815      	subs	r0, #21
 800ce4a:	0552      	lsls	r2, r2, #21
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d0fa      	beq.n	800ce46 <__ieee754_sqrt+0x15a>
 800ce50:	02dc      	lsls	r4, r3, #11
 800ce52:	d50a      	bpl.n	800ce6a <__ieee754_sqrt+0x17e>
 800ce54:	f1c1 0420 	rsb	r4, r1, #32
 800ce58:	1e4d      	subs	r5, r1, #1
 800ce5a:	fa22 f404 	lsr.w	r4, r2, r4
 800ce5e:	408a      	lsls	r2, r1
 800ce60:	1b41      	subs	r1, r0, r5
 800ce62:	4323      	orrs	r3, r4
 800ce64:	e76e      	b.n	800cd44 <__ieee754_sqrt+0x58>
 800ce66:	4608      	mov	r0, r1
 800ce68:	e7f0      	b.n	800ce4c <__ieee754_sqrt+0x160>
 800ce6a:	005b      	lsls	r3, r3, #1
 800ce6c:	3101      	adds	r1, #1
 800ce6e:	e7ef      	b.n	800ce50 <__ieee754_sqrt+0x164>
 800ce70:	46e0      	mov	r8, ip
 800ce72:	e7a8      	b.n	800cdc6 <__ieee754_sqrt+0xda>
 800ce74:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce78:	f7f3 fa10 	bl	800029c <__adddf3>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	460b      	mov	r3, r1
 800ce80:	4640      	mov	r0, r8
 800ce82:	4649      	mov	r1, r9
 800ce84:	f7f3 fe32 	bl	8000aec <__aeabi_dcmplt>
 800ce88:	b128      	cbz	r0, 800ce96 <__ieee754_sqrt+0x1aa>
 800ce8a:	1ca0      	adds	r0, r4, #2
 800ce8c:	f104 0402 	add.w	r4, r4, #2
 800ce90:	bf08      	it	eq
 800ce92:	3501      	addeq	r5, #1
 800ce94:	e7c8      	b.n	800ce28 <__ieee754_sqrt+0x13c>
 800ce96:	3401      	adds	r4, #1
 800ce98:	f024 0401 	bic.w	r4, r4, #1
 800ce9c:	e7c4      	b.n	800ce28 <__ieee754_sqrt+0x13c>
 800ce9e:	bf00      	nop
 800cea0:	7ff00000 	.word	0x7ff00000
 800cea4:	20000060 	.word	0x20000060
 800cea8:	20000068 	.word	0x20000068

0800ceac <_init>:
 800ceac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceae:	bf00      	nop
 800ceb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceb2:	bc08      	pop	{r3}
 800ceb4:	469e      	mov	lr, r3
 800ceb6:	4770      	bx	lr

0800ceb8 <_fini>:
 800ceb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceba:	bf00      	nop
 800cebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cebe:	bc08      	pop	{r3}
 800cec0:	469e      	mov	lr, r3
 800cec2:	4770      	bx	lr
